import { createStartupChunkDependenciesRuntimeModule } from './StartupChunkDependenciesRuntimeModule.js';
import { createStartupEntrypointRuntimeModule } from './StartupEntrypointRuntimeModule.js';
const PLUGIN_NAME = 'StartupChunkDependenciesPlugin';
export class StartupChunkDependenciesPlugin {
    options;
    chunkLoading;
    asyncChunkLoading;
    constructor(options) {
        this.options = options;
        this.chunkLoading = options.chunkLoading;
        this.asyncChunkLoading = typeof options.asyncChunkLoading === 'boolean'
            ? options.asyncChunkLoading
            : true;
    }
    apply(compiler) {
        const { RuntimeGlobals } = compiler.webpack;
        const StartupChunkDependenciesRuntimeModule = createStartupChunkDependenciesRuntimeModule(compiler.webpack);
        const StartupEntrypointRuntimeModule = createStartupEntrypointRuntimeModule(compiler.webpack);
        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {
            const globalChunkLoading = compilation.outputOptions.chunkLoading;
            const isEnabledForChunk = (chunk) => {
                const options = chunk.getEntryOptions();
                const chunkLoading = options && options.chunkLoading !== undefined
                    ? options.chunkLoading
                    : globalChunkLoading;
                return chunkLoading === this.chunkLoading;
            };
            compilation.hooks.additionalTreeRuntimeRequirements.tap(PLUGIN_NAME, (chunk, set) => {
                if (!isEnabledForChunk(chunk))
                    return;
                if (compilation.chunkGraph.hasChunkEntryDependentChunks(chunk)) {
                    set.add(RuntimeGlobals.startup);
                    set.add(RuntimeGlobals.ensureChunk);
                    set.add(RuntimeGlobals.ensureChunkIncludeEntries);
                    compilation.addRuntimeModule(chunk, new StartupChunkDependenciesRuntimeModule(this.asyncChunkLoading));
                }
            });
            compilation.hooks.runtimeRequirementInTree
                .for(RuntimeGlobals.startupEntrypoint)
                .tap(PLUGIN_NAME, (chunk, set) => {
                if (!isEnabledForChunk(chunk))
                    return;
                set.add(RuntimeGlobals.require);
                set.add(RuntimeGlobals.ensureChunk);
                set.add(RuntimeGlobals.ensureChunkIncludeEntries);
                compilation.addRuntimeModule(chunk, new StartupEntrypointRuntimeModule(this.asyncChunkLoading));
            });
        });
    }
}
//# sourceMappingURL=StartupChunkDependenciesPlugin.js.map