/**
 * Load the theme from the browser private extension storage. This
 * storage is bound to the user profile and may be synced by the
 * browser.
 */
export async function loadSettings(window, store) {
    const doc = window.document;
    doc.body.classList.add(chrome.devtools.panels.themeName || "light");
    try {
        const settings = await new Promise(res => {
            chrome.storage.sync.get([
                "theme",
                "captureRenderReasons",
                "debugMode",
                "highlightUpdates",
                "componentFilters",
            ], res);
        });
        if (settings) {
            if (["light", "dark", "auto"].includes(settings.theme)) {
                store.theme.value = settings.theme;
            }
            store.profiler.captureRenderReasons.value = !!settings.captureRenderReasons;
            store.profiler.highlightUpdates.value = !!settings.highlightUpdates;
            store.debugMode.value = !!settings.debugMode;
            if (settings.componentFilters) {
                store.filter.restore(settings.componentFilters);
            }
        }
    }
    catch (e) {
        // We don't really care if we couldn't load the settings
        // eslint-disable-next-line no-console
        console.error(e);
    }
}
export function storeFilters(state) {
    store({ componentFilters: state });
}
// eslint-disable-next-line @typescript-eslint/ban-types
function store(obj) {
    try {
        chrome.storage.sync.set(obj);
    }
    catch (e) {
        // Storing the settings is not a critical operation, so we'll
        // just log the error and continue
        // eslint-disable-next-line no-console
        console.error(e);
    }
}
/**
 * Save theme into user storage (bound to user profile).
 */
export function storeTheme(theme) {
    store({ theme });
}
/**
 * Save render reason capturing into user storage (bound to user profile).
 */
export function storeCaptureRenderReasons(enabled) {
    store({ captureRenderReasons: enabled });
}
/**
 * Enables some additional debug views that's useful when
 * working on this extension.
 */
export function storeDebugMode(enabled) {
    store({ debugMode: enabled });
}
/**
 * Visualize updates on the page.
 */
export function storeHighlightUpdates(enabled) {
    store({ highlightUpdates: enabled });
}
