import { createAdapter } from "./adapter/adapter";
import { DEFAULT_FIlTERS } from "./adapter/filter";
import { createRenderer } from "./shared/renderer";
import { setupOptionsV10 } from "./10/options";
import parseSemverish from "./parse-semverish";
import { PROFILE_RELOAD, STATS_RELOAD } from "../constants";
import { setupOptionsV11 } from "./11/options";
import { newProfiler } from "./adapter/profiler";
import { createIdMappingState } from "./shared/idMapper";
import { bindingsV10 } from "./10/bindings";
import { bindingsV11 } from "./11/bindings";
/**
 * Create hook to which Preact will subscribe and listen to. The hook
 * is the entrypoint where everything begins.
 */
export function createHook(port) {
    const window = preactDevtoolsCtx;
    const { listen, send } = port;
    const renderers = new Map();
    let uid = 0;
    let status = "disconnected";
    const profiler = newProfiler();
    const filters = DEFAULT_FIlTERS;
    // Lazily init the adapter when a renderer is attached
    const init = () => {
        createAdapter(port, profiler, renderers);
        status = "pending";
        listen("init", () => {
            status = "connected";
        });
        send("init", null);
    };
    const attachRenderer = (renderer, supports) => {
        if (status === "disconnected") {
            init();
        }
        renderers.set(++uid, renderer);
        // Content Script is likely not ready at this point, so don't
        // flush any events here and politely request it to initialize
        send("attach", {
            id: uid,
            supportsProfiling: !!supports.profiling,
            supportsRenderReasons: !!supports.renderReasons,
            supportsHooks: !!supports.hooks,
        });
        // Feature: Profile and reload
        // Check if we should immediately start profiling on create
        const profilerOptions = window.localStorage.getItem(PROFILE_RELOAD);
        if (profilerOptions !== null) {
            window.localStorage.removeItem(PROFILE_RELOAD);
            const options = JSON.parse(profilerOptions);
            profiler.isProfiling = true;
            profiler.captureRenderReasons = !!options?.captureRenderReasons;
        }
        const statsOptions = window.localStorage.getItem(STATS_RELOAD);
        if (statsOptions !== null) {
            window.localStorage.removeItem(STATS_RELOAD);
            profiler.recordStats = true;
        }
        return uid;
    };
    // Delete all roots when the current frame is closed
    // @ts-ignore
    const tt = lynxCoreInject.tt;
    if (tt.callDestroyLifetimeFun) {
        const oldCallDestroyLifetimeFun = tt.callDestroyLifetimeFun;
        tt.callDestroyLifetimeFun = () => {
            oldCallDestroyLifetimeFun();
            renderers.forEach(r => {
                if (r.clear)
                    r.clear();
            });
        };
    }
    // TODO: This should be added to codesandbox itself. I'm not too
    // happy with having site specific code in the extension, but
    // codesandbox is very popular among the Preact/React community
    // so this will get us started
    window.addEventListener("message", e => {
        if (renderers.size > 0 &&
            e.data &&
            e.data.codesandbox &&
            e.data.type === "compile") {
            renderers.forEach(r => {
                if (r.clear)
                    r.clear();
            });
        }
    });
    return {
        $0: null,
        $type: null,
        renderers,
        get connected() {
            return status === "connected";
        },
        set connected(_) {
            // eslint-disable-next-line no-console
            console.warn("Mutating __PREACT_DEVTOOLS__.connected is deprecated.");
        },
        emit: port.send,
        listen: () => {
            // eslint-disable-next-line no-console
            console.error("__PREACT_DEVTOOLS__.listen() is deprecated.");
        },
        attachPreact: (version, options, config) => {
            if (status === "disconnected") {
                init();
            }
            // attach the correct renderer/options hooks based on the preact version
            const preactVersionMatch = parseSemverish(version);
            if (!preactVersionMatch) {
                // eslint-disable-next-line no-console
                console.error(`[PREACT DEVTOOLS] Could not parse preact version ${version}`);
                return -1;
            }
            // Create an integer-based namespace to avoid clashing ids caused by
            // multiple connected renderers
            const namespace = Math.floor(Math.random() * 2 ** 32);
            const roots = new Map();
            // currently we only support preact >= 10, later we can add another branch for major === 8
            if (preactVersionMatch.major == 10) {
                const supports = {
                    renderReasons: !!config.Component,
                    hooks: (preactVersionMatch.minor === 4 && preactVersionMatch.patch >= 1) ||
                        preactVersionMatch.minor > 4,
                    profiling: true,
                };
                const idMapper = createIdMappingState(namespace, bindingsV10.getInstance);
                lynx
                    .getJSModule("GlobalEventEmitter")
                    .removeAllListeners("onBackgroundSnapshotInstanceUpdateId");
                lynx.getJSModule("GlobalEventEmitter").addListener("onBackgroundSnapshotInstanceUpdateId", 
                // @ts-expect-error
                ({ oldId, newId, }) => {
                    idMapper.updateSnapshotId(oldId, newId);
                });
                const renderer = createRenderer(port, config, options, supports, profiler, filters, idMapper, bindingsV10, roots, version);
                setupOptionsV10(options, renderer, roots, config);
                return attachRenderer(renderer, supports);
            }
            else if (preactVersionMatch.major === 11) {
                const idMapper = createIdMappingState(namespace, bindingsV11.getInstance);
                const renderer = createRenderer(port, config, options, { hooks: true, renderReasons: true }, profiler, filters, idMapper, bindingsV11, roots, version);
                setupOptionsV11(options, renderer, roots, config, profiler);
                return attachRenderer(renderer, {
                    hooks: true,
                    renderReasons: true,
                    profiling: true,
                });
            }
            // eslint-disable-next-line no-console
            console.error(`[PREACT DEVTOOLS] No devtools adapter exists for preact version "${version}". This is likely a bug in devtools.`);
            return -1;
        },
        attach: renderer => attachRenderer(renderer, { renderReasons: false }),
        detach: id => renderers.delete(id),
    };
}
