export function createIdMappingState(initial, getInstance) {
    return {
        instToId: new Map(),
        idToVNode: new Map(),
        idToInst: new Map(),
        nextId: initial,
        getInstance,
        snapshotIdToId: new Map(),
        idToUniqueIdList: new Map(),
        uniqueIdToId: new Map(),
        updateSnapshotId: function (oldId, newId) {
            if (this.snapshotIdToId.has(oldId)) {
                const id = this.snapshotIdToId.get(oldId);
                this.snapshotIdToId.delete(oldId);
                this.snapshotIdToId.set(newId, id);
                this.updateIdToUniqueIdRelation(newId, id);
            }
        },
        updateIdToUniqueIdRelation: function (snapshotId, id) {
            lynx
                // @ts-expect-error type error
                .getNativeApp()
                .callLepusMethod("getUniqueIdListBySnapshotId", { snapshotId }, (ret) => {
                if (ret?.uniqueIdList == null) {
                    // console.warn("Failed to get unique id for snapshot", snapshotId);
                    return;
                }
                const { uniqueIdList } = ret;
                this.idToUniqueIdList.set(id, uniqueIdList);
                if (uniqueIdList != null) {
                    for (const uniqueId of uniqueIdList) {
                        this.uniqueIdToId.set(uniqueId, id);
                    }
                }
            });
        },
    };
}
export function getVNodeById(state, id) {
    return state.idToVNode.get(id) || null;
}
export function getUniqueListIdById(state, id) {
    return state.idToUniqueIdList.get(id) || null;
}
export function getUniqueListIdBySnapshotId(state, snapshotId) {
    const id = state.snapshotIdToId.get(snapshotId);
    if (!id)
        return null;
    return state.idToUniqueIdList.get(id) || null;
}
export function getIdByUniqueId(state, uniqueId) {
    return state.uniqueIdToId.get(uniqueId) || null;
}
export function hasVNodeId(state, vnode) {
    return vnode != null && state.instToId.has(state.getInstance(vnode));
}
export function getVNodeId(state, vnode) {
    if (vnode == null)
        return -1;
    const inst = state.getInstance(vnode);
    return state.instToId.get(inst) || -1;
}
export function getOrCreateVNodeId(state, vnode) {
    const id = getVNodeId(state, vnode);
    if (id !== -1)
        return id;
    return createVNodeId(state, vnode);
}
export function updateVNodeId(state, id, vnode) {
    const inst = state.getInstance(vnode);
    state.idToInst.set(id, inst);
    state.idToVNode.set(id, vnode);
    let snapshotId;
    try {
        // @ts-ignore
        snapshotId = vnode.__e.__id;
    }
    catch (e) {
        // It is as expected when destroying
        // console.log('updateVNodeId vnode', vnode)
        return;
    }
    state.snapshotIdToId.set(snapshotId, id);
    state.updateIdToUniqueIdRelation(snapshotId, id);
}
export function removeVNodeId(state, vnode) {
    if (hasVNodeId(state, vnode)) {
        const id = getVNodeId(state, vnode);
        state.idToInst.delete(id);
        state.idToVNode.delete(id);
        let snapshotId;
        try {
            // @ts-ignore
            snapshotId = vnode.__e.__id;
        }
        catch (e) {
            // It is as expected when destroying
            // console.log('updateVNodeId vnode', vnode)
            return;
        }
        state.snapshotIdToId.delete(snapshotId);
        const uniqueIdList = state.idToUniqueIdList.get(id);
        state.idToUniqueIdList.delete(id);
        if (uniqueIdList != null) {
            for (const uniqueId of uniqueIdList) {
                state.uniqueIdToId.delete(uniqueId);
            }
        }
    }
    const inst = state.getInstance(vnode);
    state.instToId.delete(inst);
}
export function createVNodeId(state, vnode) {
    const id = state.nextId++;
    const inst = state.getInstance(vnode);
    state.instToId.set(inst, id);
    state.idToInst.set(id, inst);
    state.idToVNode.set(id, vnode);
    let snapshotId;
    try {
        // @ts-ignore
        snapshotId = vnode.__e.__id;
    }
    catch (e) {
        // It is as expected when destroying
        // console.log('createVNodeId vnode', vnode)
        return;
    }
    state.snapshotIdToId.set(snapshotId, id);
    state.updateIdToUniqueIdRelation(snapshotId, id);
    return id;
}
