export function renderReasonToStr(reason) {
    switch (reason) {
        case 1 /* RenderReason.MOUNT */:
            return "mount";
        case 2 /* RenderReason.PARENT_UPDATE */:
            return "parent update";
        case 3 /* RenderReason.PROPS_CHANGED */:
            return "props changed";
        case 4 /* RenderReason.STATE_CHANGED */:
            return "state changed";
        case 5 /* RenderReason.HOOKS_CHANGED */:
            return "hooks changed";
        case 6 /* RenderReason.FORCE_UPDATE */:
            return "force update";
    }
}
export function createReason(type, items) {
    return { type, items };
}
/**
 * Get all keys that have different values in two objects. Does a
 * shallow comparison.
 */
export function getChangedKeys(a, b) {
    const changed = [];
    let key;
    for (key in a) {
        if (!(key in b) || a[key] !== b[key]) {
            changed.push(key);
        }
    }
    for (key in b) {
        if (!(key in a)) {
            changed.push(key);
        }
    }
    return changed;
}
