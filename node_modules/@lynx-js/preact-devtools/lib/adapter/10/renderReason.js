import { createReason, getChangedKeys, } from "../shared/renderReasons";
/**
 * Detect why a VNode updated.
 */
export function getRenderReasonPost(ids, bindings, timings, old, next) {
    if (old === null) {
        return next !== null ? createReason(1 /* RenderReason.MOUNT */, null) : null;
    }
    else if (next === null) {
        return null;
    }
    // Components
    else if (typeof old.type === "function" && old.type === next.type) {
        const c = bindings.getComponent(next);
        if (c !== null) {
            // Check hooks
            const hooks = bindings.getStatefulHooks(next);
            if (hooks !== null && Array.isArray(c._oldHookValues)) {
                const hooksChanged = [];
                for (let i = 0; i < hooks.length; i++) {
                    if (bindings.isUseReducerOrState(hooks[i]) &&
                        c._oldHookValues[i] !== bindings.getStatefulHookValue(hooks[i])) {
                        hooksChanged.push(String(i));
                    }
                }
                if (hooksChanged.length > 0) {
                    return createReason(5 /* RenderReason.HOOKS_CHANGED */, hooksChanged);
                }
            }
            // Check state
            const prevState = c._prevState;
            if (prevState != null && prevState !== c.state) {
                return createReason(4 /* RenderReason.STATE_CHANGED */, getChangedKeys(prevState, c.state));
            }
            else if (prevState === undefined &&
                c.state !== undefined &&
                Object.keys(c.state).length > 0) {
                return createReason(4 /* RenderReason.STATE_CHANGED */, null);
            }
        }
    }
    // Check props
    if (old.props !== next.props) {
        const propsChanged = getChangedKeys(old.props, next.props);
        if (propsChanged.length > 0) {
            return createReason(3 /* RenderReason.PROPS_CHANGED */, propsChanged);
        }
    }
    const parent = bindings.getVNodeParent(next);
    if (parent != null &&
        (timings.start.get(next) || 0) >= (timings.start.get(parent) || 0) &&
        (timings.end.get(next) || 0) <= (timings.end.get(parent) || 0)) {
        return createReason(2 /* RenderReason.PARENT_UPDATE */, null);
    }
    return createReason(6 /* RenderReason.FORCE_UPDATE */, null);
}
