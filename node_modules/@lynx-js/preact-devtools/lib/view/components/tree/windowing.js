export function flattenChildren(tree, id, isCollapsed) {
    const out = [];
    const visited = new Set();
    const stack = [id];
    while (stack.length > 0) {
        const item = stack.pop();
        if (item == null)
            continue;
        const node = tree.get(item);
        if (!node)
            continue;
        if (!visited.has(node.id)) {
            out.push(node.id);
            visited.add(node.id);
            if (!isCollapsed(node.id)) {
                for (let i = node.children.length; i--;) {
                    stack.push(node.children[i]);
                }
            }
        }
    }
    return out;
}
export function clamp(n, max) {
    return Math.max(0, Math.min(n, max));
}
export function getLastChild(nodes, id) {
    const stack = [id];
    let item;
    let last = id;
    while ((item = stack.pop()) != null) {
        last = item;
        const node = nodes.get(item);
        if (node && node.children.length > 0) {
            stack.push(node.children[node.children.length - 1]);
        }
    }
    return last;
}
