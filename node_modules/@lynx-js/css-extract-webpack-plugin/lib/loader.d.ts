import type { LoaderContext } from 'webpack';
/**
 * The options of CSS extract loader.
 *
 * @public
 */
export interface LoaderOptions {
    /**
     * The same as {@link https://github.com/webpack-contrib/mini-css-extract-plugin/tree/master?tab=readme-ov-file#emit | mini-css-extract-plugin}.
     * Control whether emit the CSS to filesystem.
     *
     * - If `true`(default), emits a file (writes a file to the filesystem).
     *
     * - If `false`, the plugin will extract the CSS but will not emit the file.
     *
     * It is often useful to disable this option for server-side packages.
     *
     * @defaultValue true
     * @public
     */
    emit?: boolean;
    /**
     * {@inheritdoc @lynx-js/rspeedy#CssExtractRspackLoaderOptions.esModule}
     */
    esModule?: boolean | undefined;
    /**
     * The layer of the CSS execution.
     *
     * @remarks
     *
     * This should be combined with `experiments.layers`.
     */
    layer?: string | undefined;
}
export interface Dep {
    identifier: string;
    context: string | null;
    content: Buffer;
    media: string;
    identifierIndex?: number;
    supports?: string | undefined;
    layer?: string | undefined;
    sourceMap?: Buffer | undefined;
}
export declare function load(this: LoaderContext<LoaderOptions>, request: string, addDependencies: (deps: Dep[]) => void): Promise<string>;
export declare function pitch(this: LoaderContext<LoaderOptions>, request: string): Promise<string | undefined>;
export default function loader(this: LoaderContext<LoaderOptions>, content: string): string | undefined;
