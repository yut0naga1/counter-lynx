import { ReadyState } from './WebSocketImpl.js';
import type { EventMap } from './WebSocketImpl.js';
/**
 * The implementation of {@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket | WebSocket}
 * for Lynx.
 *
 * @remarks
 *
 * This only works in environment that has `NativeModules.LynxWebSocketModule`.
 *
 * @public
 */
export declare class WebSocket {
    #private;
    /**
     * {@inheritdoc @lynx-js/websocket#ReadyState.CONNECTING}
     */
    static CONNECTING: ReadyState;
    /**
     * {@inheritdoc @lynx-js/websocket#ReadyState.OPEN}
     */
    static OPEN: ReadyState;
    /**
     * {@inheritdoc @lynx-js/websocket#ReadyState.CLOSING}
     */
    static CLOSING: ReadyState;
    /**
     * {@inheritdoc @lynx-js/websocket#ReadyState.CLOSED}
     */
    static CLOSED: ReadyState;
    /**
     * @param url - The URL to which to connect; this should be the URL to which the WebSocket server will respond.
     * @param protocols - Either a single protocol string or an array of protocol strings. If it is omitted, an empty array is used by default, i.e. `[]`.
     * @param options - Extra options for Lynx only.
     */
    constructor(url: string, protocols?: string | string[], options?: {
        headers?: Record<string, string>;
    });
    /**
     * The `addEventListener()` method of the `EventTarget` interface sets up a function that will be called whenever the specified event is delivered to the target.
     * @param type - A case-sensitive string representing the event type to listen for.
     * @param callback - The function that receives a notification. See {@link @lynx-js/websocket#EventMap} for details of events.
     */
    addEventListener<T extends keyof EventMap>(type: T, callback?: (event: EventMap[T]) => void): void;
    /**
     * The `removeEventListener()` method of the `EventTarget` interface removes an event listener from the WebSocket.
     * @param type - The type of event to stop listening for.
     * @param callback - The function to remove as an event listener.
     */
    removeEventListener<T extends keyof EventMap>(type: T, callback: (event: EventMap[T]) => void): void;
    /**
     * onmessage is the Web-style callback of {@link WebSocket}.
     *
     * @example
     *
     * ```js
     * const socket = new WebSocket(url)
     * socket.onmessage = ({ data }) => {
     *   // handle data
     * }
     * ```
     * @public
     */
    get onmessage(): ((event: EventMap["message"]) => void) | null;
    set onmessage(callback: ((event: EventMap['message']) => void) | null);
    /**
     * onopen is the Web-style callback of {@link WebSocket}.
     *
     * @example
     *
     * ```js
     * const socket = new WebSocket(url)
     * socket.onopen = ({ data }) => {
     *   // handle data
     * }
     * ```
     * @public
     */
    get onopen(): ((event: EventMap["open"]) => void) | null;
    set onopen(callback: ((event: EventMap['open']) => void) | null);
    /**
     * onclose is the Web-style callback of {@link WebSocket}.
     *
     * @example
     *
     * ```js
     * const socket = new WebSocket(url)
     * socket.onclose = ({ data }) => {
     *   // handle data
     * }
     * ```
     * @public
     */
    get onclose(): ((event: EventMap["close"]) => void) | null;
    set onclose(callback: ((event: EventMap['close']) => void) | null);
    /**
     * onerror is the Web-style callback of {@link WebSocket}.
     *
     * @example
     *
     * ```js
     * const socket = new WebSocket(url)
     * socket.onerror = ({ data }) => {
     *   // handle data
     * }
     * ```
     * @public
     */
    get onerror(): ((event: EventMap["error"]) => void) | null;
    set onerror(callback: ((event: EventMap['error']) => void) | null);
    /**
     * The `url` read-only property returns the URL of the {@link WebSocket} passed by the constructor.
     */
    get url(): string;
    /**
     * The `readyState` read-only property returns the current state of the {@link WebSocket} connection.
     */
    get readyState(): ReadyState;
    /**
     * The WebSocket.protocol read-only property returns the name of the sub-protocol the server selected.
     *
     * @remarks
     * This will be one of the strings specified in the protocols parameter when creating the WebSocket object,
     * or the empty string if no connection is established.
     */
    get protocol(): string | undefined;
    /**
     * The `send` method send the specified data to be transmitted to the server over the {@link WebSocket} connection.
     *
     * @remarks
     * It will throw an exception if you call `send()` when the connection is in the {@link WebSocket.CONNECTING | CONNECTING } state. If you call `send()` when the connection is in the {@link WebSocket.CLOSING | CLOSING } or {@link WebSocket.CLOSED | CLOSED } states, it will silently discard the data.
     * @param data - The specified data to be transmitted.
     */
    send(data: string): void;
    /**
     * The `ping` method send an empty message to the server over the {@link WebSocket} connection.
     * @remarks
     * It will throw an exception if you call `ping()` when the connection is in the {@link WebSocket.CONNECTING | CONNECTING } state. If you call `ping()` when the connection is in the {@link WebSocket.CLOSING | CLOSING } or {@link WebSocket.CLOSED | CLOSED } states, it will silently discard the data.
     */
    ping(): void;
    /**
     * The `close()` method closes the {@link WebSocket} connection or connection attempt, if any.
     *
     * @remarks
     * If the connection is already {@link WebSocket.CLOSED | CLOSED }, this method does nothing.
     */
    close(code?: number, reason?: string): void;
}
