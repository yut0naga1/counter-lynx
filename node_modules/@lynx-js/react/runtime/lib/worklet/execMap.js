import { IndexMap } from './indexMap.js';
/**
 * `WorkletExecIdMap` ensures the worklet object is not released in js context when the main thread is still holding the
 * worklet object (or any of its jsFnHandles). The worklet object holds the js functions which might be called by `runOnBackground()`.
 * If the worklet object is incorrectly released earlier, the `runOnBackground()` would result in failure.
 *
 * Every time a worklet object is sent to the main thread, an `execId` is distributed and will be sent to element
 * context with the worklet object. This relationship is recorded in this class. When all the references to the
 * worklet object are released in the main thread, a message will be sent back to remove the record here.
 *
 * @internal
 */
export class WorkletExecIdMap extends IndexMap {
    add(worklet) {
        const execId = super.add(worklet);
        worklet._execId = execId;
        return execId;
    }
    findJsFnHandle(execId, fnId) {
        const worklet = this.get(execId);
        if (!worklet) {
            return undefined;
        }
        const f = (value) => {
            if (value === null || typeof value !== 'object') {
                return undefined;
            }
            const obj = value;
            if ('_jsFnId' in obj && obj['_jsFnId'] === fnId) {
                return obj;
            }
            for (const i in obj) {
                const result = f(obj[i]);
                if (result) {
                    return result;
                }
            }
            return undefined;
        };
        return f(worklet);
    }
}
//# sourceMappingURL=execMap.js.map