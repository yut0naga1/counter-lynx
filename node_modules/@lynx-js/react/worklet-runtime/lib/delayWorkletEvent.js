import { profile } from './utils/profile.js';
let impl;
function initEventDelay() {
    return (impl = {
        _delayedWorkletParamsMap: new Map(),
        runDelayedWorklet,
        clearDelayedWorklets,
    });
}
function delayExecUntilJsReady(hash, params) {
    profile('delayExecUntilJsReady: ' + hash, () => {
        const map = impl._delayedWorkletParamsMap;
        const paramVec = map.get(hash);
        if (paramVec) {
            paramVec.push(params);
        }
        else {
            map.set(hash, [params]);
        }
    });
}
function runDelayedWorklet(worklet, element) {
    profile('commitDelayedWorklet', () => {
        const paramsVec = impl._delayedWorkletParamsMap.get(worklet._wkltId);
        if (paramsVec === undefined) {
            return;
        }
        const leftParamsVec = [];
        paramsVec.forEach((params) => {
            const firstParam = params[0];
            if (firstParam?.currentTarget?.elementRefptr === element) {
                setTimeout(() => {
                    profile('runDelayedWorklet', () => {
                        runWorklet(worklet, params);
                    });
                }, 0);
            }
            else {
                leftParamsVec.push(params);
            }
        });
        impl._delayedWorkletParamsMap.set(worklet._wkltId, leftParamsVec);
    });
}
function clearDelayedWorklets() {
    impl._delayedWorkletParamsMap.clear();
}
export { initEventDelay, delayExecUntilJsReady, runDelayedWorklet, clearDelayedWorklets };
//# sourceMappingURL=delayWorkletEvent.js.map