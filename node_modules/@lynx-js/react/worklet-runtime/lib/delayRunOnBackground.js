let impl;
function initRunOnBackgroundDelay() {
    return (impl = {
        delayedBackgroundFunctionArray: [],
        delayRunOnBackground,
        runDelayedBackgroundFunctions,
    });
}
function delayRunOnBackground(fnObj, task) {
    impl.delayedBackgroundFunctionArray.push({ task });
    const delayIndices = fnObj._delayIndices ??= [];
    delayIndices.push(impl.delayedBackgroundFunctionArray.length - 1);
}
function runDelayedBackgroundFunctions() {
    for (const details of impl.delayedBackgroundFunctionArray) {
        if (details.jsFnHandle) {
            details.task(details.jsFnHandle._jsFnId, details.jsFnHandle._execId);
        }
    }
    impl.delayedBackgroundFunctionArray.length = 0;
}
export { initRunOnBackgroundDelay };
//# sourceMappingURL=delayRunOnBackground.js.map