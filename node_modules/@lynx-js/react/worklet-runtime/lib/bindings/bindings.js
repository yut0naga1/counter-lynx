// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
/**
 * Executes the worklet ctx.
 * @param worklet - The Worklet ctx to run.
 * @param params - An array as parameters of the worklet run.
 */
function runWorkletCtx(worklet, params) {
    return globalThis.runWorklet?.(worklet, params);
}
/**
 * Save an element to a `WorkletRef`.
 *
 * @param workletRef - The `WorkletRef` to be updated.
 * @param element - The element.
 * @internal
 */
function updateWorkletRef(workletRef, element) {
    globalThis.lynxWorkletImpl?._refImpl.updateWorkletRef(workletRef, element);
}
/**
 * Update the initial value of the `WorkletRef`.
 *
 * @param patch - An array containing the index and new value of the worklet value.
 */
function updateWorkletRefInitValueChanges(patch) {
    if (patch) {
        globalThis.lynxWorkletImpl?._refImpl.updateWorkletRefInitValueChanges(patch);
    }
}
/**
 * Register a worklet.
 *
 * @internal
 */
function registerWorklet(type, id, worklet) {
    globalThis.registerWorklet(type, id, worklet);
}
/**
 * Delay a runOnBackground after hydration.
 *
 * @internal
 */
function delayRunOnBackground(fnObj, fn) {
    globalThis.lynxWorkletImpl?._runOnBackgroundDelayImpl.delayRunOnBackground(fnObj, fn);
}
/**
 * Set whether EOM operations should flush the element tree.
 *
 * @internal
 */
function setEomShouldFlushElementTree(value) {
    globalThis.lynxWorkletImpl?._eomImpl.setShouldFlush(value);
}
export { runWorkletCtx, updateWorkletRef, updateWorkletRefInitValueChanges, registerWorklet, delayRunOnBackground, setEomShouldFlushElementTree, };
//# sourceMappingURL=bindings.js.map