(()=>{
    "use strict";
    function _define_property(obj, key, value) {
        if (key in obj) Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    class Animation {
        cancel() {
            return __ElementAnimate(this.effect.target.element, [
                3,
                this.id
            ]);
        }
        pause() {
            return __ElementAnimate(this.effect.target.element, [
                2,
                this.id
            ]);
        }
        play() {
            return __ElementAnimate(this.effect.target.element, [
                1,
                this.id
            ]);
        }
        start() {
            return __ElementAnimate(this.effect.target.element, [
                0,
                this.id,
                this.effect.keyframes,
                this.effect.options
            ]);
        }
        constructor(effect){
            _define_property(this, "effect", void 0);
            _define_property(this, "id", void 0);
            this.effect = effect;
            this.id = '__lynx-inner-js-animation-' + Animation.count++;
            this.start();
        }
    }
    _define_property(Animation, "count", 0);
    function effect_define_property(obj, key, value) {
        if (key in obj) Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    class KeyframeEffect {
        constructor(target, keyframes, options){
            effect_define_property(this, "target", void 0);
            effect_define_property(this, "keyframes", void 0);
            effect_define_property(this, "options", void 0);
            this.target = target;
            this.keyframes = keyframes;
            this.options = options;
        }
    }
    function element_define_property(obj, key, value) {
        if (key in obj) Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    let willFlush = false;
    let shouldFlush = true;
    function setShouldFlush(value) {
        shouldFlush = value;
    }
    class Element {
        setAttribute(name, value) {
            __SetAttribute(this.element, name, value);
            this.flushElementTree();
        }
        setStyleProperty(name, value) {
            __AddInlineStyle(this.element, name, value);
            this.flushElementTree();
        }
        setStyleProperties(styles) {
            for(const key in styles)__AddInlineStyle(this.element, key, styles[key]);
            this.flushElementTree();
        }
        getAttribute(attributeName) {
            return __GetAttributeByName(this.element, attributeName);
        }
        getAttributeNames() {
            return __GetAttributeNames(this.element);
        }
        querySelector(selector) {
            const ref = __QuerySelector(this.element, selector, {});
            return ref ? new Element(ref) : null;
        }
        querySelectorAll(selector) {
            return __QuerySelectorAll(this.element, selector, {}).map((element)=>new Element(element));
        }
        animate(keyframes, options) {
            const normalizedOptions = 'number' == typeof options ? {
                duration: options
            } : null != options ? options : {};
            return new Animation(new KeyframeEffect(this, keyframes, normalizedOptions));
        }
        invoke(methodName, params) {
            return new Promise((resolve, reject)=>{
                __InvokeUIMethod(this.element, methodName, null != params ? params : {}, (res)=>{
                    if (0 === res.code) resolve(res.data);
                    else reject(new Error('UI method invoke: ' + JSON.stringify(res)));
                });
                this.flushElementTree();
            });
        }
        flushElementTree() {
            if (willFlush || !shouldFlush) return;
            willFlush = true;
            Promise.resolve().then(()=>{
                willFlush = false;
                __FlushElementTree();
            });
        }
        constructor(element){
            element_define_property(this, "element", void 0);
            Object.defineProperty(this, 'element', {
                get () {
                    return element;
                }
            });
        }
    }
    function lepusQuerySelector_define_property(obj, key, value) {
        if (key in obj) Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    class PageElement {
        static get() {
            var _PageElement;
            null != (_PageElement = PageElement).pageElement || (_PageElement.pageElement = __GetPageElement());
            return PageElement.pageElement;
        }
    }
    lepusQuerySelector_define_property(PageElement, "pageElement", void 0);
    function querySelector(cssSelector) {
        const element = __QuerySelector(PageElement.get(), cssSelector, {});
        return element ? new Element(element) : null;
    }
    function querySelectorAll(cssSelector) {
        return __QuerySelectorAll(PageElement.get(), cssSelector, {}).map((element)=>new Element(element));
    }
    function isSdkVersionGt(major, minor) {
        var _SystemInfo_lynxSdkVersion;
        const lynxSdkVersion = null != (_SystemInfo_lynxSdkVersion = SystemInfo.lynxSdkVersion) ? _SystemInfo_lynxSdkVersion : '1.0';
        const version = lynxSdkVersion.split('.');
        return Number(version[0]) > major || Number(version[0]) == major && Number(version[1]) > minor;
    }
    function initApiEnv() {
        lynx.querySelector = querySelector;
        lynx.querySelectorAll = querySelectorAll;
        globalThis.setTimeout = lynx.setTimeout;
        globalThis.setInterval = lynx.setInterval;
        globalThis.clearTimeout = lynx.clearTimeout;
        var _lynx_clearInterval;
        globalThis.clearInterval = null != (_lynx_clearInterval = lynx.clearInterval) ? _lynx_clearInterval : lynx.clearTimeInterval;
        {
            const requestAnimationFrame = lynx.requestAnimationFrame;
            lynx.requestAnimationFrame = globalThis.requestAnimationFrame = (callback)=>{
                if (!isSdkVersionGt(2, 15)) throw new Error("requestAnimationFrame in main thread script requires Lynx sdk version 2.16");
                return requestAnimationFrame(callback);
            };
        }
        globalThis.cancelAnimationFrame = lynx.cancelAnimationFrame;
    }
    function profile(sliceName, f) {
        console.profile(sliceName);
        try {
            return f();
        } finally{
            console.profileEnd();
        }
    }
    let impl;
    function initWorkletRef() {
        return impl = {
            _workletRefMap: {},
            _firstScreenWorkletRefMap: {},
            updateWorkletRef,
            updateWorkletRefInitValueChanges,
            clearFirstScreenWorkletRefMap
        };
    }
    const createWorkletRef = (id, value)=>({
            current: value,
            _wvid: id
        });
    const getFromWorkletRefMap = (refImpl)=>{
        const id = refImpl._wvid;
        let value;
        if (id < 0) {
            value = impl._firstScreenWorkletRefMap[id];
            if (!value) value = impl._firstScreenWorkletRefMap[id] = createWorkletRef(id, refImpl._initValue);
        } else value = impl._workletRefMap[id];
        if (void 0 === value) throw new Error('Worklet: ref is not initialized: ' + id);
        return value;
    };
    function removeValueFromWorkletRefMap(id) {
        delete impl._workletRefMap[id];
    }
    function updateWorkletRef(handle, element) {
        getFromWorkletRefMap(handle).current = element ? new Element(element) : null;
    }
    function updateWorkletRefInitValueChanges(patch) {
        profile('updateWorkletRefInitValueChanges', ()=>{
            patch.forEach(([id, value])=>{
                if (!impl._workletRefMap[id]) impl._workletRefMap[id] = createWorkletRef(id, value);
            });
        });
    }
    function clearFirstScreenWorkletRefMap() {
        impl._firstScreenWorkletRefMap = {};
    }
    function initEventListeners() {
        const jsContext = lynx.getJSContext();
        jsContext.addEventListener("Lynx.Worklet.runWorkletCtx", (event)=>{
            const data = JSON.parse(event.data);
            const returnValue = runWorklet(data.worklet, data.params);
            jsContext.dispatchEvent({
                type: "Lynx.Worklet.FunctionCallRet",
                data: JSON.stringify({
                    resolveId: data.resolveId,
                    returnValue
                })
            });
        });
        jsContext.addEventListener("Lynx.Worklet.releaseWorkletRef", (event)=>{
            removeValueFromWorkletRefMap(event.data.id);
        });
    }
    let delayRunOnBackground_impl;
    function initRunOnBackgroundDelay() {
        return delayRunOnBackground_impl = {
            delayedBackgroundFunctionArray: [],
            delayRunOnBackground,
            runDelayedBackgroundFunctions
        };
    }
    function delayRunOnBackground(fnObj, task) {
        var _fnObj;
        delayRunOnBackground_impl.delayedBackgroundFunctionArray.push({
            task
        });
        var __delayIndices;
        const delayIndices = null != (__delayIndices = (_fnObj = fnObj)._delayIndices) ? __delayIndices : _fnObj._delayIndices = [];
        delayIndices.push(delayRunOnBackground_impl.delayedBackgroundFunctionArray.length - 1);
    }
    function runDelayedBackgroundFunctions() {
        for (const details of delayRunOnBackground_impl.delayedBackgroundFunctionArray)if (details.jsFnHandle) details.task(details.jsFnHandle._jsFnId, details.jsFnHandle._execId);
        delayRunOnBackground_impl.delayedBackgroundFunctionArray.length = 0;
    }
    let delayWorkletEvent_impl;
    function initEventDelay() {
        return delayWorkletEvent_impl = {
            _delayedWorkletParamsMap: new Map(),
            runDelayedWorklet,
            clearDelayedWorklets
        };
    }
    function delayExecUntilJsReady(hash, params) {
        profile('delayExecUntilJsReady: ' + hash, ()=>{
            const map = delayWorkletEvent_impl._delayedWorkletParamsMap;
            const paramVec = map.get(hash);
            if (paramVec) paramVec.push(params);
            else map.set(hash, [
                params
            ]);
        });
    }
    function runDelayedWorklet(worklet, element) {
        profile('commitDelayedWorklet', ()=>{
            const paramsVec = delayWorkletEvent_impl._delayedWorkletParamsMap.get(worklet._wkltId);
            if (void 0 === paramsVec) return;
            const leftParamsVec = [];
            paramsVec.forEach((params)=>{
                var _firstParam_currentTarget;
                const firstParam = params[0];
                if ((null == firstParam ? void 0 : null == (_firstParam_currentTarget = firstParam.currentTarget) ? void 0 : _firstParam_currentTarget.elementRefptr) === element) setTimeout(()=>{
                    profile('runDelayedWorklet', ()=>{
                        runWorklet(worklet, params);
                    });
                }, 0);
                else leftParamsVec.push(params);
            });
            delayWorkletEvent_impl._delayedWorkletParamsMap.set(worklet._wkltId, leftParamsVec);
        });
    }
    function clearDelayedWorklets() {
        delayWorkletEvent_impl._delayedWorkletParamsMap.clear();
    }
    function initEomImpl() {
        return {
            setShouldFlush: setShouldFlush
        };
    }
    function hydrateCtx(ctx, firstScreenCtx) {
        profile('hydrateCtx', ()=>{
            hydrateCtxImpl(ctx, firstScreenCtx, ctx._execId);
        });
    }
    function hydrateCtxImpl(ctx, firstScreenCtx, execId) {
        if (!ctx || 'object' != typeof ctx || !firstScreenCtx || 'object' != typeof firstScreenCtx) return;
        const ctxObj = ctx;
        const firstScreenCtxObj = firstScreenCtx;
        if (ctxObj['_wkltId'] && ctxObj['_wkltId'] !== firstScreenCtxObj['_wkltId']) return;
        for(const key in ctx)if ('_wvid' === key) hydrateMainThreadRef(ctxObj[key], firstScreenCtxObj);
        else if ('_jsFn' === key) hydrateDelayRunOnBackgroundTasks(ctxObj[key], firstScreenCtxObj[key], execId);
        else {
            const firstScreenValue = 'function' == typeof firstScreenCtxObj[key] ? firstScreenCtxObj[key].ctx : firstScreenCtxObj[key];
            hydrateCtxImpl(ctxObj[key], firstScreenValue, execId);
        }
    }
    function hydrateMainThreadRef(refId, value) {
        if ('_initValue' in value) return;
        const ref = lynxWorkletImpl._refImpl._workletRefMap[refId];
        ref.current = value.current;
    }
    function hydrateDelayRunOnBackgroundTasks(fnObjs, firstScreenFnObjs, execId) {
        for(const fnName in fnObjs){
            const fnObj = fnObjs[fnName];
            const firstScreenFnObj = firstScreenFnObjs[fnName];
            if (null == firstScreenFnObj ? void 0 : firstScreenFnObj._delayIndices) for (const index of firstScreenFnObj._delayIndices){
                const details = lynxWorkletImpl._runOnBackgroundDelayImpl.delayedBackgroundFunctionArray[index];
                fnObj._execId = execId;
                details.jsFnHandle = fnObj;
            }
        }
    }
    function jsFunctionLifecycle_define_property(obj, key, value) {
        if (key in obj) Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    class JsFunctionLifecycleManager {
        addRef(execId, objToRef) {
            var _this_execIdRefCount_get;
            this.execIdRefCount.set(execId, (null != (_this_execIdRefCount_get = this.execIdRefCount.get(execId)) ? _this_execIdRefCount_get : 0) + 1);
            this.registry.register(objToRef, execId);
        }
        removeRef(execId) {
            const rc = this.execIdRefCount.get(execId);
            if (rc > 1) return void this.execIdRefCount.set(execId, rc - 1);
            this.execIdRefCount.delete(execId);
            this.execIdSetToFire.add(execId);
            if (!this.willFire) {
                this.willFire = true;
                Promise.resolve().then(()=>{
                    this.fire();
                });
            }
        }
        fire() {
            profile('JsFunctionLifecycleManager.fire', ()=>{
                lynx.getJSContext().dispatchEvent({
                    type: "Lynx.Worklet.releaseBackgroundWorkletCtx",
                    data: Array.from(this.execIdSetToFire)
                });
                this.execIdSetToFire.clear();
                this.willFire = false;
            });
        }
        constructor(){
            jsFunctionLifecycle_define_property(this, "execIdRefCount", new Map());
            jsFunctionLifecycle_define_property(this, "execIdSetToFire", new Set());
            jsFunctionLifecycle_define_property(this, "willFire", false);
            jsFunctionLifecycle_define_property(this, "registry", void 0);
            this.registry = new FinalizationRegistry(this.removeRef.bind(this));
        }
    }
    function isRunOnBackgroundEnabled() {
        return isSdkVersionGt(2, 15);
    }
    function initWorklet() {
        globalThis.lynxWorkletImpl = {
            _workletMap: {},
            _refImpl: initWorkletRef(),
            _runOnBackgroundDelayImpl: initRunOnBackgroundDelay(),
            _hydrateCtx: hydrateCtx,
            _eventDelayImpl: initEventDelay(),
            _eomImpl: initEomImpl()
        };
        if (isRunOnBackgroundEnabled()) globalThis.lynxWorkletImpl._jsFunctionLifecycleManager = new JsFunctionLifecycleManager();
        globalThis.registerWorklet = registerWorklet;
        globalThis.registerWorkletInternal = registerWorklet;
        globalThis.runWorklet = workletRuntime_runWorklet;
    }
    function registerWorklet(_type, id, worklet) {
        lynxWorkletImpl._workletMap[id] = worklet;
    }
    function workletRuntime_runWorklet(ctx, params) {
        if (!validateWorklet(ctx)) return void console.warn('Worklet: Invalid worklet object: ' + JSON.stringify(ctx));
        if ('_lepusWorkletHash' in ctx) return void delayExecUntilJsReady(ctx._lepusWorkletHash, params);
        return runWorkletImpl(ctx, params);
    }
    function runWorkletImpl(ctx, params) {
        const worklet = profile('transformWorkletCtx ' + ctx._wkltId, ()=>transformWorklet(ctx, true));
        const params_ = profile('transformWorkletParams', ()=>transformWorklet(params || [], false));
        return profile('runWorklet', ()=>worklet(...params_));
    }
    function validateWorklet(ctx) {
        return 'object' == typeof ctx && null !== ctx && ('_wkltId' in ctx || '_lepusWorkletHash' in ctx);
    }
    const workletCache = new WeakMap();
    function transformWorklet(ctx, isWorklet) {
        if ('object' != typeof ctx || null === ctx) return ctx;
        if (isWorklet) {
            const res = workletCache.get(ctx);
            if (res) return res;
        }
        const worklet = {
            main: ctx
        };
        transformWorkletInner(worklet, 0, ctx);
        if (isWorklet) workletCache.set(ctx, worklet.main);
        return worklet.main;
    }
    const transformWorkletInner = (value, depth, ctx)=>{
        const limit = 1000;
        if (++depth >= limit) throw new Error('Depth of value exceeds limit of ' + limit + '.');
        if ('object' != typeof value || null === value) return;
        const obj = value;
        for(const key in obj){
            const subObj = obj[key];
            if ('object' != typeof subObj || null === subObj) continue;
            if ('elementRefptr' in subObj) {
                obj[key] = new Element(subObj['elementRefptr']);
                continue;
            }
            if (subObj instanceof Element) continue;
            transformWorkletInner(subObj, depth, ctx);
            const isWorkletRef = '_wvid' in subObj;
            if (isWorkletRef) {
                obj[key] = getFromWorkletRefMap(subObj);
                continue;
            }
            const isWorklet = '_wkltId' in subObj;
            if (isWorklet) {
                obj[key] = lynxWorkletImpl._workletMap[subObj._wkltId].bind({
                    ...subObj
                });
                obj[key].ctx = subObj;
                continue;
            }
            const isJsFn = '_jsFnId' in subObj;
            if (isJsFn) {
                var _lynxWorkletImpl__jsFunctionLifecycleManager;
                subObj['_execId'] = ctx._execId;
                null == (_lynxWorkletImpl__jsFunctionLifecycleManager = lynxWorkletImpl._jsFunctionLifecycleManager) || _lynxWorkletImpl__jsFunctionLifecycleManager.addRef(ctx._execId, subObj);
                continue;
            }
        }
    };
    if (void 0 === globalThis.lynxWorkletImpl) {
        initWorklet();
        initApiEnv();
        initEventListeners();
    }
})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,