import { defineConfig } from "vitest/config";
import { VitestPackageInstaller } from "vitest/node";
import path from "path";
import { fileURLToPath } from "url";
import { createRequire } from "module";
const vitest_config_filename = fileURLToPath(import.meta.url);
const vitest_config_dirname = path.dirname(vitest_config_filename);
const vitest_config_require = createRequire(import.meta.url);
async function ensurePackagesInstalled() {
    const installer = new VitestPackageInstaller();
    const installed = await installer.ensureInstalled('jsdom', process.cwd());
    if (!installed) {
        console.log('ReactLynx Testing Library requires jsdom to be installed.');
        process.exit(1);
    }
}
const createVitestConfig = async (options)=>{
    await ensurePackagesInstalled();
    const runtimeOSSPkgName = '@lynx-js/react';
    const runtimePkgName = options?.runtimePkgName ?? runtimeOSSPkgName;
    const runtimeDir = path.dirname(vitest_config_require.resolve(`${runtimePkgName}/package.json`));
    const runtimeOSSDir = path.dirname(vitest_config_require.resolve(`${runtimeOSSPkgName}/package.json`, {
        paths: [
            runtimeDir
        ]
    }));
    const preactDir = path.dirname(vitest_config_require.resolve('preact/package.json', {
        paths: [
            runtimeOSSDir
        ]
    }));
    const generateAlias = (pkgName, pkgDir, resolveDir)=>{
        const pkgExports = vitest_config_require(path.join(pkgDir, 'package.json')).exports;
        const pkgAlias = [];
        Object.keys(pkgExports).forEach((key)=>{
            const name = path.posix.join(pkgName, key);
            pkgAlias.push({
                find: new RegExp('^' + name + '$'),
                replacement: vitest_config_require.resolve(name, {
                    paths: [
                        resolveDir
                    ]
                })
            });
        });
        return pkgAlias;
    };
    const runtimeOSSAlias = generateAlias(runtimeOSSPkgName, runtimeOSSDir, runtimeDir);
    let runtimeAlias = [];
    if (runtimePkgName !== runtimeOSSPkgName) runtimeAlias = generateAlias(runtimePkgName, runtimeDir, vitest_config_dirname);
    const preactAlias = generateAlias('preact', preactDir, runtimeOSSDir);
    function transformReactLynxPlugin() {
        return {
            name: 'transformReactLynxPlugin',
            enforce: 'pre',
            transform (sourceText, sourcePath) {
                const id = sourcePath;
                const regex = /\.(?:js|jsx|mjs|cjs|ts|tsx|mts|cts)(\?.*)?$/;
                if (!regex.test(id)) return null;
                const { transformReactLynxSync } = vitest_config_require('@lynx-js/react/transform');
                const relativePath = normalizeSlashes(path.relative(vitest_config_dirname, sourcePath));
                const basename = path.basename(sourcePath);
                const result = transformReactLynxSync(sourceText, {
                    mode: 'test',
                    pluginName: '',
                    filename: basename,
                    sourcemap: true,
                    snapshot: {
                        preserveJsx: false,
                        runtimePkg: `${runtimePkgName}/internal`,
                        jsxImportSource: runtimePkgName,
                        filename: relativePath,
                        target: 'MIXED'
                    },
                    directiveDCE: false,
                    defineDCE: false,
                    shake: false,
                    compat: false,
                    worklet: {
                        filename: relativePath,
                        runtimePkg: `${runtimePkgName}/internal`,
                        target: 'MIXED'
                    },
                    refresh: false,
                    cssScope: false
                });
                if (result.errors.length > 0) result.errors.forEach((error)=>{
                    this.error(error.text, error.location);
                });
                if (result.warnings.length > 0) result.warnings.forEach((warning)=>{
                    this.warn(warning.text, warning.location);
                });
                return {
                    code: result.code,
                    map: result.map
                };
            }
        };
    }
    return defineConfig({
        server: {
            fs: {
                allow: [
                    path.join(vitest_config_dirname, '..')
                ]
            }
        },
        plugins: [
            transformReactLynxPlugin()
        ],
        test: {
            environment: vitest_config_require.resolve('./env/vitest'),
            globals: true,
            setupFiles: [
                path.join(vitest_config_dirname, 'vitest-global-setup')
            ],
            alias: [
                ...runtimeOSSAlias,
                ...runtimeAlias,
                ...preactAlias
            ]
        }
    });
};
function normalizeSlashes(file) {
    return file.replaceAll(path.win32.sep, '/');
}
export { createVitestConfig };
