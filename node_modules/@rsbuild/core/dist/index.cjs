/*! For license information please see index.cjs.LICENSE.txt */
let __rslib_import_meta_url__ = 'undefined' == typeof document ? new (require('url'.replace('', ''))).URL('file:' + __filename).href : document.currentScript && document.currentScript.src || new URL('main.js', document.baseURI).href;
var __webpack_modules__ = {
    "../../node_modules/.pnpm/clone-deep@4.0.1/node_modules/clone-deep/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        let clone = __webpack_require__("../../node_modules/.pnpm/shallow-clone@3.0.1/node_modules/shallow-clone/index.js"), typeOf = __webpack_require__("../../node_modules/.pnpm/kind-of@6.0.3/node_modules/kind-of/index.js"), isPlainObject = __webpack_require__("../../node_modules/.pnpm/is-plain-object@2.0.4/node_modules/is-plain-object/index.js");
        module.exports = function cloneDeep(val, instanceClone) {
            switch(typeOf(val)){
                case 'object':
                    var val1 = val, instanceClone1 = instanceClone;
                    if ('function' == typeof instanceClone1) return instanceClone1(val1);
                    if (instanceClone1 || isPlainObject(val1)) {
                        let res = new val1.constructor();
                        for(let key in val1)res[key] = cloneDeep(val1[key], instanceClone1);
                        return res;
                    }
                    return val1;
                case 'array':
                    var val2 = val, instanceClone2 = instanceClone;
                    let res = new val2.constructor(val2.length);
                    for(let i = 0; i < val2.length; i++)res[i] = cloneDeep(val2[i], instanceClone2);
                    return res;
                default:
                    return clone(val);
            }
        };
    },
    "../../node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js": function(module) {
        "use strict";
        var isMergeableObject = function(value) {
            var value1, value2, stringValue;
            return !!(value1 = value) && 'object' == typeof value1 && (value2 = value, '[object RegExp]' !== (stringValue = Object.prototype.toString.call(value2)) && '[object Date]' !== stringValue && value2.$$typeof !== REACT_ELEMENT_TYPE);
        }, REACT_ELEMENT_TYPE = 'function' == typeof Symbol && Symbol.for ? Symbol.for('react.element') : 0xeac7;
        function cloneUnlessOtherwiseSpecified(value, options) {
            return !1 !== options.clone && options.isMergeableObject(value) ? deepmerge(Array.isArray(value) ? [] : {}, value, options) : value;
        }
        function defaultArrayMerge(target, source, options) {
            return target.concat(source).map(function(element) {
                return cloneUnlessOtherwiseSpecified(element, options);
            });
        }
        function getKeys(target) {
            return Object.keys(target).concat(Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
                return Object.propertyIsEnumerable.call(target, symbol);
            }) : []);
        }
        function propertyIsOnObject(object, property) {
            try {
                return property in object;
            } catch (_) {
                return !1;
            }
        }
        function deepmerge(target, source, options) {
            (options = options || {}).arrayMerge = options.arrayMerge || defaultArrayMerge, options.isMergeableObject = options.isMergeableObject || isMergeableObject, options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
            var options1, destination, sourceIsArray = Array.isArray(source);
            return sourceIsArray !== Array.isArray(target) ? cloneUnlessOtherwiseSpecified(source, options) : sourceIsArray ? options.arrayMerge(target, source, options) : (destination = {}, (options1 = options).isMergeableObject(target) && getKeys(target).forEach(function(key) {
                destination[key] = cloneUnlessOtherwiseSpecified(target[key], options1);
            }), getKeys(source).forEach(function(key) {
                propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key)) || (propertyIsOnObject(target, key) && options1.isMergeableObject(source[key]) ? destination[key] = (function(key, options) {
                    if (!options.customMerge) return deepmerge;
                    var customMerge = options.customMerge(key);
                    return 'function' == typeof customMerge ? customMerge : deepmerge;
                })(key, options1)(target[key], source[key], options1) : destination[key] = cloneUnlessOtherwiseSpecified(source[key], options1));
            }), destination);
        }
        deepmerge.all = function(array, options) {
            if (!Array.isArray(array)) throw Error('first argument should be an array');
            return array.reduce(function(prev, next) {
                return deepmerge(prev, next, options);
            }, {});
        }, module.exports = deepmerge;
    },
    "../../node_modules/.pnpm/dotenv-expand@12.0.2/node_modules/dotenv-expand/lib/main.js": function(module) {
        "use strict";
        function _resolveEscapeSequences(value) {
            return value.replace(/\\\$/g, '$');
        }
        module.exports.expand = function(options) {
            let runningParsed = {}, processEnv = process.env;
            for(let key in options && null != options.processEnv && (processEnv = options.processEnv), options.parsed){
                let value = options.parsed[key];
                value = processEnv[key] && processEnv[key] !== value ? processEnv[key] : function(value, processEnv, runningParsed) {
                    let match, env = {
                        ...runningParsed,
                        ...processEnv
                    }, regex = /(?<!\\)\${([^{}]+)}|(?<!\\)\$([A-Za-z_][A-Za-z0-9_]*)/g, result = value, seen = new Set();
                    for(; null !== (match = regex.exec(result));){
                        let defaultValue, value;
                        seen.add(result);
                        let [template, bracedExpression, unbracedExpression] = match, expression = bracedExpression || unbracedExpression, opRegex = /(:\+|\+|:-|-)/, opMatch = expression.match(opRegex), splitter = opMatch ? opMatch[0] : null, r = expression.split(splitter), key = r.shift();
                        if ([
                            ':+',
                            '+'
                        ].includes(splitter) ? (defaultValue = env[key] ? r.join(splitter) : '', value = null) : (defaultValue = r.join(splitter), value = env[key]), (result = value ? seen.has(value) ? result.replace(template, defaultValue) : result.replace(template, value) : result.replace(template, defaultValue)) === runningParsed[key]) break;
                        regex.lastIndex = 0;
                    }
                    return result;
                }(value, processEnv, runningParsed), options.parsed[key] = _resolveEscapeSequences(value), runningParsed[key] = _resolveEscapeSequences(value);
            }
            for(let processKey in options.parsed)processEnv[processKey] = options.parsed[processKey];
            return options;
        };
    },
    "../../node_modules/.pnpm/flat@5.0.2/node_modules/flat/index.js": function(module) {
        function isBuffer(obj) {
            return obj && obj.constructor && 'function' == typeof obj.constructor.isBuffer && obj.constructor.isBuffer(obj);
        }
        function keyIdentity(key) {
            return key;
        }
        function flatten(target, opts) {
            let delimiter = (opts = opts || {}).delimiter || '.', maxDepth = opts.maxDepth, transformKey = opts.transformKey || keyIdentity, output = {};
            return !function step(object, prev, currentDepth) {
                currentDepth = currentDepth || 1, Object.keys(object).forEach(function(key) {
                    let value = object[key], isarray = opts.safe && Array.isArray(value), type = Object.prototype.toString.call(value), isbuffer = isBuffer(value), newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
                    if (!isarray && !isbuffer && ('[object Object]' === type || '[object Array]' === type) && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) return step(value, newKey, currentDepth + 1);
                    output[newKey] = value;
                });
            }(target), output;
        }
        module.exports = flatten, flatten.flatten = flatten, flatten.unflatten = function unflatten(target, opts) {
            let delimiter = (opts = opts || {}).delimiter || '.', overwrite = opts.overwrite || !1, transformKey = opts.transformKey || keyIdentity, result = {};
            if (isBuffer(target) || '[object Object]' !== Object.prototype.toString.call(target)) return target;
            function getkey(key) {
                let parsedKey = Number(key);
                return isNaN(parsedKey) || -1 !== key.indexOf('.') || opts.object ? key : parsedKey;
            }
            return Object.keys(target = Object.keys(target).reduce(function(result, key) {
                var target1;
                let type = Object.prototype.toString.call(target[key]);
                return '[object Object]' !== type && '[object Array]' !== type || function(val) {
                    let type = Object.prototype.toString.call(val);
                    return !val || ('[object Array]' === type ? !val.length : '[object Object]' === type ? !Object.keys(val).length : void 0);
                }(target[key]) ? (result[key] = target[key], result) : Object.keys(target1 = flatten(target[key], opts)).reduce(function(result, key1) {
                    return result[key + delimiter + key1] = target1[key1], result;
                }, result);
            }, {})).forEach(function(key) {
                let split = key.split(delimiter).map(transformKey), key1 = getkey(split.shift()), key2 = getkey(split[0]), recipient = result;
                for(; void 0 !== key2;){
                    if ('__proto__' === key1) return;
                    let type = Object.prototype.toString.call(recipient[key1]), isobject = '[object Object]' === type || '[object Array]' === type;
                    if (!overwrite && !isobject && void 0 !== recipient[key1]) return;
                    (!overwrite || isobject) && (overwrite || null != recipient[key1]) || (recipient[key1] = 'number' != typeof key2 || opts.object ? {} : []), recipient = recipient[key1], split.length > 0 && (key1 = getkey(split.shift()), key2 = getkey(split[0]));
                }
                recipient[key1] = unflatten(target[key], opts);
            }), result;
        };
    },
    "../../node_modules/.pnpm/is-plain-object@2.0.4/node_modules/is-plain-object/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        var isObject = __webpack_require__("../../node_modules/.pnpm/isobject@3.0.1/node_modules/isobject/index.js");
        function isObjectObject(o) {
            return !0 === isObject(o) && '[object Object]' === Object.prototype.toString.call(o);
        }
        module.exports = function(o) {
            var ctor, prot;
            return !1 !== isObjectObject(o) && 'function' == typeof (ctor = o.constructor) && !1 !== isObjectObject(prot = ctor.prototype) && !1 !== prot.hasOwnProperty('isPrototypeOf');
        };
    },
    "../../node_modules/.pnpm/isobject@3.0.1/node_modules/isobject/index.js": function(module) {
        "use strict";
        module.exports = function(val) {
            return null != val && 'object' == typeof val && !1 === Array.isArray(val);
        };
    },
    "../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/array.js": function(__unused_webpack_module, exports1) {
        "use strict";
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.arrayToString = void 0, exports1.arrayToString = (array, space, next)=>{
            let values = array.map(function(value, index) {
                let result = next(value, index);
                return void 0 === result ? String(result) : space + result.split("\n").join(`\n${space}`);
            }).join(space ? ",\n" : ","), eol = space && values ? "\n" : "";
            return `[${eol}${values}${eol}]`;
        };
    },
    "../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/function.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.FunctionParser = exports1.dedentFunction = exports1.functionToString = exports1.USED_METHOD_KEY = void 0;
        let quote_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/quote.js"), METHOD_NAMES_ARE_QUOTED = '"' === ({
            " " () {}
        })[" "].toString().charAt(0), FUNCTION_PREFIXES = {
            Function: "function ",
            GeneratorFunction: "function* ",
            AsyncFunction: "async function ",
            AsyncGeneratorFunction: "async function* "
        }, METHOD_PREFIXES = {
            Function: "",
            GeneratorFunction: "*",
            AsyncFunction: "async ",
            AsyncGeneratorFunction: "async *"
        }, TOKENS_PRECEDING_REGEXPS = new Set("case delete else in instanceof new return throw typeof void , ; : + - ! ~ & | ^ * / % < > ? =".split(" "));
        function dedentFunction(fnString) {
            let found;
            for (let line of fnString.split("\n").slice(1)){
                let m = /^[\s\t]+/.exec(line);
                if (!m) return fnString;
                let [str] = m;
                void 0 === found ? found = str : str.length < found.length && (found = str);
            }
            return found ? fnString.split(`\n${found}`).join("\n") : fnString;
        }
        exports1.USED_METHOD_KEY = new WeakSet(), exports1.functionToString = (fn, space, next, key)=>{
            let name = "string" == typeof key ? key : void 0;
            return void 0 !== name && exports1.USED_METHOD_KEY.add(fn), new FunctionParser(fn, space, next, name).stringify();
        }, exports1.dedentFunction = dedentFunction;
        class FunctionParser {
            constructor(fn, indent, next, key){
                this.fn = fn, this.indent = indent, this.next = next, this.key = key, this.pos = 0, this.hadKeyword = !1, this.fnString = Function.prototype.toString.call(fn), this.fnType = fn.constructor.name, this.keyQuote = void 0 === key ? "" : quote_1.quoteKey(key, next), this.keyPrefix = void 0 === key ? "" : `${this.keyQuote}:${indent ? " " : ""}`, this.isMethodCandidate = void 0 !== key && ("" === this.fn.name || this.fn.name === key);
            }
            stringify() {
                let value = this.tryParse();
                return value ? dedentFunction(value) : `${this.keyPrefix}void ${this.next(this.fnString)}`;
            }
            getPrefix() {
                return this.isMethodCandidate && !this.hadKeyword ? METHOD_PREFIXES[this.fnType] + this.keyQuote : this.keyPrefix + FUNCTION_PREFIXES[this.fnType];
            }
            tryParse() {
                if ("}" !== this.fnString[this.fnString.length - 1]) return this.keyPrefix + this.fnString;
                if (this.fn.name) {
                    let result = this.tryStrippingName();
                    if (result) return result;
                }
                let prevPos = this.pos;
                if ("class" === this.consumeSyntax()) return this.fnString;
                if (this.pos = prevPos, this.tryParsePrefixTokens()) {
                    let result = this.tryStrippingName();
                    if (result) return result;
                    let offset = this.pos;
                    switch(this.consumeSyntax("WORD_LIKE")){
                        case "WORD_LIKE":
                            this.isMethodCandidate && !this.hadKeyword && (offset = this.pos);
                        case "()":
                            if ("=>" === this.fnString.substr(this.pos, 2)) return this.keyPrefix + this.fnString;
                            this.pos = offset;
                        case '"':
                        case "'":
                        case "[]":
                            return this.getPrefix() + this.fnString.substr(this.pos);
                    }
                }
            }
            tryStrippingName() {
                if (METHOD_NAMES_ARE_QUOTED) return;
                let start = this.pos, prefix = this.fnString.substr(this.pos, this.fn.name.length);
                if (prefix === this.fn.name && (this.pos += prefix.length, "()" === this.consumeSyntax() && "{}" === this.consumeSyntax() && this.pos === this.fnString.length)) return (this.isMethodCandidate || !quote_1.isValidVariableName(prefix)) && (start += prefix.length), this.getPrefix() + this.fnString.substr(start);
                this.pos = start;
            }
            tryParsePrefixTokens() {
                let posPrev = this.pos;
                switch(this.hadKeyword = !1, this.fnType){
                    case "AsyncFunction":
                        if ("async" !== this.consumeSyntax()) return !1;
                        posPrev = this.pos;
                    case "Function":
                        return "function" === this.consumeSyntax() ? this.hadKeyword = !0 : this.pos = posPrev, !0;
                    case "AsyncGeneratorFunction":
                        if ("async" !== this.consumeSyntax()) return !1;
                    case "GeneratorFunction":
                        let token = this.consumeSyntax();
                        return "function" === token && (token = this.consumeSyntax(), this.hadKeyword = !0), "*" === token;
                }
            }
            consumeSyntax(wordLikeToken) {
                let m = this.consumeMatch(/^(?:([A-Za-z_0-9$\xA0-\uFFFF]+)|=>|\+\+|\-\-|.)/);
                if (!m) return;
                let [token, match] = m;
                if (this.consumeWhitespace(), match) return wordLikeToken || match;
                switch(token){
                    case "(":
                        return this.consumeSyntaxUntil("(", ")");
                    case "[":
                        return this.consumeSyntaxUntil("[", "]");
                    case "{":
                        return this.consumeSyntaxUntil("{", "}");
                    case "`":
                        return this.consumeTemplate();
                    case '"':
                        return this.consumeRegExp(/^(?:[^\\"]|\\.)*"/, '"');
                    case "'":
                        return this.consumeRegExp(/^(?:[^\\']|\\.)*'/, "'");
                }
                return token;
            }
            consumeSyntaxUntil(startToken, endToken) {
                let isRegExpAllowed = !0;
                for(;;){
                    let token = this.consumeSyntax();
                    if (token === endToken) return startToken + endToken;
                    if (!token || ")" === token || "]" === token || "}" === token) return;
                    "/" === token && isRegExpAllowed && this.consumeMatch(/^(?:\\.|[^\\\/\n[]|\[(?:\\.|[^\]])*\])+\/[a-z]*/) ? (isRegExpAllowed = !1, this.consumeWhitespace()) : isRegExpAllowed = TOKENS_PRECEDING_REGEXPS.has(token);
                }
            }
            consumeMatch(re) {
                let m = re.exec(this.fnString.substr(this.pos));
                return m && (this.pos += m[0].length), m;
            }
            consumeRegExp(re, token) {
                let m = re.exec(this.fnString.substr(this.pos));
                if (m) return this.pos += m[0].length, this.consumeWhitespace(), token;
            }
            consumeTemplate() {
                for(;;){
                    if (this.consumeMatch(/^(?:[^`$\\]|\\.|\$(?!{))*/), "`" === this.fnString[this.pos]) return this.pos++, this.consumeWhitespace(), "`";
                    if (!("${" === this.fnString.substr(this.pos, 2) && (this.pos += 2, this.consumeWhitespace(), this.consumeSyntaxUntil("{", "}")))) return;
                }
            }
            consumeWhitespace() {
                this.consumeMatch(/^(?:\s|\/\/.*|\/\*[^]*?\*\/)*/);
            }
        }
        exports1.FunctionParser = FunctionParser;
    },
    "../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/index.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        exports1.stringify = void 0;
        let stringify_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/stringify.js"), quote_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/quote.js"), ROOT_SENTINEL = Symbol("root");
        exports1.stringify = function(value, replacer, indent, options = {}) {
            var replacer1;
            let space = "string" == typeof indent ? indent : " ".repeat(indent || 0), path = [], stack = new Set(), tracking = new Map(), unpack = new Map(), valueCount = 0, { maxDepth = 100, references = !1, skipUndefinedProperties = !1, maxValues = 100000 } = options, valueToString = (replacer1 = replacer) ? (value, space, next, key)=>replacer1(value, space, (value)=>stringify_1.toString(value, space, next, key), key) : stringify_1.toString, onNext = (value, key)=>{
                if (++valueCount > maxValues || skipUndefinedProperties && void 0 === value || path.length > maxDepth) return;
                if (void 0 === key) return valueToString(value, space, onNext, key);
                path.push(key);
                let result = builder(value, key === ROOT_SENTINEL ? void 0 : key);
                return path.pop(), result;
            }, builder = references ? (value, key)=>{
                if (null !== value && ("object" == typeof value || "function" == typeof value || "symbol" == typeof value)) {
                    if (tracking.has(value)) return unpack.set(path.slice(1), tracking.get(value)), valueToString(void 0, space, onNext, key);
                    tracking.set(value, path.slice(1));
                }
                return valueToString(value, space, onNext, key);
            } : (value, key)=>{
                if (stack.has(value)) return;
                stack.add(value);
                let result = valueToString(value, space, onNext, key);
                return stack.delete(value), result;
            }, result = onNext(value, ROOT_SENTINEL);
            if (unpack.size) {
                let sp = space ? " " : "", eol = space ? "\n" : "", wrapper = `var x${sp}=${sp}${result};${eol}`;
                for (let [key, value] of unpack.entries()){
                    let keyPath = quote_1.stringifyPath(key, onNext), valuePath = quote_1.stringifyPath(value, onNext);
                    wrapper += `x${keyPath}${sp}=${sp}x${valuePath};${eol}`;
                }
                return `(function${sp}()${sp}{${eol}${wrapper}return x;${eol}}())`;
            }
            return result;
        };
    },
    "../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/object.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.objectToString = void 0;
        let quote_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/quote.js"), function_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/function.js"), array_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/array.js");
        exports1.objectToString = (value, space, next, key)=>{
            if ("function" == typeof Buffer && Buffer.isBuffer(value)) return `Buffer.from(${next(value.toString("base64"))}, 'base64')`;
            if ("object" == typeof global && value === global) return globalToString(value, space, next, key);
            let toString = OBJECT_TYPES[Object.prototype.toString.call(value)];
            return toString ? toString(value, space, next, key) : void 0;
        };
        let globalToString = (value, space, next)=>`Function(${next("return this")})()`, OBJECT_TYPES = {
            "[object Array]": array_1.arrayToString,
            "[object Object]": (obj, indent, next, key)=>{
                let eol = indent ? "\n" : "", space = indent ? " " : "", values = Object.keys(obj).reduce(function(values, key) {
                    let fn = obj[key], result = next(fn, key);
                    if (void 0 === result) return values;
                    let value = result.split("\n").join(`\n${indent}`);
                    return function_1.USED_METHOD_KEY.has(fn) ? values.push(`${indent}${value}`) : values.push(`${indent}${quote_1.quoteKey(key, next)}:${space}${value}`), values;
                }, []).join(`,${eol}`);
                return "" === values ? "{}" : `{${eol}${values}${eol}}`;
            },
            "[object Error]": (error, space, next)=>`new Error(${next(error.message)})`,
            "[object Date]": (date)=>`new Date(${date.getTime()})`,
            "[object String]": (str, space, next)=>`new String(${next(str.toString())})`,
            "[object Number]": (num)=>`new Number(${num})`,
            "[object Boolean]": (bool)=>`new Boolean(${bool})`,
            "[object Set]": (set, space, next)=>`new Set(${next(Array.from(set))})`,
            "[object Map]": (map, space, next)=>`new Map(${next(Array.from(map))})`,
            "[object RegExp]": String,
            "[object global]": globalToString,
            "[object Window]": globalToString
        };
    },
    "../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/quote.js": function(__unused_webpack_module, exports1) {
        "use strict";
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.stringifyPath = exports1.quoteKey = exports1.isValidVariableName = exports1.IS_VALID_IDENTIFIER = exports1.quoteString = void 0;
        let ESCAPABLE = /[\\\'\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, META_CHARS = new Map([
            [
                "\b",
                "\\b"
            ],
            [
                "\t",
                "\\t"
            ],
            [
                "\n",
                "\\n"
            ],
            [
                "\f",
                "\\f"
            ],
            [
                "\r",
                "\\r"
            ],
            [
                "'",
                "\\'"
            ],
            [
                '"',
                '\\"'
            ],
            [
                "\\",
                "\\\\"
            ]
        ]);
        function escapeChar(char) {
            return META_CHARS.get(char) || `\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`;
        }
        exports1.quoteString = function(str) {
            return `'${str.replace(ESCAPABLE, escapeChar)}'`;
        };
        let RESERVED_WORDS = new Set("break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" "));
        function isValidVariableName(name) {
            return "string" == typeof name && !RESERVED_WORDS.has(name) && exports1.IS_VALID_IDENTIFIER.test(name);
        }
        exports1.IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/, exports1.isValidVariableName = isValidVariableName, exports1.quoteKey = function(key, next) {
            return isValidVariableName(key) ? key : next(key);
        }, exports1.stringifyPath = function(path, next) {
            let result = "";
            for (let key of path)isValidVariableName(key) ? result += `.${key}` : result += `[${next(key)}]`;
            return result;
        };
    },
    "../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/stringify.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.toString = void 0;
        let quote_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/quote.js"), object_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/object.js"), function_1 = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/function.js"), PRIMITIVE_TYPES = {
            string: quote_1.quoteString,
            number: (value)=>Object.is(value, -0) ? "-0" : String(value),
            boolean: String,
            symbol: (value, space, next)=>{
                let key = Symbol.keyFor(value);
                return void 0 !== key ? `Symbol.for(${next(key)})` : `Symbol(${next(value.description)})`;
            },
            bigint: (value, space, next)=>`BigInt(${next(String(value))})`,
            undefined: String,
            object: object_1.objectToString,
            function: function_1.functionToString
        };
        exports1.toString = (value, space, next, key)=>null === value ? "null" : PRIMITIVE_TYPES[typeof value](value, space, next, key);
    },
    "../../node_modules/.pnpm/kind-of@6.0.3/node_modules/kind-of/index.js": function(module) {
        var toString = Object.prototype.toString;
        function ctorName(val) {
            return 'function' == typeof val.constructor ? val.constructor.name : null;
        }
        module.exports = function(val) {
            if (void 0 === val) return 'undefined';
            if (null === val) return 'null';
            var val1, val2, val3, val4, val5, val6, type = typeof val;
            if ('boolean' === type) return 'boolean';
            if ('string' === type) return 'string';
            if ('number' === type) return 'number';
            if ('symbol' === type) return 'symbol';
            if ('function' === type) return 'GeneratorFunction' === ctorName(val) ? 'generatorfunction' : 'function';
            if (val1 = val, Array.isArray ? Array.isArray(val1) : val1 instanceof Array) return 'array';
            if ((val2 = val).constructor && 'function' == typeof val2.constructor.isBuffer && val2.constructor.isBuffer(val2)) return 'buffer';
            if (function(val) {
                try {
                    if ('number' == typeof val.length && 'function' == typeof val.callee) return !0;
                } catch (err) {
                    if (-1 !== err.message.indexOf('callee')) return !0;
                }
                return !1;
            }(val)) return 'arguments';
            if ((val3 = val) instanceof Date || 'function' == typeof val3.toDateString && 'function' == typeof val3.getDate && 'function' == typeof val3.setDate) return 'date';
            if ((val4 = val) instanceof Error || 'string' == typeof val4.message && val4.constructor && 'number' == typeof val4.constructor.stackTraceLimit) return 'error';
            if ((val5 = val) instanceof RegExp || 'string' == typeof val5.flags && 'boolean' == typeof val5.ignoreCase && 'boolean' == typeof val5.multiline && 'boolean' == typeof val5.global) return 'regexp';
            switch(ctorName(val)){
                case 'Symbol':
                    return 'symbol';
                case 'Promise':
                    return 'promise';
                case 'WeakMap':
                    return 'weakmap';
                case 'WeakSet':
                    return 'weakset';
                case 'Map':
                    return 'map';
                case 'Set':
                    return 'set';
                case 'Int8Array':
                    return 'int8array';
                case 'Uint8Array':
                    return 'uint8array';
                case 'Uint8ClampedArray':
                    return 'uint8clampedarray';
                case 'Int16Array':
                    return 'int16array';
                case 'Uint16Array':
                    return 'uint16array';
                case 'Int32Array':
                    return 'int32array';
                case 'Uint32Array':
                    return 'uint32array';
                case 'Float32Array':
                    return 'float32array';
                case 'Float64Array':
                    return 'float64array';
            }
            if ('function' == typeof (val6 = val).throw && 'function' == typeof val6.return && 'function' == typeof val6.next) return 'generator';
            switch(type = toString.call(val)){
                case '[object Object]':
                    return 'object';
                case '[object Map Iterator]':
                    return 'mapiterator';
                case '[object Set Iterator]':
                    return 'setiterator';
                case '[object String Iterator]':
                    return 'stringiterator';
                case '[object Array Iterator]':
                    return 'arrayiterator';
            }
            return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
        };
    },
    "../../node_modules/.pnpm/lilconfig@3.1.3/node_modules/lilconfig/src/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        let path = __webpack_require__("path"), fs = __webpack_require__("fs"), os = __webpack_require__("os"), url = __webpack_require__("url"), fsReadFileAsync = fs.promises.readFile;
        function parentDir(p) {
            return path.dirname(p) || path.sep;
        }
        let jsonLoader = (_, content)=>JSON.parse(content), requireFunc = require, defaultLoadersSync = Object.freeze({
            '.js': requireFunc,
            '.json': requireFunc,
            '.cjs': requireFunc,
            noExt: jsonLoader
        });
        module.exports.defaultLoadersSync = defaultLoadersSync;
        let dynamicImport = async (id)=>{
            try {
                let fileUrl = url.pathToFileURL(id).href;
                return (await import(fileUrl)).default;
            } catch (e) {
                try {
                    return requireFunc(id);
                } catch (requireE) {
                    if ('ERR_REQUIRE_ESM' === requireE.code || requireE instanceof SyntaxError && requireE.toString().includes('Cannot use import statement outside a module')) throw e;
                    throw requireE;
                }
            }
        }, defaultLoaders = Object.freeze({
            '.js': dynamicImport,
            '.mjs': dynamicImport,
            '.cjs': dynamicImport,
            '.json': jsonLoader,
            noExt: jsonLoader
        });
        function getOptions(name, options, sync) {
            let conf = {
                stopDir: os.homedir(),
                searchPlaces: [
                    'package.json',
                    `.${name}rc.json`,
                    `.${name}rc.js`,
                    `.${name}rc.cjs`,
                    ...sync ? [] : [
                        `.${name}rc.mjs`
                    ],
                    `.config/${name}rc`,
                    `.config/${name}rc.json`,
                    `.config/${name}rc.js`,
                    `.config/${name}rc.cjs`,
                    ...sync ? [] : [
                        `.config/${name}rc.mjs`
                    ],
                    `${name}.config.js`,
                    `${name}.config.cjs`,
                    ...sync ? [] : [
                        `${name}.config.mjs`
                    ]
                ],
                ignoreEmptySearchPlaces: !0,
                cache: !0,
                transform: (x)=>x,
                packageProp: [
                    name
                ],
                ...options,
                loaders: {
                    ...sync ? defaultLoadersSync : defaultLoaders,
                    ...options.loaders
                }
            };
            return conf.searchPlaces.forEach((place)=>{
                let key = path.extname(place) || 'noExt', loader = conf.loaders[key];
                if (!loader) throw Error(`Missing loader for extension "${place}"`);
                if ('function' != typeof loader) throw Error(`Loader for extension "${place}" is not a function: Received ${typeof loader}.`);
            }), conf;
        }
        function getPackageProp(props, obj) {
            return 'string' == typeof props && props in obj ? obj[props] : (Array.isArray(props) ? props : props.split('.')).reduce((acc, prop)=>void 0 === acc ? acc : acc[prop], obj) || null;
        }
        function validateFilePath(filepath) {
            if (!filepath) throw Error('load must pass a non-empty string');
        }
        function validateLoader(loader, ext) {
            if (!loader) throw Error(`No loader specified for extension "${ext}"`);
            if ('function' != typeof loader) throw Error('loader is not a function');
        }
        module.exports.defaultLoaders = defaultLoaders;
        let makeEmplace = (enableCache)=>(c, filepath, res)=>(enableCache && c.set(filepath, res), res);
        module.exports.lilconfig = function(name, options) {
            let { ignoreEmptySearchPlaces, loaders, packageProp, searchPlaces, stopDir, transform, cache } = getOptions(name, options ?? {}, !1), searchCache = new Map(), loadCache = new Map(), emplace = makeEmplace(cache);
            return {
                async search (searchFrom = process.cwd()) {
                    let result = {
                        config: null,
                        filepath: ''
                    }, visited = new Set(), dir = searchFrom;
                    dirLoop: for(;;){
                        if (cache) {
                            let r = searchCache.get(dir);
                            if (void 0 !== r) {
                                for (let p of visited)searchCache.set(p, r);
                                return r;
                            }
                            visited.add(dir);
                        }
                        for (let searchPlace of searchPlaces){
                            let filepath = path.join(dir, searchPlace);
                            try {
                                await fs.promises.access(filepath);
                            } catch  {
                                continue;
                            }
                            let content = String(await fsReadFileAsync(filepath)), loaderKey = path.extname(searchPlace) || 'noExt', loader = loaders[loaderKey];
                            if ('package.json' === searchPlace) {
                                let maybeConfig = getPackageProp(packageProp, await loader(filepath, content));
                                if (null != maybeConfig) {
                                    result.config = maybeConfig, result.filepath = filepath;
                                    break dirLoop;
                                }
                                continue;
                            }
                            let isEmpty = '' === content.trim();
                            if (!isEmpty || !ignoreEmptySearchPlaces) {
                                isEmpty ? (result.isEmpty = !0, result.config = void 0) : (validateLoader(loader, loaderKey), result.config = await loader(filepath, content)), result.filepath = filepath;
                                break dirLoop;
                            }
                        }
                        if (dir === stopDir || dir === parentDir(dir)) break;
                        dir = parentDir(dir);
                    }
                    let transformed = '' === result.filepath && null === result.config ? transform(null) : transform(result);
                    if (cache) for (let p of visited)searchCache.set(p, transformed);
                    return transformed;
                },
                async load (filepath) {
                    validateFilePath(filepath);
                    let absPath = path.resolve(process.cwd(), filepath);
                    if (cache && loadCache.has(absPath)) return loadCache.get(absPath);
                    let { base, ext } = path.parse(absPath), loaderKey = ext || 'noExt', loader = loaders[loaderKey];
                    validateLoader(loader, loaderKey);
                    let content = String(await fsReadFileAsync(absPath));
                    if ('package.json' === base) {
                        let pkg = await loader(absPath, content);
                        return emplace(loadCache, absPath, transform({
                            config: getPackageProp(packageProp, pkg),
                            filepath: absPath
                        }));
                    }
                    let result = {
                        config: null,
                        filepath: absPath
                    }, isEmpty = '' === content.trim();
                    return isEmpty && ignoreEmptySearchPlaces ? emplace(loadCache, absPath, transform({
                        config: void 0,
                        filepath: absPath,
                        isEmpty: !0
                    })) : (result.config = isEmpty ? void 0 : await loader(absPath, content), emplace(loadCache, absPath, transform(isEmpty ? {
                        ...result,
                        isEmpty,
                        config: void 0
                    } : result)));
                },
                clearLoadCache () {
                    cache && loadCache.clear();
                },
                clearSearchCache () {
                    cache && searchCache.clear();
                },
                clearCaches () {
                    cache && (loadCache.clear(), searchCache.clear());
                }
            };
        }, module.exports.lilconfigSync = function(name, options) {
            let { ignoreEmptySearchPlaces, loaders, packageProp, searchPlaces, stopDir, transform, cache } = getOptions(name, options ?? {}, !0), searchCache = new Map(), loadCache = new Map(), emplace = makeEmplace(cache);
            return {
                search (searchFrom = process.cwd()) {
                    let result = {
                        config: null,
                        filepath: ''
                    }, visited = new Set(), dir = searchFrom;
                    dirLoop: for(;;){
                        if (cache) {
                            let r = searchCache.get(dir);
                            if (void 0 !== r) {
                                for (let p of visited)searchCache.set(p, r);
                                return r;
                            }
                            visited.add(dir);
                        }
                        for (let searchPlace of searchPlaces){
                            let filepath = path.join(dir, searchPlace);
                            try {
                                fs.accessSync(filepath);
                            } catch  {
                                continue;
                            }
                            let loaderKey = path.extname(searchPlace) || 'noExt', loader = loaders[loaderKey], content = String(fs.readFileSync(filepath));
                            if ('package.json' === searchPlace) {
                                let maybeConfig = getPackageProp(packageProp, loader(filepath, content));
                                if (null != maybeConfig) {
                                    result.config = maybeConfig, result.filepath = filepath;
                                    break dirLoop;
                                }
                                continue;
                            }
                            let isEmpty = '' === content.trim();
                            if (!isEmpty || !ignoreEmptySearchPlaces) {
                                isEmpty ? (result.isEmpty = !0, result.config = void 0) : (validateLoader(loader, loaderKey), result.config = loader(filepath, content)), result.filepath = filepath;
                                break dirLoop;
                            }
                        }
                        if (dir === stopDir || dir === parentDir(dir)) break;
                        dir = parentDir(dir);
                    }
                    let transformed = '' === result.filepath && null === result.config ? transform(null) : transform(result);
                    if (cache) for (let p of visited)searchCache.set(p, transformed);
                    return transformed;
                },
                load (filepath) {
                    validateFilePath(filepath);
                    let absPath = path.resolve(process.cwd(), filepath);
                    if (cache && loadCache.has(absPath)) return loadCache.get(absPath);
                    let { base, ext } = path.parse(absPath), loaderKey = ext || 'noExt', loader = loaders[loaderKey];
                    validateLoader(loader, loaderKey);
                    let content = String(fs.readFileSync(absPath));
                    if ('package.json' === base) return transform({
                        config: getPackageProp(packageProp, loader(absPath, content)),
                        filepath: absPath
                    });
                    let result = {
                        config: null,
                        filepath: absPath
                    }, isEmpty = '' === content.trim();
                    return isEmpty && ignoreEmptySearchPlaces ? emplace(loadCache, absPath, transform({
                        filepath: absPath,
                        config: void 0,
                        isEmpty: !0
                    })) : (result.config = isEmpty ? void 0 : loader(absPath, content), emplace(loadCache, absPath, transform(isEmpty ? {
                        ...result,
                        isEmpty,
                        config: void 0
                    } : result)));
                },
                clearLoadCache () {
                    cache && loadCache.clear();
                },
                clearSearchCache () {
                    cache && searchCache.clear();
                },
                clearCaches () {
                    cache && (loadCache.clear(), searchCache.clear());
                }
            };
        };
    },
    "../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        let yaml, { resolve } = __webpack_require__("node:path"), config = __webpack_require__("../../node_modules/.pnpm/lilconfig@3.1.3/node_modules/lilconfig/src/index.js"), loadOptions = __webpack_require__("../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/options.js"), loadPlugins = __webpack_require__("../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/plugins.js"), req = __webpack_require__("../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/req.js");
        async function processResult(ctx, result) {
            let obj, file = result.filepath || '', projectConfig = ((obj = result.config) && obj.__esModule ? obj : {
                default: obj
            }).default || {};
            (projectConfig = 'function' == typeof projectConfig ? projectConfig(ctx) : Object.assign({}, projectConfig, ctx)).plugins || (projectConfig.plugins = []);
            let res = {
                file,
                options: await loadOptions(projectConfig, file),
                plugins: await loadPlugins(projectConfig, file)
            };
            return delete projectConfig.plugins, res;
        }
        async function loader(filepath) {
            return req(filepath);
        }
        async function yamlLoader(_, content) {
            if (!yaml) try {
                yaml = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "yaml"));
            } catch (e) {
                throw Error(`'yaml' is required for the YAML configuration files. Make sure it is installed\nError: ${e.message}`);
            }
            return yaml.parse(content);
        }
        module.exports = function(ctx, path, options) {
            var ctx1;
            return ctx1 = ctx, (ctx1 = Object.assign({
                cwd: process.cwd(),
                env: process.env.NODE_ENV
            }, ctx1)).env || (process.env.NODE_ENV = 'development'), ctx = ctx1, path = path ? resolve(path) : process.cwd(), config.lilconfig('postcss', ((options = {})=>{
                let moduleName = 'postcss';
                return {
                    ...options,
                    loaders: {
                        ...options.loaders,
                        '.cjs': loader,
                        '.cts': loader,
                        '.js': loader,
                        '.mjs': loader,
                        '.mts': loader,
                        '.ts': loader,
                        '.yaml': yamlLoader,
                        '.yml': yamlLoader
                    },
                    searchPlaces: [
                        ...options.searchPlaces || [],
                        'package.json',
                        `.${moduleName}rc`,
                        `.${moduleName}rc.json`,
                        `.${moduleName}rc.yaml`,
                        `.${moduleName}rc.yml`,
                        `.${moduleName}rc.ts`,
                        `.${moduleName}rc.cts`,
                        `.${moduleName}rc.mts`,
                        `.${moduleName}rc.js`,
                        `.${moduleName}rc.cjs`,
                        `.${moduleName}rc.mjs`,
                        `${moduleName}.config.ts`,
                        `${moduleName}.config.cts`,
                        `${moduleName}.config.mts`,
                        `${moduleName}.config.js`,
                        `${moduleName}.config.cjs`,
                        `${moduleName}.config.mjs`
                    ]
                };
            })(options)).search(path).then((result)=>{
                if (!result) throw Error(`No PostCSS Config found in: ${path}`);
                return processResult(ctx, result);
            });
        };
    },
    "../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/options.js": function(module, __unused_webpack_exports, __webpack_require__) {
        let req = __webpack_require__("../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/req.js");
        module.exports = async function(config, file) {
            if (config.parser && 'string' == typeof config.parser) try {
                config.parser = await req(config.parser, file);
            } catch (err) {
                throw Error(`Loading PostCSS Parser failed: ${err.message}\n\n(@${file})`);
            }
            if (config.syntax && 'string' == typeof config.syntax) try {
                config.syntax = await req(config.syntax, file);
            } catch (err) {
                throw Error(`Loading PostCSS Syntax failed: ${err.message}\n\n(@${file})`);
            }
            if (config.stringifier && 'string' == typeof config.stringifier) try {
                config.stringifier = await req(config.stringifier, file);
            } catch (err) {
                throw Error(`Loading PostCSS Stringifier failed: ${err.message}\n\n(@${file})`);
            }
            return config;
        };
    },
    "../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/plugins.js": function(module, __unused_webpack_exports, __webpack_require__) {
        let req = __webpack_require__("../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/req.js");
        async function load(plugin, options, file) {
            try {
                if (null == options || 0 === Object.keys(options).length) return await req(plugin, file);
                return (await req(plugin, file))(options);
            } catch (err) {
                throw Error(`Loading PostCSS Plugin failed: ${err.message}\n\n(@${file})`);
            }
        }
        module.exports = async function(config, file) {
            let list = [];
            return Array.isArray(config.plugins) ? list = config.plugins.filter(Boolean) : (list = Object.entries(config.plugins).filter(([, options])=>!1 !== options).map(([plugin, options])=>load(plugin, options, file)), list = await Promise.all(list)), list.length && list.length > 0 && list.forEach((plugin, i)=>{
                if (plugin.default && (plugin = plugin.default), !0 === plugin.postcss ? plugin = plugin() : plugin.postcss && (plugin = plugin.postcss), !('object' == typeof plugin && Array.isArray(plugin.plugins) || 'object' == typeof plugin && plugin.postcssPlugin || 'function' == typeof plugin)) throw TypeError(`Invalid PostCSS Plugin found at: plugins[${i}]\n\n(@${file})`);
            }), list;
        };
    },
    "../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/req.js": function(module, __unused_webpack_exports, __webpack_require__) {
        let tsx, jiti, { createRequire } = __webpack_require__("node:module"), { pathToFileURL } = __webpack_require__("node:url"), TS_EXT_RE = /\.[mc]?ts$/, importError = [];
        module.exports = async function(name, rootFile = __filename) {
            let url = createRequire(rootFile).resolve(name);
            try {
                return (await import(`${pathToFileURL(url)}?t=${Date.now()}`)).default;
            } catch (err) {
                if (!TS_EXT_RE.test(url)) throw err;
            }
            if (void 0 === tsx) try {
                tsx = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "tsx/cjs/api"));
            } catch (error) {
                importError.push(error);
            }
            if (tsx) {
                let loaded = tsx.require(name, rootFile);
                return loaded && '__esModule' in loaded ? loaded.default : loaded;
            }
            if (void 0 === jiti) try {
                jiti = (await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "jiti"))).default;
            } catch (error) {
                importError.push(error);
            }
            if (jiti) return jiti(rootFile, {
                interopDefault: !0
            })(name);
            throw Error(`'tsx' or 'jiti' is required for the TypeScript configuration files. Make sure it is installed\nError: ${importError.map((error)=>error.message).join('\n')}`);
        };
    },
    "../../node_modules/.pnpm/shallow-clone@3.0.1/node_modules/shallow-clone/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        let valueOf = Symbol.prototype.valueOf, typeOf = __webpack_require__("../../node_modules/.pnpm/kind-of@6.0.3/node_modules/kind-of/index.js");
        module.exports = function(val, deep) {
            switch(typeOf(val)){
                case 'array':
                    return val.slice();
                case 'object':
                    return Object.assign({}, val);
                case 'date':
                    return new val.constructor(Number(val));
                case 'map':
                    return new Map(val);
                case 'set':
                    return new Set(val);
                case 'buffer':
                    var val1, val2, val3 = val;
                    let len = val3.length, buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);
                    return val3.copy(buf), buf;
                case 'symbol':
                    return val1 = val, valueOf ? Object(valueOf.call(val1)) : {};
                case 'arraybuffer':
                    var val4 = val;
                    let res = new val4.constructor(val4.byteLength);
                    return new Uint8Array(res).set(new Uint8Array(val4)), res;
                case 'float32array':
                case 'float64array':
                case 'int16array':
                case 'int32array':
                case 'int8array':
                case 'uint16array':
                case 'uint32array':
                case 'uint8clampedarray':
                case 'uint8array':
                    return new (val2 = val).constructor(val2.buffer, val2.byteOffset, val2.length);
                case 'regexp':
                    var val5 = val;
                    let flags = void 0 !== val5.flags ? val5.flags : /\w+$/.exec(val5) || void 0, re = new val5.constructor(val5.source, flags);
                    return re.lastIndex = val5.lastIndex, re;
                case 'error':
                    return Object.create(val);
                default:
                    return val;
            }
        };
    },
    "../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/index.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        var __read = this && this.__read || function(o, n) {
            var m = "function" == typeof Symbol && o[Symbol.iterator];
            if (!m) return o;
            var r, e, i = m.call(o), ar = [];
            try {
                for(; (void 0 === n || n-- > 0) && !(r = i.next()).done;)ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally{
                try {
                    r && !r.done && (m = i.return) && m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        }, __spreadArray = this && this.__spreadArray || function(to, from, pack) {
            if (pack || 2 == arguments.length) for(var ar, i = 0, l = from.length; i < l; i++)!ar && i in from || (ar || (ar = Array.prototype.slice.call(from, 0, i)), ar[i] = from[i]);
            return to.concat(ar || Array.prototype.slice.call(from));
        }, __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.unique = exports1.mergeWithRules = exports1.mergeWithCustomize = exports1.default = exports1.merge = exports1.CustomizeRule = exports1.customizeObject = exports1.customizeArray = void 0;
        var wildcard_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/wildcard@2.0.1/node_modules/wildcard/index.js")), merge_with_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/merge-with.js")), join_arrays_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/join-arrays.js"));
        exports1.unique = __importDefault(__webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/unique.js")).default;
        var types_1 = __webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/types.js");
        Object.defineProperty(exports1, "CustomizeRule", {
            enumerable: !0,
            get: function() {
                return types_1.CustomizeRule;
            }
        });
        var utils_1 = __webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/utils.js");
        function merge(firstConfiguration) {
            for(var configurations = [], _i = 1; _i < arguments.length; _i++)configurations[_i - 1] = arguments[_i];
            return mergeWithCustomize({}).apply(void 0, __spreadArray([
                firstConfiguration
            ], __read(configurations), !1));
        }
        function mergeWithCustomize(options) {
            return function(firstConfiguration) {
                for(var configurations = [], _i = 1; _i < arguments.length; _i++)configurations[_i - 1] = arguments[_i];
                if ((0, utils_1.isUndefined)(firstConfiguration) || configurations.some(utils_1.isUndefined)) throw TypeError("Merging undefined is not supported");
                if (firstConfiguration.then) throw TypeError("Promises are not supported");
                if (!firstConfiguration) return {};
                if (0 === configurations.length) {
                    if (Array.isArray(firstConfiguration)) {
                        if (0 === firstConfiguration.length) return {};
                        if (firstConfiguration.some(utils_1.isUndefined)) throw TypeError("Merging undefined is not supported");
                        if (firstConfiguration[0].then) throw TypeError("Promises are not supported");
                        return (0, merge_with_1.default)(firstConfiguration, (0, join_arrays_1.default)(options));
                    }
                    return firstConfiguration;
                }
                return (0, merge_with_1.default)([
                    firstConfiguration
                ].concat(configurations), (0, join_arrays_1.default)(options));
            };
        }
        exports1.merge = merge, exports1.default = merge, exports1.mergeWithCustomize = mergeWithCustomize, exports1.customizeArray = function(rules) {
            return function(a, b, key) {
                var matchedRule = Object.keys(rules).find(function(rule) {
                    return (0, wildcard_1.default)(rule, key);
                }) || "";
                if (matchedRule) switch(rules[matchedRule]){
                    case types_1.CustomizeRule.Prepend:
                        return __spreadArray(__spreadArray([], __read(b), !1), __read(a), !1);
                    case types_1.CustomizeRule.Replace:
                        return b;
                    case types_1.CustomizeRule.Append:
                    default:
                        return __spreadArray(__spreadArray([], __read(a), !1), __read(b), !1);
                }
            };
        }, exports1.mergeWithRules = function(rules) {
            return mergeWithCustomize({
                customizeArray: function(a, b, key) {
                    var currentRule = rules;
                    return (key.split(".").forEach(function(k) {
                        currentRule && (currentRule = currentRule[k]);
                    }), (0, utils_1.isPlainObject)(currentRule)) ? function mergeWithRule(_a) {
                        var currentRule = _a.currentRule, a = _a.a, b = _a.b;
                        if (!isArray(a)) return a;
                        var bAllMatches = [];
                        return a.map(function(ao) {
                            if (!(0, utils_1.isPlainObject)(currentRule)) return ao;
                            var ret = {}, rulesToMatch = [], operations = {};
                            Object.entries(currentRule).forEach(function(_a) {
                                var _b = __read(_a, 2), k = _b[0], v = _b[1];
                                v === types_1.CustomizeRule.Match ? rulesToMatch.push(k) : operations[k] = v;
                            });
                            var bMatches = b.filter(function(o) {
                                var matches = rulesToMatch.every(function(rule) {
                                    return (0, utils_1.isSameCondition)(ao[rule], o[rule]);
                                });
                                return matches && bAllMatches.push(o), matches;
                            });
                            return (0, utils_1.isPlainObject)(ao) ? (Object.entries(ao).forEach(function(_a) {
                                var _b = __read(_a, 2), k = _b[0], v = _b[1];
                                switch(currentRule[k]){
                                    case types_1.CustomizeRule.Match:
                                        ret[k] = v, Object.entries(currentRule).forEach(function(_a) {
                                            var _b = __read(_a, 2), k = _b[0];
                                            if (_b[1] === types_1.CustomizeRule.Replace && bMatches.length > 0) {
                                                var val = last(bMatches)[k];
                                                void 0 !== val && (ret[k] = val);
                                            }
                                        });
                                        break;
                                    case types_1.CustomizeRule.Append:
                                        if (!bMatches.length) {
                                            ret[k] = v;
                                            break;
                                        }
                                        var appendValue = last(bMatches)[k];
                                        if (!isArray(v) || !isArray(appendValue)) throw TypeError("Trying to append non-arrays");
                                        ret[k] = v.concat(appendValue);
                                        break;
                                    case types_1.CustomizeRule.Merge:
                                        if (!bMatches.length) {
                                            ret[k] = v;
                                            break;
                                        }
                                        var lastValue = last(bMatches)[k];
                                        if (!(0, utils_1.isPlainObject)(v) || !(0, utils_1.isPlainObject)(lastValue)) throw TypeError("Trying to merge non-objects");
                                        ret[k] = merge(v, lastValue);
                                        break;
                                    case types_1.CustomizeRule.Prepend:
                                        if (!bMatches.length) {
                                            ret[k] = v;
                                            break;
                                        }
                                        var prependValue = last(bMatches)[k];
                                        if (!isArray(v) || !isArray(prependValue)) throw TypeError("Trying to prepend non-arrays");
                                        ret[k] = prependValue.concat(v);
                                        break;
                                    case types_1.CustomizeRule.Replace:
                                        ret[k] = bMatches.length > 0 ? last(bMatches)[k] : v;
                                        break;
                                    default:
                                        var currentRule_1 = operations[k], b_1 = bMatches.map(function(o) {
                                            return o[k];
                                        }).reduce(function(acc, val) {
                                            return isArray(acc) && isArray(val) ? __spreadArray(__spreadArray([], __read(acc), !1), __read(val), !1) : acc;
                                        }, []);
                                        ret[k] = mergeWithRule({
                                            currentRule: currentRule_1,
                                            a: v,
                                            b: b_1
                                        });
                                }
                            }), ret) : ao;
                        }).concat(b.filter(function(o) {
                            return !bAllMatches.includes(o);
                        }));
                    }({
                        currentRule: currentRule,
                        a: a,
                        b: b
                    }) : "string" == typeof currentRule ? function(_a) {
                        var currentRule = _a.currentRule, a = _a.a, b = _a.b;
                        switch(currentRule){
                            case types_1.CustomizeRule.Append:
                                return a.concat(b);
                            case types_1.CustomizeRule.Prepend:
                                return b.concat(a);
                            case types_1.CustomizeRule.Replace:
                                return b;
                        }
                        return a;
                    }({
                        currentRule: currentRule,
                        a: a,
                        b: b
                    }) : void 0;
                }
            });
        };
        var isArray = Array.isArray;
        function last(arr) {
            return arr[arr.length - 1];
        }
        exports1.customizeObject = function(rules) {
            return function(a, b, key) {
                switch(rules[key]){
                    case types_1.CustomizeRule.Prepend:
                        return (0, merge_with_1.default)([
                            b,
                            a
                        ], (0, join_arrays_1.default)());
                    case types_1.CustomizeRule.Replace:
                        return b;
                    case types_1.CustomizeRule.Append:
                        return (0, merge_with_1.default)([
                            a,
                            b
                        ], (0, join_arrays_1.default)());
                }
            };
        };
    },
    "../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/join-arrays.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        var __read = this && this.__read || function(o, n) {
            var m = "function" == typeof Symbol && o[Symbol.iterator];
            if (!m) return o;
            var r, e, i = m.call(o), ar = [];
            try {
                for(; (void 0 === n || n-- > 0) && !(r = i.next()).done;)ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally{
                try {
                    r && !r.done && (m = i.return) && m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        }, __spreadArray = this && this.__spreadArray || function(to, from, pack) {
            if (pack || 2 == arguments.length) for(var ar, i = 0, l = from.length; i < l; i++)!ar && i in from || (ar || (ar = Array.prototype.slice.call(from, 0, i)), ar[i] = from[i]);
            return to.concat(ar || Array.prototype.slice.call(from));
        }, __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        });
        var clone_deep_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/clone-deep@4.0.1/node_modules/clone-deep/index.js")), merge_with_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/merge-with.js")), utils_1 = __webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/utils.js"), isArray = Array.isArray;
        exports1.default = function joinArrays(_a) {
            var _b = void 0 === _a ? {} : _a, customizeArray = _b.customizeArray, customizeObject = _b.customizeObject, key = _b.key;
            return function _joinArrays(a, b, k) {
                var newKey = key ? "".concat(key, ".").concat(k) : k;
                if ((0, utils_1.isFunction)(a) && (0, utils_1.isFunction)(b)) return function() {
                    for(var args = [], _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                    return _joinArrays(a.apply(void 0, __spreadArray([], __read(args), !1)), b.apply(void 0, __spreadArray([], __read(args), !1)), k);
                };
                if (isArray(a) && isArray(b)) {
                    var customResult = customizeArray && customizeArray(a, b, newKey);
                    return customResult || __spreadArray(__spreadArray([], __read(a), !1), __read(b), !1);
                }
                if ((0, utils_1.isRegex)(b)) return b;
                if ((0, utils_1.isPlainObject)(a) && (0, utils_1.isPlainObject)(b)) {
                    var customResult = customizeObject && customizeObject(a, b, newKey);
                    return customResult || (0, merge_with_1.default)([
                        a,
                        b
                    ], joinArrays({
                        customizeArray: customizeArray,
                        customizeObject: customizeObject,
                        key: newKey
                    }));
                }
                return (0, utils_1.isPlainObject)(b) ? (0, clone_deep_1.default)(b) : isArray(b) ? __spreadArray([], __read(b), !1) : b;
            };
        };
    },
    "../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/merge-with.js": function(__unused_webpack_module, exports1) {
        "use strict";
        var __read = this && this.__read || function(o, n) {
            var m = "function" == typeof Symbol && o[Symbol.iterator];
            if (!m) return o;
            var r, e, i = m.call(o), ar = [];
            try {
                for(; (void 0 === n || n-- > 0) && !(r = i.next()).done;)ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally{
                try {
                    r && !r.done && (m = i.return) && m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.default = function(objects, customizer) {
            var _a = __read(objects), first = _a[0], rest = _a.slice(1), ret = first;
            return rest.forEach(function(a) {
                var a1, b, customizer1, ret1;
                a1 = ret, b = a, customizer1 = customizer, ret1 = {}, Object.keys(a1).concat(Object.keys(b)).forEach(function(k) {
                    var v = customizer1(a1[k], b[k], k);
                    ret1[k] = void 0 === v ? a1[k] : v;
                }), ret = ret1;
            }), ret;
        };
    },
    "../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/types.js": function(__unused_webpack_module, exports1) {
        "use strict";
        var CustomizeRule, CustomizeRule1;
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.CustomizeRule = void 0, (CustomizeRule1 = CustomizeRule || (exports1.CustomizeRule = CustomizeRule = {})).Match = "match", CustomizeRule1.Merge = "merge", CustomizeRule1.Append = "append", CustomizeRule1.Prepend = "prepend", CustomizeRule1.Replace = "replace";
    },
    "../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/unique.js": function(__unused_webpack_module, exports1) {
        "use strict";
        var __read = this && this.__read || function(o, n) {
            var m = "function" == typeof Symbol && o[Symbol.iterator];
            if (!m) return o;
            var r, e, i = m.call(o), ar = [];
            try {
                for(; (void 0 === n || n-- > 0) && !(r = i.next()).done;)ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally{
                try {
                    r && !r.done && (m = i.return) && m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        }, __spreadArray = this && this.__spreadArray || function(to, from, pack) {
            if (pack || 2 == arguments.length) for(var ar, i = 0, l = from.length; i < l; i++)!ar && i in from || (ar || (ar = Array.prototype.slice.call(from, 0, i)), ar[i] = from[i]);
            return to.concat(ar || Array.prototype.slice.call(from));
        };
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.default = function(key, uniques, getter) {
            var uniquesSet = new Set(uniques);
            return function(a, b, k) {
                return k === key && Array.from(__spreadArray(__spreadArray([], __read(a), !1), __read(b), !1).map(function(it) {
                    return {
                        key: getter(it),
                        value: it
                    };
                }).map(function(_a) {
                    var key = _a.key, value = _a.value;
                    return {
                        key: uniquesSet.has(key) ? key : value,
                        value: value
                    };
                }).reduce(function(m, _a) {
                    var key = _a.key, value = _a.value;
                    return m.delete(key), m.set(key, value);
                }, new Map()).values());
            };
        };
    },
    "../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/utils.js": function(__unused_webpack_module, exports1, __webpack_require__) {
        "use strict";
        var __read = this && this.__read || function(o, n) {
            var m = "function" == typeof Symbol && o[Symbol.iterator];
            if (!m) return o;
            var r, e, i = m.call(o), ar = [];
            try {
                for(; (void 0 === n || n-- > 0) && !(r = i.next()).done;)ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally{
                try {
                    r && !r.done && (m = i.return) && m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        Object.defineProperty(exports1, "__esModule", {
            value: !0
        }), exports1.isSameCondition = exports1.isUndefined = exports1.isPlainObject = exports1.isFunction = exports1.isRegex = void 0;
        var flat_1 = __webpack_require__("../../node_modules/.pnpm/flat@5.0.2/node_modules/flat/index.js");
        function isRegex(o) {
            return o instanceof RegExp;
        }
        function isFunction(functionToCheck) {
            return functionToCheck && "[object Function]" === ({}).toString.call(functionToCheck);
        }
        exports1.isRegex = isRegex, exports1.isFunction = isFunction, exports1.isPlainObject = function(a) {
            return !(null === a || Array.isArray(a)) && "object" == typeof a;
        }, exports1.isUndefined = function(a) {
            return void 0 === a;
        }, exports1.isSameCondition = function(a, b) {
            if (!a || !b) return a === b;
            if ("string" == typeof a || "string" == typeof b || isRegex(a) || isRegex(b) || isFunction(a) || isFunction(b)) return a.toString() === b.toString();
            var _a, _b, entriesA = Object.entries((0, flat_1.flatten)(a)), entriesB = Object.entries((0, flat_1.flatten)(b));
            if (entriesA.length !== entriesB.length) return !1;
            for(var i = 0; i < entriesA.length; i++)entriesA[i][0] = entriesA[i][0].replace(/\b\d+\b/g, "[]"), entriesB[i][0] = entriesB[i][0].replace(/\b\d+\b/g, "[]");
            function cmp(_a, _b) {
                var _c = __read(_a, 2), k1 = _c[0], v1 = _c[1], _d = __read(_b, 2), k2 = _d[0], v2 = _d[1];
                return k1 < k2 ? -1 : k1 > k2 ? 1 : v1 < v2 ? -1 : +(v1 > v2);
            }
            if (entriesA.sort(cmp), entriesB.sort(cmp), entriesA.length !== entriesB.length) return !1;
            for(var i = 0; i < entriesA.length; i++)if (entriesA[i][0] !== entriesB[i][0] || (null == (_a = entriesA[i][1]) ? void 0 : _a.toString()) !== (null == (_b = entriesB[i][1]) ? void 0 : _b.toString())) return !1;
            return !0;
        };
    },
    "../../node_modules/.pnpm/wildcard@2.0.1/node_modules/wildcard/index.js": function(module) {
        "use strict";
        var REGEXP_PARTS = /(\*|\?)/g;
        function WildcardMatcher(text, separator) {
            this.text = text = text || '', this.hasWild = text.indexOf('*') >= 0, this.separator = separator, this.parts = text.split(separator).map(this.classifyPart.bind(this));
        }
        WildcardMatcher.prototype.match = function(input) {
            var ii, testParts, matches = !0, parts = this.parts, partsCount = parts.length;
            if ('string' == typeof input || input instanceof String) if (this.hasWild || this.text == input) {
                for(ii = 0, testParts = (input || '').split(this.separator); matches && ii < partsCount; ii++)if ('*' === parts[ii]) continue;
                else matches = ii < testParts.length && (parts[ii] instanceof RegExp ? parts[ii].test(testParts[ii]) : parts[ii] === testParts[ii]);
                matches = matches && testParts;
            } else matches = !1;
            else if ('function' == typeof input.splice) for(matches = [], ii = input.length; ii--;)this.match(input[ii]) && (matches[matches.length] = input[ii]);
            else if ('object' == typeof input) for(var key in matches = {}, input)this.match(key) && (matches[key] = input[key]);
            return matches;
        }, WildcardMatcher.prototype.classifyPart = function(part) {
            if ('*' === part) ;
            else if (part.indexOf('*') >= 0 || part.indexOf('?') >= 0) return new RegExp(part.replace(REGEXP_PARTS, '\.$1'));
            return part;
        }, module.exports = function(text, test, separator) {
            var matcher = new WildcardMatcher(text, separator || /[\/\.]/);
            return void 0 !== test ? matcher.match(test) : matcher;
        };
    },
    fs: function(module) {
        "use strict";
        module.exports = require("fs");
    },
    "node:module": function(module) {
        "use strict";
        module.exports = require("node:module");
    },
    "node:path": function(module) {
        "use strict";
        module.exports = require("node:path");
    },
    "node:url": function(module) {
        "use strict";
        module.exports = require("node:url");
    },
    os: function(module) {
        "use strict";
        module.exports = require("os");
    },
    path: function(module) {
        "use strict";
        module.exports = require("path");
    },
    url: function(module) {
        "use strict";
        module.exports = require("url");
    },
    "../../compiled/chokidar/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/chokidar/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/connect/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/connect/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/cors/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/cors/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/http-proxy-middleware/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/http-proxy-middleware/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/launch-editor-middleware/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/launch-editor-middleware/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/mrmime/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/mrmime/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/on-finished/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/on-finished/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/rsbuild-dev-middleware/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/rsbuild-dev-middleware/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/rspack-manifest-plugin/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/rspack-manifest-plugin/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/sirv/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/sirv/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/tinyglobby/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/tinyglobby/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/webpack-bundle-analyzer/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/webpack-bundle-analyzer/index.js").then(function(module) {
            return module;
        });
    },
    "../../compiled/ws/index.js": function(module) {
        "use strict";
        module.exports = import("../compiled/ws/index.js").then(function(module) {
            return module;
        });
    },
    jiti: function(module) {
        "use strict";
        module.exports = import("jiti").then(function(module) {
            return module;
        });
    },
    "node:child_process": function(module) {
        "use strict";
        module.exports = import("node:child_process").then(function(module) {
            return module;
        });
    },
    "node:crypto": function(module) {
        "use strict";
        module.exports = import("node:crypto").then(function(module) {
            return module;
        });
    },
    "node:dns": function(module) {
        "use strict";
        module.exports = import("node:dns").then(function(module) {
            return module;
        });
    },
    "node:http": function(module) {
        "use strict";
        module.exports = import("node:http").then(function(module) {
            return module;
        });
    },
    "node:http2": function(module) {
        "use strict";
        module.exports = import("node:http2").then(function(module) {
            return module;
        });
    },
    "node:https": function(module) {
        "use strict";
        module.exports = import("node:https").then(function(module) {
            return module;
        });
    },
    "node:net": function(module) {
        "use strict";
        module.exports = import("node:net").then(function(module) {
            return module;
        });
    },
    "node:readline": function(module) {
        "use strict";
        module.exports = import("node:readline").then(function(module) {
            return module;
        });
    },
    "node:util": function(module) {
        "use strict";
        module.exports = import("node:util").then(function(module) {
            return module;
        });
    },
    "node:vm": function(module) {
        "use strict";
        module.exports = import("node:vm").then(function(module) {
            return module;
        });
    },
    "node:zlib": function(module) {
        "use strict";
        module.exports = import("node:zlib").then(function(module) {
            return module;
        });
    },
    "tsx/cjs/api": function(module) {
        "use strict";
        module.exports = import("tsx/cjs/api").then(function(module) {
            return module;
        });
    },
    yaml: function(module) {
        "use strict";
        module.exports = import("yaml").then(function(module) {
            return module;
        });
    }
}, __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    return __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.exports;
}
__webpack_require__.n = (module)=>{
    var getter = module && module.__esModule ? ()=>module.default : ()=>module;
    return __webpack_require__.d(getter, {
        a: getter
    }), getter;
}, __webpack_require__.d = (exports1, definition)=>{
    for(var key in definition)__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key) && Object.defineProperty(exports1, key, {
        enumerable: !0,
        get: definition[key]
    });
}, __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports1)=>{
    'undefined' != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports1, Symbol.toStringTag, {
        value: 'Module'
    }), Object.defineProperty(exports1, '__esModule', {
        value: !0
    });
};
var __webpack_exports__ = {};
for(var __webpack_i__ in (()=>{
    "use strict";
    let swcHelpersPath, pluginHelper_htmlPlugin, cssExtractPlugin, isDockerCached, cachedResult, hmrClientPath, overlayClientPath;
    __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
        PLUGIN_CSS_NAME: ()=>PLUGIN_CSS_NAME,
        createRsbuild: ()=>createRsbuild,
        logger: ()=>index_js_namespaceObject.logger,
        mergeRsbuildConfig: ()=>mergeRsbuildConfig,
        loadConfig: ()=>loadConfig_loadConfig,
        PLUGIN_SWC_NAME: ()=>PLUGIN_SWC_NAME,
        defaultAllowedOrigins: ()=>defaultAllowedOrigins,
        ensureAssetPrefix: ()=>ensureAssetPrefix,
        loadEnv: ()=>loadEnv,
        rspack: ()=>rspack_rspack,
        runCLI: ()=>runCLI,
        defineConfig: ()=>defineConfig,
        version: ()=>src_version
    });
    var provider_helpers_namespaceObject = {};
    __webpack_require__.r(provider_helpers_namespaceObject), __webpack_require__.d(provider_helpers_namespaceObject, {
        createDevServer: ()=>devServer_createDevServer,
        formatStats: ()=>formatStats,
        getChainUtils: ()=>getChainUtils,
        getConfigUtils: ()=>getConfigUtils,
        getHTMLPlugin: ()=>getHTMLPlugin,
        getStatsOptions: ()=>getStatsOptions,
        initRsbuildConfig: ()=>initRsbuildConfig,
        inspectConfig: ()=>inspectConfig_inspectConfig,
        modifyBundlerChain: ()=>modifyBundlerChain,
        prettyTime: ()=>prettyTime,
        registerBuildHook: ()=>registerBuildHook,
        registerDevHook: ()=>registerDevHook,
        setCssExtractPlugin: ()=>setCssExtractPlugin,
        setHTMLPlugin: ()=>setHTMLPlugin
    });
    var external_node_module_ = __webpack_require__("node:module");
    let rspack_rspack = (0, external_node_module_.createRequire)(__rslib_import_meta_url__)('@rspack/core'), index_js_namespaceObject = require("../compiled/rslog/index.js");
    var external_node_path_ = __webpack_require__("node:path"), external_node_path_default = __webpack_require__.n(external_node_path_), external_node_url_ = __webpack_require__("node:url"), cjs = __webpack_require__("../../node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js"), cjs_default = __webpack_require__.n(cjs);
    let picocolors_index_js_namespaceObject = require("../compiled/picocolors/index.js");
    var picocolors_index_js_default = __webpack_require__.n(picocolors_index_js_namespaceObject), dist = __webpack_require__("../../node_modules/.pnpm/javascript-stringify@2.1.0/node_modules/javascript-stringify/dist/index.js");
    function createMap(superClass) {
        return class extends superClass {
            extend(methods) {
                return this.shorthands = methods, methods.forEach((method)=>{
                    this[method] = (value)=>this.set(method, value);
                }), this;
            }
            clear() {
                return this.store.clear(), this;
            }
            delete(key) {
                return this.store.delete(key), this;
            }
            order() {
                let entries = [
                    ...this.store
                ].reduce((acc, [key, value])=>(acc[key] = value, acc), {}), names = Object.keys(entries), order = [
                    ...names
                ];
                return names.forEach((name)=>{
                    if (!entries[name]) return;
                    let { __before, __after } = entries[name];
                    __before && order.includes(__before) ? (order.splice(order.indexOf(name), 1), order.splice(order.indexOf(__before), 0, name)) : __after && order.includes(__after) && (order.splice(order.indexOf(name), 1), order.splice(order.indexOf(__after) + 1, 0, name));
                }), {
                    entries,
                    order
                };
            }
            entries() {
                let { entries, order } = this.order();
                if (order.length) return entries;
            }
            values() {
                let { entries, order } = this.order();
                return order.map((name)=>entries[name]);
            }
            get(key) {
                return this.store.get(key);
            }
            getOrCompute(key, fn) {
                return this.has(key) || this.set(key, fn()), this.get(key);
            }
            has(key) {
                return this.store.has(key);
            }
            set(key, value) {
                return this.store.set(key, value), this;
            }
            merge(obj, omit = []) {
                return Object.keys(obj).forEach((key)=>{
                    if (omit.includes(key)) return;
                    let value = obj[key];
                    (Array.isArray(value) || 'object' == typeof value) && null !== value && this.has(key) ? this.set(key, cjs(this.get(key), value)) : this.set(key, value);
                }), this;
            }
            clean(obj) {
                return Object.keys(obj).reduce((acc, key)=>{
                    let value = obj[key];
                    return void 0 === value || Array.isArray(value) && !value.length || '[object Object]' === Object.prototype.toString.call(value) && !Object.keys(value).length || (acc[key] = value), acc;
                }, {});
            }
            when(condition, whenTruthy = Function.prototype, whenFalsy = Function.prototype) {
                return condition ? whenTruthy(this) : whenFalsy(this), this;
            }
            constructor(...args){
                super(...args), this.store = new Map();
            }
        };
    }
    function createChainable(superClass) {
        return class extends superClass {
            batch(handler) {
                return handler(this), this;
            }
            end() {
                return this.parent;
            }
            constructor(parent){
                super(), this.parent = parent;
            }
        };
    }
    let ChainedMap = createMap(createChainable(Object)), ChainedValueMap = function(superClass) {
        return class extends superClass {
            set(...args) {
                return this.useMap = !0, this.value = void 0, super.set(...args);
            }
            clear() {
                return this.value = void 0, super.clear();
            }
            classCall(value) {
                return this.clear(), this.useMap = !1, this.value = value, this.parent;
            }
            entries() {
                return this.useMap ? super.entries() : this.value;
            }
            values() {
                return this.useMap ? super.values() : this.value;
            }
            constructor(...args){
                super(...args), this.value = void 0, this.useMap = !0;
            }
        };
    }(createMap(createChainable(class extends Function {
        classCall() {
            throw Error('not implemented');
        }
        constructor(){
            return super(), new Proxy(this, {
                apply: (target, thisArg, args)=>target.classCall(...args)
            });
        }
    }))), ChainedSet = function(superClass) {
        return class extends superClass {
            add(value) {
                return this.store.add(value), this;
            }
            prepend(value) {
                return this.store = new Set([
                    value,
                    ...this.store
                ]), this;
            }
            clear() {
                return this.store.clear(), this;
            }
            delete(value) {
                return this.store.delete(value), this;
            }
            values() {
                return [
                    ...this.store
                ];
            }
            has(value) {
                return this.store.has(value);
            }
            merge(arr) {
                return void 0 !== arr && (this.store = new Set([
                    ...this.store,
                    ...arr
                ])), this;
            }
            when(condition, whenTruthy = Function.prototype, whenFalsy = Function.prototype) {
                return condition ? whenTruthy(this) : whenFalsy(this), this;
            }
            constructor(...args){
                super(...args), this.store = new Set();
            }
        };
    }(createChainable(Object)), Orderable = (Class)=>class extends Class {
            before(name) {
                if (this.__after) throw Error(`Unable to set .before(${JSON.stringify(name)}) with existing value for .after()`);
                return this.__before = name, this;
            }
            after(name) {
                if (this.__before) throw Error(`Unable to set .after(${JSON.stringify(name)}) with existing value for .before()`);
                return this.__after = name, this;
            }
            merge(obj, omit = []) {
                return obj.before && this.before(obj.before), obj.after && this.after(obj.after), super.merge(obj, [
                    ...omit,
                    'before',
                    'after'
                ]);
            }
        }, src_Plugin = Orderable(class extends ChainedMap {
        use(plugin, args = []) {
            return this.set('plugin', plugin).set('args', args);
        }
        tap(f) {
            if (!this.has('plugin')) throw Error(`Cannot call .tap() on a plugin that has not yet been defined. Call ${this.type}('${this.name}').use(<Plugin>) first.`);
            return this.set('args', f(this.get('args') || [])), this;
        }
        set(key, value) {
            if ('args' === key && !Array.isArray(value)) throw Error('args must be an array of arguments');
            return super.set(key, value);
        }
        merge(obj, omit = []) {
            return 'plugin' in obj && this.set('plugin', obj.plugin), 'args' in obj && this.set('args', obj.args), super.merge(obj, [
                ...omit,
                'args',
                'plugin'
            ]);
        }
        toConfig() {
            let init = this.get('init'), plugin = this.get('plugin'), args = this.get('args'), pluginPath = null;
            if (void 0 === plugin) throw Error(`Invalid ${this.type} configuration: ${this.type}('${this.name}').use(<Plugin>) was not called to specify the plugin`);
            'string' == typeof plugin && (plugin = require(pluginPath = plugin));
            let constructorName = plugin.__expression ? `(${plugin.__expression})` : plugin.name, config = init(plugin, args);
            return Object.defineProperties(config, {
                __pluginName: {
                    value: this.name
                },
                __pluginType: {
                    value: this.type
                },
                __pluginArgs: {
                    value: args
                },
                __pluginConstructorName: {
                    value: constructorName
                },
                __pluginPath: {
                    value: pluginPath
                }
            }), config;
        }
        constructor(parent, name, type = 'plugin'){
            super(parent), this.name = name, this.type = type, this.extend([
                'init'
            ]), this.init((Plugin, args = [])=>'function' == typeof Plugin ? new Plugin(...args) : Plugin);
        }
    }), childMaps = [
        'alias',
        'fallback',
        'byDependency',
        'extensionAlias'
    ], childSets = [
        'aliasFields',
        'conditionNames',
        "descriptionFiles",
        'extensions',
        'mainFields',
        'mainFiles',
        'exportsFields',
        'importsFields',
        'restrictions',
        'roots',
        'modules'
    ];
    class Resolve_class extends ChainedMap {
        plugin(name) {
            return this.plugins.getOrCompute(name, ()=>new src_Plugin(this, name, 'resolve.plugin'));
        }
        get(key) {
            return childMaps.includes(key) ? this[key].entries() : childSets.includes(key) ? this[key].values() : super.get(key);
        }
        toConfig() {
            let config = Object.assign(this.entries() || {}, {
                plugins: this.plugins.values().map((plugin)=>plugin.toConfig())
            });
            return childMaps.forEach((key)=>{
                config[key] = this[key].entries();
            }), childSets.forEach((key)=>{
                config[key] = this[key].values();
            }), this.clean(config);
        }
        merge(obj, omit = []) {
            !omit.includes('plugin') && 'plugin' in obj && Object.keys(obj.plugin).forEach((name)=>this.plugin(name).merge(obj.plugin[name]));
            let omissions = [
                ...childMaps,
                ...childSets
            ];
            return omissions.forEach((key)=>{
                !omit.includes(key) && key in obj && this[key].merge(obj[key]);
            }), super.merge(obj, [
                ...omit,
                ...omissions,
                'plugin'
            ]);
        }
        constructor(parent){
            super(parent), childMaps.forEach((key)=>{
                this[key] = new ChainedMap(this);
            }), childSets.forEach((key)=>{
                this[key] = new ChainedSet(this);
            }), this.plugins = new ChainedMap(this), this.extend([
                'cachePredicate',
                'cacheWithContext',
                'enforceExtension',
                'symlinks',
                'unsafeCache',
                'preferRelative',
                'preferAbsolute',
                'tsConfig'
            ]);
        }
    }
    class ResolveLoader_class extends Resolve_class {
        toConfig() {
            return this.clean({
                modules: this.modules.values(),
                moduleExtensions: this.moduleExtensions.values(),
                packageMains: this.packageMains.values(),
                ...super.toConfig()
            });
        }
        merge(obj, omit = []) {
            let omissions = [
                'modules',
                'moduleExtensions',
                'packageMains'
            ];
            return omissions.forEach((key)=>{
                !omit.includes(key) && key in obj && this[key].merge(obj[key]);
            }), super.merge(obj, [
                ...omit,
                ...omissions
            ]);
        }
        constructor(parent){
            super(parent), this.modules = new ChainedSet(this), this.moduleExtensions = new ChainedSet(this), this.packageMains = new ChainedSet(this);
        }
    }
    class Output_class extends ChainedMap {
        constructor(parent){
            super(parent), this.extend([
                'auxiliaryComment',
                'charset',
                'chunkFilename',
                'chunkLoadTimeout',
                'chunkLoadingGlobal',
                'chunkLoading',
                'chunkFormat',
                'enabledChunkLoadingTypes',
                'crossOriginLoading',
                'devtoolFallbackModuleFilenameTemplate',
                'devtoolModuleFilenameTemplate',
                'devtoolNamespace',
                'filename',
                'assetModuleFilename',
                'globalObject',
                'uniqueName',
                'hashDigest',
                'hashDigestLength',
                'hashFunction',
                'hashSalt',
                'hotUpdateChunkFilename',
                'hotUpdateGlobal',
                'hotUpdateMainFilename',
                'library',
                'libraryExport',
                'libraryTarget',
                'importFunctionName',
                'path',
                'pathinfo',
                'publicPath',
                "scriptType",
                'sourceMapFilename',
                'sourcePrefix',
                'strictModuleErrorHandling',
                'strictModuleExceptionHandling',
                'umdNamedDefine',
                'workerChunkLoading',
                'enabledLibraryTypes',
                'environment',
                'compareBeforeEmit',
                'wasmLoading',
                'webassemblyModuleFilename',
                'enabledWasmLoadingTypes',
                'iife',
                'module',
                'clean'
            ]);
        }
    }
    class DevServer_class extends ChainedMap {
        toConfig() {
            return this.clean({
                allowedHosts: this.allowedHosts.values(),
                ...this.entries() || {}
            });
        }
        merge(obj, omit = []) {
            return !omit.includes('allowedHosts') && 'allowedHosts' in obj && this.allowedHosts.merge(obj.allowedHosts), super.merge(obj, [
                'allowedHosts'
            ]);
        }
        constructor(parent){
            super(parent), this.allowedHosts = new ChainedSet(this), this.extend([
                'after',
                'before',
                'bonjour',
                'clientLogLevel',
                'compress',
                'contentBase',
                'contentBasePublicPath',
                'disableHostCheck',
                'filename',
                'headers',
                'historyApiFallback',
                'host',
                'hot',
                'hotOnly',
                'http2',
                'https',
                'index',
                'injectClient',
                'injectHot',
                'inline',
                'lazy',
                'liveReload',
                'mimeTypes',
                'noInfo',
                'onListening',
                'open',
                'openPage',
                'overlay',
                'pfx',
                'pfxPassphrase',
                'port',
                'proxy',
                'progress',
                'public',
                'publicPath',
                'quiet',
                'serveIndex',
                'setup',
                'socket',
                'sockHost',
                'sockPath',
                'sockPort',
                'staticOptions',
                'stats',
                'stdin',
                'transportMode',
                'useLocalIp',
                'watchContentBase',
                'watchOptions',
                'writeToDisk'
            ]);
        }
    }
    let Use = Orderable(class extends ChainedMap {
        tap(f) {
            return this.options(f(this.get('options'))), this;
        }
        merge(obj, omit = []) {
            return !omit.includes('loader') && 'loader' in obj && this.loader(obj.loader), !omit.includes('options') && 'options' in obj && this.options(cjs(this.store.get('options') || {}, obj.options)), super.merge(obj, [
                ...omit,
                'loader',
                'options'
            ]);
        }
        toConfig() {
            let config = this.clean(this.entries() || {});
            return Object.defineProperties(config, {
                __useName: {
                    value: this.name
                },
                __ruleNames: {
                    value: this.parent && this.parent.names
                },
                __ruleTypes: {
                    value: this.parent && this.parent.ruleTypes
                }
            }), config;
        }
        constructor(parent, name){
            super(parent), this.name = name, this.extend([
                'loader',
                'options',
                'parallel'
            ]);
        }
    });
    function toArray(arr) {
        return Array.isArray(arr) ? arr : [
            arr
        ];
    }
    let Rule_Rule = Orderable(class extends ChainedMap {
        use(name) {
            return this.uses.getOrCompute(name, ()=>new Use(this, name));
        }
        rule(name) {
            return this.rules.getOrCompute(name, ()=>new Rule_Rule(this, name, 'rule'));
        }
        oneOf(name) {
            return this.oneOfs.getOrCompute(name, ()=>new Rule_Rule(this, name, 'oneOf'));
        }
        pre() {
            return this.enforce('pre');
        }
        post() {
            return this.enforce('post');
        }
        toConfig() {
            let config = this.clean(Object.assign(this.entries() || {}, {
                include: this.include.values(),
                exclude: this.exclude.values(),
                rules: this.rules.values().map((rule)=>rule.toConfig()),
                oneOf: this.oneOfs.values().map((oneOf)=>oneOf.toConfig()),
                use: this.uses.values().map((use)=>use.toConfig()),
                resolve: this.resolve.toConfig()
            }));
            return Object.defineProperties(config, {
                __ruleNames: {
                    value: this.names
                },
                __ruleTypes: {
                    value: this.ruleTypes
                }
            }), config;
        }
        merge(obj, omit = []) {
            return !omit.includes('include') && 'include' in obj && this.include.merge(toArray(obj.include)), !omit.includes('exclude') && 'exclude' in obj && this.exclude.merge(toArray(obj.exclude)), !omit.includes('use') && 'use' in obj && Object.keys(obj.use).forEach((name)=>this.use(name).merge(obj.use[name])), !omit.includes('rules') && 'rules' in obj && Object.keys(obj.rules).forEach((name)=>this.rule(name).merge(obj.rules[name])), !omit.includes('oneOf') && 'oneOf' in obj && Object.keys(obj.oneOf).forEach((name)=>this.oneOf(name).merge(obj.oneOf[name])), !omit.includes('resolve') && 'resolve' in obj && this.resolve.merge(obj.resolve), !omit.includes('test') && 'test' in obj && this.test(obj.test instanceof RegExp || 'function' == typeof obj.test ? obj.test : new RegExp(obj.test)), super.merge(obj, [
                ...omit,
                'include',
                'exclude',
                'use',
                'rules',
                'oneOf',
                'resolve',
                'test'
            ]);
        }
        constructor(parent, name, ruleType = 'rule'){
            super(parent), this.ruleName = name, this.names = [], this.ruleType = ruleType, this.ruleTypes = [];
            let rule = this;
            for(; rule instanceof Rule_Rule;)this.names.unshift(rule.ruleName), this.ruleTypes.unshift(rule.ruleType), rule = rule.parent;
            this.uses = new ChainedMap(this), this.include = new ChainedSet(this), this.exclude = new ChainedSet(this), this.rules = new ChainedMap(this), this.oneOfs = new ChainedMap(this), this.resolve = new Resolve_class(this), this.resolve.extend([
                'fullySpecified'
            ]), this.extend([
                'dependency',
                'enforce',
                'issuer',
                'issuerLayer',
                'layer',
                'mimetype',
                'parser',
                'generator',
                'resource',
                'resourceFragment',
                'resourceQuery',
                'sideEffects',
                'with',
                'test',
                'type'
            ]);
        }
    });
    class Module_class extends ChainedMap {
        defaultRule(name) {
            return this.defaultRules.getOrCompute(name, ()=>new Rule_Rule(this, name, 'defaultRule'));
        }
        rule(name) {
            return this.rules.getOrCompute(name, ()=>new Rule_Rule(this, name, 'rule'));
        }
        toConfig() {
            return this.clean(Object.assign(this.entries() || {}, {
                defaultRules: this.defaultRules.values().map((r)=>r.toConfig()),
                generator: this.generator.entries(),
                parser: this.parser.entries(),
                rules: this.rules.values().map((r)=>r.toConfig())
            }));
        }
        merge(obj, omit = []) {
            return !omit.includes('rule') && 'rule' in obj && Object.keys(obj.rule).forEach((name)=>this.rule(name).merge(obj.rule[name])), !omit.includes('defaultRule') && 'defaultRule' in obj && Object.keys(obj.defaultRule).forEach((name)=>this.defaultRule(name).merge(obj.defaultRule[name])), super.merge(obj, [
                'rule',
                'defaultRule'
            ]);
        }
        constructor(parent){
            super(parent), this.rules = new ChainedMap(this), this.defaultRules = new ChainedMap(this), this.generator = new ChainedMap(this), this.parser = new ChainedMap(this), this.extend([
                'noParse',
                'unsafeCache',
                'wrappedContextCritical',
                'exprContextRegExp',
                'wrappedContextRecursive',
                'strictExportPresence',
                'wrappedContextRegExp'
            ]);
        }
    }
    class Optimization_class extends ChainedMap {
        minimizer(name) {
            if (Array.isArray(name)) throw Error("optimization.minimizer() no longer supports being passed an array. Either switch to the new syntax (https://github.com/neutrinojs/webpack-chain#config-optimization-minimizers-adding) or downgrade to webpack-chain 4. If using Vue this likely means a Vue plugin has not yet been updated to support Vue CLI 4+.");
            return this.minimizers.getOrCompute(name, ()=>new src_Plugin(this, name, 'optimization.minimizer'));
        }
        toConfig() {
            return this.clean(Object.assign(this.entries() || {}, {
                splitChunks: this.splitChunks.entries(),
                minimizer: this.minimizers.values().map((plugin)=>plugin.toConfig())
            }));
        }
        merge(obj, omit = []) {
            return !omit.includes('minimizer') && 'minimizer' in obj && Object.keys(obj.minimizer).forEach((name)=>this.minimizer(name).merge(obj.minimizer[name])), super.merge(obj, [
                ...omit,
                'minimizer'
            ]);
        }
        constructor(parent){
            super(parent), this.minimizers = new ChainedMap(this), this.splitChunks = new ChainedValueMap(this), this.extend([
                'minimize',
                'runtimeChunk',
                'emitOnErrors',
                'moduleIds',
                'chunkIds',
                'nodeEnv',
                'mangleWasmImports',
                'removeAvailableModules',
                'removeEmptyChunks',
                'mergeDuplicateChunks',
                'flagIncludedChunks',
                'providedExports',
                'usedExports',
                'concatenateModules',
                'sideEffects',
                'portableRecords',
                'mangleExports',
                'innerGraph',
                'realContentHash',
                'avoidEntryIife'
            ]);
        }
    }
    class Performance_class extends ChainedValueMap {
        constructor(parent){
            super(parent), this.extend([
                'assetFilter',
                'hints',
                'maxAssetSize',
                'maxEntrypointSize'
            ]);
        }
    }
    let castArray = (value)=>Array.isArray(value) ? value : [
            value
        ];
    class src_class extends ChainedMap {
        static toString(config, { verbose = !1, configPrefix = 'config' } = {}) {
            return (0, dist.stringify)(config, (value, indent, stringify)=>{
                if (value && value.__pluginName) {
                    let prefix = `/* ${configPrefix}.${value.__pluginType}('${value.__pluginName}') */\n`, constructorExpression = value.__pluginPath ? `(require(${stringify(value.__pluginPath)}))` : value.__pluginConstructorName;
                    if (constructorExpression) {
                        let args = stringify(value.__pluginArgs).slice(1, -1);
                        return `${prefix}new ${constructorExpression}(${args})`;
                    }
                    return prefix + stringify(value.__pluginArgs && value.__pluginArgs.length ? {
                        args: value.__pluginArgs
                    } : {});
                }
                if (value && value.__ruleNames) {
                    let ruleTypes = value.__ruleTypes;
                    return `/* ${configPrefix}.module${value.__ruleNames.map((r, index)=>`.${ruleTypes ? ruleTypes[index] : 'rule'}('${r}')`).join('')}${value.__useName ? `.use('${value.__useName}')` : ""} */\n` + stringify(value);
                }
                return value && value.__expression ? value.__expression : 'function' == typeof value && !verbose && value.toString().length > 100 ? "function () { /* omitted long function */ }" : stringify(value);
            }, 2);
        }
        entry(name) {
            return this.entryPoints.getOrCompute(name, ()=>new ChainedSet(this));
        }
        plugin(name) {
            return this.plugins.getOrCompute(name, ()=>new src_Plugin(this, name));
        }
        toConfig() {
            let entryPoints = this.entryPoints.entries() || {}, baseConfig = this.entries() || {};
            return this.clean(Object.assign(baseConfig, {
                node: this.node.entries(),
                output: this.output.entries(),
                resolve: this.resolve.toConfig(),
                resolveLoader: this.resolveLoader.toConfig(),
                devServer: this.devServer.toConfig(),
                module: this.module.toConfig(),
                optimization: this.optimization.toConfig(),
                plugins: this.plugins.values().map((plugin)=>plugin.toConfig()),
                performance: this.performance.entries(),
                entry: ((entryPoints)=>{
                    let entry = Object.keys(entryPoints).reduce((acc, key)=>Object.assign(acc, {
                            [key]: entryPoints[key].values()
                        }), {}), formattedEntry = {};
                    for (let [entryName, entryValue] of Object.entries(entry)){
                        let entryImport = [], entryDescription = null;
                        for (let item of castArray(entryValue)){
                            if ('string' == typeof item) {
                                entryImport.push(item);
                                continue;
                            }
                            item.import && entryImport.push(...castArray(item.import)), entryDescription ? Object.assign(entryDescription, item) : entryDescription = item;
                        }
                        formattedEntry[entryName] = entryDescription ? {
                            ...entryDescription,
                            import: entryImport
                        } : entryImport;
                    }
                    return formattedEntry;
                })(entryPoints)
            }));
        }
        toString(options) {
            return this.constructor.toString(this.toConfig(), options);
        }
        merge(obj = {}, omit = []) {
            let omissions = [
                'node',
                'output',
                'resolve',
                'resolveLoader',
                'devServer',
                'optimization',
                'performance',
                'module'
            ];
            return !omit.includes('entry') && 'entry' in obj && Object.keys(obj.entry).forEach((name)=>this.entry(name).merge([].concat(obj.entry[name]))), !omit.includes('plugin') && 'plugin' in obj && Object.keys(obj.plugin).forEach((name)=>this.plugin(name).merge(obj.plugin[name])), omissions.forEach((key)=>{
                !omit.includes(key) && key in obj && this[key].merge(obj[key]);
            }), super.merge(obj, [
                ...omit,
                ...omissions,
                'entry',
                'plugin'
            ]);
        }
        constructor(){
            super(), this.entryPoints = new ChainedMap(this), this.output = new Output_class(this), this.module = new Module_class(this), this.resolve = new Resolve_class(this), this.resolveLoader = new ResolveLoader_class(this), this.optimization = new Optimization_class(this), this.plugins = new ChainedMap(this), this.devServer = new DevServer_class(this), this.performance = new Performance_class(this), this.node = new ChainedValueMap(this), this.extend([
                'context',
                'mode',
                'devtool',
                'target',
                'watch',
                'watchOptions',
                'externals',
                'externalsType',
                'externalsPresets',
                'stats',
                'experiments',
                'amd',
                'bail',
                'cache',
                'dependencies',
                'ignoreWarnings',
                'loader',
                'parallelism',
                'profile',
                'recordsPath',
                'recordsInputPath',
                'recordsOutputPath',
                'name',
                'infrastructureLogging',
                'snapshot',
                'lazyCompilation'
            ]);
        }
    }
    let constants_filename = (0, external_node_url_.fileURLToPath)(__rslib_import_meta_url__), constants_dirname = (0, external_node_path_.dirname)(constants_filename), isDeno = 'undefined' != typeof Deno, ROOT_DIST_DIR = 'dist', LOADER_PATH = (0, external_node_path_.join)(constants_dirname), STATIC_PATH = (0, external_node_path_.join)(constants_dirname, '../static'), COMPILED_PATH = (0, external_node_path_.join)(constants_dirname, '../compiled'), RSBUILD_OUTPUTS_PATH = '.rsbuild', DEFAULT_DEV_HOST = '0.0.0.0', DEFAULT_ASSET_PREFIX = '/', DEFAULT_WEB_BROWSERSLIST = [
        'chrome >= 87',
        'edge >= 88',
        'firefox >= 78',
        'safari >= 14'
    ], DEFAULT_BROWSERSLIST = {
        web: DEFAULT_WEB_BROWSERSLIST,
        'web-worker': DEFAULT_WEB_BROWSERSLIST,
        node: [
            'node >= 16'
        ]
    }, JS_REGEX = /\.(?:js|mjs|cjs|jsx)$/, SCRIPT_REGEX = /\.(?:js|jsx|mjs|cjs|ts|tsx|mts|cts)$/, CSS_REGEX = /\.css$/, RAW_QUERY_REGEX = /[?&]raw(?:&|=|$)/, INLINE_QUERY_REGEX = /[?&]inline(?:&|=|$)/, NODE_MODULES_REGEX = /[\\/]node_modules[\\/]/, PLUGIN_SWC_NAME = 'rsbuild:swc', PLUGIN_CSS_NAME = 'rsbuild:css', FONT_EXTENSIONS = [
        'woff',
        'woff2',
        'eot',
        'ttf',
        'otf',
        'ttc'
    ], IMAGE_EXTENSIONS = [
        'png',
        'jpg',
        'jpeg',
        'pjpeg',
        'pjp',
        'gif',
        'bmp',
        'webp',
        'ico',
        'apng',
        'avif',
        'tif',
        'tiff',
        'jfif',
        'cur'
    ], VIDEO_EXTENSIONS = [
        'mp4',
        'webm',
        'ogg',
        'mov'
    ], AUDIO_EXTENSIONS = [
        'mp3',
        'wav',
        'flac',
        'aac',
        'm4a',
        'opus'
    ], external_node_fs_namespaceObject = require("node:fs");
    var external_node_fs_default = __webpack_require__.n(external_node_fs_namespaceObject);
    let getCompiledPath = (packageName)=>(0, external_node_path_.join)(COMPILED_PATH, packageName, 'index.js'), ensureAbsolutePath = (base, filePath)=>(0, external_node_path_.isAbsolute)(filePath) ? filePath : (0, external_node_path_.join)(base, filePath), getPathnameFromUrl = (publicPath)=>{
        try {
            return publicPath ? new URL(publicPath).pathname : publicPath;
        } catch  {
            return publicPath;
        }
    }, dedupeNestedPaths = (paths)=>paths.sort((p1, p2)=>p2.length > p1.length ? -1 : 1).reduce((prev, curr)=>prev.find((p)=>curr.startsWith(p) || curr === p) ? prev : prev.concat(curr), []), toPosixPath = (filepath)=>'/' === external_node_path_.sep ? filepath : filepath.replace(/\\/g, '/'), isFileSync = (filePath)=>{
        try {
            return external_node_fs_default().statSync(filePath, {
                throwIfNoEntry: !1
            })?.isFile();
        } catch (_) {
            return !1;
        }
    }, findExists = (files)=>{
        for (let file of files)if (isFileSync(file)) return file;
        return !1;
    };
    async function pathExists(path) {
        return external_node_fs_default().promises.access(path).then(()=>!0).catch(()=>!1);
    }
    async function isFileExists(file) {
        return external_node_fs_default().promises.access(file, external_node_fs_default().constants.F_OK).then(()=>!0).catch(()=>!1);
    }
    async function fileExistsByCompilation({ inputFileSystem }, filePath) {
        return new Promise((resolve)=>{
            if (!inputFileSystem) return void resolve(!1);
            inputFileSystem.stat(filePath, (err, stats)=>{
                err ? resolve(!1) : resolve(!!stats?.isFile());
            });
        });
    }
    async function emptyDir(dir, keep = [], checkExists = !0) {
        if (!checkExists || await pathExists(dir)) try {
            let entries = await external_node_fs_default().promises.readdir(dir, {
                withFileTypes: !0
            });
            await Promise.all(entries.map(async (entry)=>{
                let fullPath = external_node_path_default().join(dir, entry.name);
                !keep.some((reg)=>reg.test(toPosixPath(fullPath))) && (entry.isDirectory() ? (await emptyDir(fullPath, keep, !1), keep.length || await external_node_fs_default().promises.rmdir(fullPath)) : await external_node_fs_default().promises.unlink(fullPath));
            }));
        } catch (err) {
            index_js_namespaceObject.logger.debug(`failed to empty dir: ${dir}`), index_js_namespaceObject.logger.debug(err);
        }
    }
    let formatFileName = (fileName)=>/:\d+:\d+/.test(fileName) ? `File: ${picocolors_index_js_default().cyan(fileName)}\n` : `File: ${picocolors_index_js_default().cyan(`${fileName}:1:1`)}\n`;
    function formatMessage(stats, verbose) {
        let message;
        if ('object' == typeof stats) {
            let fileName = function(stats) {
                if (stats.moduleIdentifier) {
                    let matched = stats.moduleIdentifier.match(/(?:!|^)([^!]+)$/);
                    if (matched) {
                        let fileName = matched.pop();
                        if (fileName) return formatFileName(fileName);
                    }
                }
                let file = stats.file || stats.moduleName;
                return file ? formatFileName(file) : '';
            }(stats), mainMessage = stats.message, details = verbose && stats.details ? `\nDetails: ${stats.details}\n` : '', stack = verbose && stats.stack ? `\n${stats.stack}` : '', moduleTrace = function(stats) {
                let traceStr = '';
                if (stats.moduleTrace) for (let trace of stats.moduleTrace)trace.originName && (traceStr += `\n @ ${trace.originName}`);
                return traceStr;
            }(stats);
            message = `${fileName}${mainMessage}${details}${stack}${moduleTrace}`;
        } else message = stats;
        let innerError = '-- inner error --';
        return !verbose && message.includes(innerError) && (message = message.split(innerError)[0]), (message = (message = ((message)=>{
            let getTips = (moduleName)=>{
                let tips = [
                    `Error: "${moduleName}" is a built-in Node.js module and cannot be imported in client-side code.\n`,
                    'Solution: Check if you need to import Node.js module.',
                    '  - If not needed, remove the import.',
                    `  - If needed, use "${picocolors_index_js_default().yellow('@rsbuild/plugin-node-polyfill')}" to polyfill it. (See ${picocolors_index_js_default().yellow('https://npmjs.com/package/@rsbuild/plugin-node-polyfill')})`
                ];
                return `${message}\n\n${picocolors_index_js_default().red(tips.join('\n'))}`;
            };
            if (message.includes('need an additional plugin to handle "node:" URIs')) return getTips('node:*');
            if (!message.includes("Can't resolve")) return message;
            let matchArray = message.match(/Can't resolve '(\w+)'/);
            if (!matchArray) return message;
            let moduleName = matchArray[1];
            return moduleName && [
                'assert',
                'buffer',
                'child_process',
                'cluster',
                'console',
                'constants',
                'crypto',
                'dgram',
                'dns',
                'domain',
                'events',
                'fs',
                'http',
                'https',
                'module',
                'net',
                'os',
                'path',
                'punycode',
                'process',
                'querystring',
                'readline',
                'repl',
                'stream',
                '_stream_duplex',
                '_stream_passthrough',
                '_stream_readable',
                '_stream_transform',
                '_stream_writable',
                'string_decoder',
                'sys',
                'timers',
                'tls',
                'tty',
                'url',
                'util',
                'vm',
                'zlib'
            ].includes(moduleName) ? getTips(moduleName) : message;
        })(message = function(message) {
            let hint = 'You may need an appropriate loader to handle this file type.';
            if (-1 === message.indexOf(hint)) return message;
            let createPluginHint = (packageName, keyword)=>`To enable support for ${keyword}, use "${picocolors_index_js_default().yellow(`@rsbuild/plugin-${packageName}`)}" ${picocolors_index_js_default().dim(`(https://npmjs.com/package/@rsbuild/plugin-${packageName})`)}.`;
            for (let plugin of [
                {
                    test: /File: .+\.s(c|a)ss/,
                    hint: createPluginHint('sass', 'Sass')
                },
                {
                    test: /File: .+\.less/,
                    hint: createPluginHint('less', 'Less')
                },
                {
                    test: /File: .+\.styl(us)?/,
                    hint: createPluginHint('stylus', 'Stylus')
                },
                {
                    test: /File: .+\.vue?/,
                    hint: createPluginHint('vue', 'Vue')
                },
                {
                    test: /File: .+\.svelte?/,
                    hint: createPluginHint('svelte', 'Svelte')
                },
                {
                    test: /File: .+\.mdx/,
                    hint: createPluginHint('mdx', 'MDX')
                },
                {
                    test: /File: .+\.toml/,
                    hint: createPluginHint('toml', 'TOML')
                },
                {
                    test: /File: .+\.yaml/,
                    hint: createPluginHint('yaml', 'YAML')
                }
            ])if (plugin.test.test(message)) return message.replace(hint, plugin.hint);
            return message;
        }(message))).split('\n').filter((line, index, arr)=>0 === index || '' !== line.trim() || line.trim() !== arr[index - 1].trim()).join('\n')).trim();
    }
    function formatStatsMessages(stats, verbose) {
        let formattedErrors = stats.errors?.map((error)=>formatMessage(error, verbose)) || [];
        return {
            errors: formattedErrors,
            warnings: stats.warnings?.map((warning)=>formatMessage(warning, verbose)) || []
        };
    }
    let getAllStatsErrors = (statsData)=>statsData.errorsCount && statsData.errors?.length === 0 ? statsData.children?.reduce((errors, curr)=>errors.concat(curr.errors || []), []) : statsData.errors, getAssetsFromStats = (stats)=>stats.toJson({
            all: !1,
            assets: !0,
            cachedAssets: !0,
            groupAssetsByInfo: !1,
            groupAssetsByPath: !1,
            groupAssetsByChunk: !1,
            groupAssetsByExtension: !1,
            groupAssetsByEmitStatus: !1
        }).assets || [], getAllStatsWarnings = (statsData)=>statsData.warningsCount && statsData.warnings?.length === 0 ? statsData.children?.reduce((warnings, curr)=>warnings.concat(curr.warnings || []), []) : statsData.warnings;
    function getStatsOptions(compiler) {
        if (helpers_isMultiCompiler(compiler)) return {
            children: compiler.compilers.map((compiler)=>compiler.options ? compiler.options.stats : void 0)
        };
        let { stats } = compiler.options;
        return 'string' == typeof stats ? {
            preset: stats
        } : 'object' == typeof stats ? stats : {};
    }
    function formatStats(statsData, hasErrors) {
        let verbose = 'verbose' === index_js_namespaceObject.logger.level;
        if (hasErrors) {
            let { errors } = formatStatsMessages({
                errors: getAllStatsErrors(statsData),
                warnings: []
            }, verbose);
            return {
                message: function(errors) {
                    let title = picocolors_index_js_default().bold(picocolors_index_js_default().red(errors.length > 1 ? 'Build errors: ' : 'Build error: '));
                    if (!errors.length) return `${title}\n${picocolors_index_js_default().yellow("For more details, please set 'stats.errors: true' ")}`;
                    let text = `${errors.join('\n\n')}\n`;
                    return `${title}\n${text}`;
                }(errors),
                level: 'error'
            };
        }
        let { warnings } = formatStatsMessages({
            errors: [],
            warnings: getAllStatsWarnings(statsData)
        }, verbose);
        if (warnings.length) {
            let title = picocolors_index_js_default().bold(picocolors_index_js_default().yellow(warnings.length > 1 ? 'Build warnings: \n' : 'Build warning: \n'));
            return {
                message: `${title}${warnings.join('\n\n')}\n`,
                level: 'warning'
            };
        }
        return {};
    }
    let rspackMinVersion = '1.5.0', setNodeEnv = (env)=>{
        process.env.NODE_ENV = env;
    }, isFunction = (func)=>'function' == typeof func, isObject = (obj)=>'[object Object]' === Object.prototype.toString.call(obj), isPlainObject = (obj)=>null !== obj && 'object' == typeof obj && Object.getPrototypeOf(obj) === Object.prototype, helpers_castArray = (arr)=>void 0 === arr ? [] : Array.isArray(arr) ? arr : [
            arr
        ], cloneDeep = (value)=>null == value ? value : cjs_default()({}, value, {
            isMergeableObject: isPlainObject
        }), removeLeadingSlash = (s)=>s.replace(/^\/+/, ''), addTrailingSlash = (s)=>s.endsWith('/') ? s : `${s}/`, formatPublicPath = (publicPath, withSlash = !0)=>'auto' === publicPath ? publicPath : withSlash ? addTrailingSlash(publicPath) : publicPath.replace(/\/+$/, ''), getPublicPathFromChain = (chain, withSlash = !0)=>{
        let publicPath = chain.output.get('publicPath');
        return 'string' == typeof publicPath ? formatPublicPath(publicPath, withSlash) : formatPublicPath(DEFAULT_ASSET_PREFIX, withSlash);
    }, getPublicPathFromCompiler = (compiler)=>{
        let { publicPath } = compiler.options.output;
        return 'string' == typeof publicPath ? 'auto' === publicPath ? '' : publicPath.endsWith('/') ? publicPath : `${publicPath}/` : DEFAULT_ASSET_PREFIX;
    }, urlJoin = (base, path)=>{
        let [urlProtocol, baseUrl] = base.split('://');
        return `${urlProtocol}://${external_node_path_.posix.join(baseUrl, path)}`;
    }, canParse = (url)=>{
        try {
            return new external_node_url_.URL(url), !0;
        } catch  {
            return !1;
        }
    }, ensureAssetPrefix = (url, assetPrefix = DEFAULT_ASSET_PREFIX)=>url.startsWith('//') || canParse(url) || 'auto' === assetPrefix || 'function' == typeof assetPrefix ? url : assetPrefix.startsWith('http') ? urlJoin(assetPrefix, url) : assetPrefix.startsWith('//') ? urlJoin(`https:${assetPrefix}`, url).replace('https:', '') : external_node_path_.posix.join(assetPrefix, url);
    function getFilename(config, type, isProd, isServer) {
        let { filename, filenameHash } = config.output, defaultHash = '[contenthash:8]', getHash = ()=>'string' == typeof filenameHash ? filenameHash ? `.[${filenameHash}]` : '' : filenameHash ? `.${defaultHash}` : '';
        switch(type){
            case 'js':
                return filename.js ?? `[name]${isProd && !isServer ? getHash() : ''}.js`;
            case 'css':
                return filename.css ?? `[name]${isProd ? getHash() : ''}.css`;
            case 'svg':
                return filename.svg ?? `[name]${getHash()}.svg`;
            case 'font':
                return filename.font ?? `[name]${getHash()}[ext]`;
            case 'image':
                return filename.image ?? `[name]${getHash()}[ext]`;
            case 'media':
                return filename.media ?? `[name]${getHash()}[ext]`;
            case 'assets':
                return filename.assets ?? `[name]${getHash()}[ext]`;
            case 'wasm':
                {
                    let hash = 'string' == typeof filenameHash ? `[${filenameHash}]` : defaultHash;
                    return filename.wasm ?? `${hash}.module.wasm`;
                }
            case 'html':
                if (filename.html) return filename.html;
                return 'flat' === config.html.outputStructure ? '[name].html' : '[name]/index.html';
            default:
                throw Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} unknown key ${picocolors_index_js_default().yellow(type)} in ${picocolors_index_js_default().yellow('output.filename')}`);
        }
    }
    let applyToCompiler = (compiler, apply)=>{
        helpers_isMultiCompiler(compiler) ? compiler.compilers.forEach(apply) : apply(compiler, 0);
    }, upperFirst = (str)=>str ? str.charAt(0).toUpperCase() + str.slice(1) : '', isURL = (str)=>str.startsWith('http') || str.startsWith('//:'), createVirtualModule = (content)=>`data:text/javascript,${content}`, helpers_isMultiCompiler = (compiler)=>'compilers' in compiler && Array.isArray(compiler.compilers);
    function pick(obj, keys) {
        return keys.reduce((ret, key)=>(void 0 !== obj[key] && (ret[key] = obj[key]), ret), {});
    }
    let prettyTime = (seconds)=>{
        let format = (time)=>picocolors_index_js_default().bold(time);
        if (seconds < 10) {
            let digits = seconds >= 0.01 ? 2 : 3;
            return `${format(seconds.toFixed(digits))} s`;
        }
        if (seconds < 60) return `${format(seconds.toFixed(1))} s`;
        let minutes = Math.floor(seconds / 60), minutesLabel = `${format(minutes.toFixed(0))} m`, remainingSeconds = seconds % 60;
        if (0 === remainingSeconds) return minutesLabel;
        let secondsLabel = `${format(remainingSeconds.toFixed(+(remainingSeconds % 1 != 0)))} s`;
        return `${minutesLabel} ${secondsLabel}`;
    }, isTTY = (type = 'stdout')=>('stdin' === type ? process.stdin.isTTY : process.stdout.isTTY) && !process.env.CI, addCompilationError = (compilation, message)=>{
        compilation.errors.push(new compilation.compiler.webpack.WebpackError(message));
    };
    async function helpers_hash(data) {
        let crypto = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:crypto"));
        return crypto.hash ? crypto.hash('sha256', data, 'hex').slice(0, 16) : crypto.createHash('sha256').update(data).digest('hex').slice(0, 16);
    }
    let isDebug = ()=>{
        if (!process.env.DEBUG) return !1;
        let values = process.env.DEBUG.toLocaleLowerCase().split(',');
        return [
            'rsbuild',
            'builder',
            '*'
        ].some((key)=>values.includes(key));
    };
    isDebug() && (index_js_namespaceObject.logger.level = 'verbose'), index_js_namespaceObject.logger.override({
        debug: (message, ...args)=>{
            if ('verbose' !== index_js_namespaceObject.logger.level) return;
            let time = picocolors_index_js_default().gray(function() {
                let now = new Date(), hours = String(now.getHours()).padStart(2, '0'), minutes = String(now.getMinutes()).padStart(2, '0'), seconds = String(now.getSeconds()).padStart(2, '0');
                return `${hours}:${minutes}:${seconds}`;
            }());
            console.log(`  ${picocolors_index_js_default().magenta('rsbuild')} ${time} ${message}`, ...args);
        }
    });
    let external_events_namespaceObject = require("events");
    function toArr(any) {
        return null == any ? [] : Array.isArray(any) ? any : [
            any
        ];
    }
    let removeBrackets = (v)=>v.replace(/[<[].+/, "").trim(), findLongest = (arr)=>arr.sort((a, b)=>a.length > b.length ? -1 : 1)[0], padRight = (str, length)=>str.length >= length ? str : `${str}${" ".repeat(length - str.length)}`, setDotProp = (obj, keys, val)=>{
        let x, i = 0, length = keys.length, t = obj;
        for(; i < length; ++i)x = t[keys[i]], t = t[keys[i]] = i === length - 1 ? val : null != x ? x : ~keys[i + 1].indexOf(".") || !(+keys[i + 1] > -1) ? {} : [];
    }, setByType = (obj, transforms)=>{
        for (let key of Object.keys(transforms)){
            let transform = transforms[key];
            transform.shouldTransform && (obj[key] = Array.prototype.concat.call([], obj[key]), "function" == typeof transform.transformFunction && (obj[key] = obj[key].map(transform.transformFunction)));
        }
    }, camelcaseOptionName = (name)=>name.split(".").map((v, i)=>0 === i ? v.replace(/([a-z])-([a-z])/g, (_, p1, p2)=>p1 + p2.toUpperCase()) : v).join(".");
    class CACError extends Error {
        constructor(message){
            super(message), this.name = this.constructor.name, "function" == typeof Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = Error(message).stack;
        }
    }
    class Option {
        constructor(rawName, description, config){
            this.rawName = rawName, this.description = description, this.config = Object.assign({}, config), rawName = rawName.replace(/\.\*/g, ""), this.negated = !1, this.names = removeBrackets(rawName).split(",").map((v)=>{
                let name = v.trim().replace(/^-{1,2}/, "");
                return name.startsWith("no-") && (this.negated = !0, name = name.replace(/^no-/, "")), camelcaseOptionName(name);
            }).sort((a, b)=>a.length > b.length ? 1 : -1), this.name = this.names[this.names.length - 1], this.negated && null == this.config.default && (this.config.default = !0), rawName.includes("<") ? this.required = !0 : rawName.includes("[") ? this.required = !1 : this.isBoolean = !0;
        }
    }
    let processArgs = process.argv, platformInfo = `${process.platform}-${process.arch} node-${process.version}`;
    class Command {
        constructor(rawName, description, config = {}, cli){
            this.rawName = rawName, this.description = description, this.config = config, this.cli = cli, this.options = [], this.aliasNames = [], this.name = removeBrackets(rawName), this.args = ((v)=>{
                let angledMatch, squareMatch, ANGLED_BRACKET_RE_GLOBAL = /<([^>]+)>/g, SQUARE_BRACKET_RE_GLOBAL = /\[([^\]]+)\]/g, res = [], parse = (match)=>{
                    let variadic = !1, value = match[1];
                    return value.startsWith("...") && (value = value.slice(3), variadic = !0), {
                        required: match[0].startsWith("<"),
                        value,
                        variadic
                    };
                };
                for(; angledMatch = ANGLED_BRACKET_RE_GLOBAL.exec(v);)res.push(parse(angledMatch));
                for(; squareMatch = SQUARE_BRACKET_RE_GLOBAL.exec(v);)res.push(parse(squareMatch));
                return res;
            })(rawName), this.examples = [];
        }
        usage(text) {
            return this.usageText = text, this;
        }
        allowUnknownOptions() {
            return this.config.allowUnknownOptions = !0, this;
        }
        ignoreOptionDefaultValue() {
            return this.config.ignoreOptionDefaultValue = !0, this;
        }
        version(version, customFlags = "-v, --version") {
            return this.versionNumber = version, this.option(customFlags, "Display version number"), this;
        }
        example(example) {
            return this.examples.push(example), this;
        }
        option(rawName, description, config) {
            let option = new Option(rawName, description, config);
            return this.options.push(option), this;
        }
        alias(name) {
            return this.aliasNames.push(name), this;
        }
        action(callback) {
            return this.commandAction = callback, this;
        }
        isMatched(name) {
            return this.name === name || this.aliasNames.includes(name);
        }
        get isDefaultCommand() {
            return "" === this.name || this.aliasNames.includes("!");
        }
        get isGlobalCommand() {
            return this instanceof GlobalCommand;
        }
        hasOption(name) {
            return name = name.split(".")[0], this.options.find((option)=>option.names.includes(name));
        }
        outputHelp() {
            let { name, commands } = this.cli, { versionNumber, options: globalOptions, helpCallback } = this.cli.globalCommand, sections = [
                {
                    body: `${name}${versionNumber ? `/${versionNumber}` : ""}`
                }
            ];
            if (sections.push({
                title: "Usage",
                body: `  $ ${name} ${this.usageText || this.rawName}`
            }), (this.isGlobalCommand || this.isDefaultCommand) && commands.length > 0) {
                let longestCommandName = findLongest(commands.map((command)=>command.rawName));
                sections.push({
                    title: "Commands",
                    body: commands.map((command)=>`  ${padRight(command.rawName, longestCommandName.length)}  ${command.description}`).join("\n")
                }), sections.push({
                    title: "For more info, run any command with the `--help` flag",
                    body: commands.map((command)=>`  $ ${name}${"" === command.name ? "" : ` ${command.name}`} --help`).join("\n")
                });
            }
            let options = this.isGlobalCommand ? globalOptions : [
                ...this.options,
                ...globalOptions || []
            ];
            if (this.isGlobalCommand || this.isDefaultCommand || (options = options.filter((option)=>"version" !== option.name)), options.length > 0) {
                let longestOptionName = findLongest(options.map((option)=>option.rawName));
                sections.push({
                    title: "Options",
                    body: options.map((option)=>`  ${padRight(option.rawName, longestOptionName.length)}  ${option.description} ${void 0 === option.config.default ? "" : `(default: ${option.config.default})`}`).join("\n")
                });
            }
            this.examples.length > 0 && sections.push({
                title: "Examples",
                body: this.examples.map((example)=>"function" == typeof example ? example(name) : example).join("\n")
            }), helpCallback && (sections = helpCallback(sections) || sections), console.log(sections.map((section)=>section.title ? `${section.title}:
${section.body}` : section.body).join("\n\n"));
        }
        outputVersion() {
            let { name } = this.cli, { versionNumber } = this.cli.globalCommand;
            versionNumber && console.log(`${name}/${versionNumber} ${platformInfo}`);
        }
        checkRequiredArgs() {
            let minimalArgsCount = this.args.filter((arg)=>arg.required).length;
            if (this.cli.args.length < minimalArgsCount) throw new CACError(`missing required args for command \`${this.rawName}\``);
        }
        checkUnknownOptions() {
            let { options, globalCommand } = this.cli;
            if (!this.config.allowUnknownOptions) {
                for (let name of Object.keys(options))if ("--" !== name && !this.hasOption(name) && !globalCommand.hasOption(name)) throw new CACError(`Unknown option \`${name.length > 1 ? `--${name}` : `-${name}`}\``);
            }
        }
        checkOptionValue() {
            let { options: parsedOptions, globalCommand } = this.cli, options = [
                ...globalCommand.options,
                ...this.options
            ];
            for (let option of options){
                let value = parsedOptions[option.name.split(".")[0]];
                if (option.required) {
                    let hasNegated = options.some((o)=>o.negated && o.names.includes(option.name));
                    if (!0 === value || !1 === value && !hasNegated) throw new CACError(`option \`${option.rawName}\` value is missing`);
                }
            }
        }
    }
    class GlobalCommand extends Command {
        constructor(cli){
            super("@@global@@", "", {}, cli);
        }
    }
    var __assign = Object.assign;
    class CAC extends external_events_namespaceObject.EventEmitter {
        constructor(name = ""){
            super(), this.name = name, this.commands = [], this.rawArgs = [], this.args = [], this.options = {}, this.globalCommand = new GlobalCommand(this), this.globalCommand.usage("<command> [options]");
        }
        usage(text) {
            return this.globalCommand.usage(text), this;
        }
        command(rawName, description, config) {
            let command = new Command(rawName, description || "", config, this);
            return command.globalCommand = this.globalCommand, this.commands.push(command), command;
        }
        option(rawName, description, config) {
            return this.globalCommand.option(rawName, description, config), this;
        }
        help(callback) {
            return this.globalCommand.option("-h, --help", "Display this message"), this.globalCommand.helpCallback = callback, this.showHelpOnExit = !0, this;
        }
        version(version, customFlags = "-v, --version") {
            return this.globalCommand.version(version, customFlags), this.showVersionOnExit = !0, this;
        }
        example(example) {
            return this.globalCommand.example(example), this;
        }
        outputHelp() {
            this.matchedCommand ? this.matchedCommand.outputHelp() : this.globalCommand.outputHelp();
        }
        outputVersion() {
            this.globalCommand.outputVersion();
        }
        setParsedInfo({ args, options }, matchedCommand, matchedCommandName) {
            return this.args = args, this.options = options, matchedCommand && (this.matchedCommand = matchedCommand), matchedCommandName && (this.matchedCommandName = matchedCommandName), this;
        }
        unsetMatchedCommand() {
            this.matchedCommand = void 0, this.matchedCommandName = void 0;
        }
        parse(argv = processArgs, { run = !0 } = {}) {
            this.rawArgs = argv, this.name || (this.name = argv[1] ? ((input)=>{
                let m = /([^\\\/]+)$/.exec(input);
                return m ? m[1] : "";
            })(argv[1]) : "cli");
            let shouldParse = !0;
            for (let command of this.commands){
                let parsed = this.mri(argv.slice(2), command), commandName = parsed.args[0];
                if (command.isMatched(commandName)) {
                    shouldParse = !1;
                    let parsedInfo = __assign(__assign({}, parsed), {
                        args: parsed.args.slice(1)
                    });
                    this.setParsedInfo(parsedInfo, command, commandName), this.emit(`command:${commandName}`, command);
                }
            }
            if (shouldParse) {
                for (let command of this.commands)if ("" === command.name) {
                    shouldParse = !1;
                    let parsed = this.mri(argv.slice(2), command);
                    this.setParsedInfo(parsed, command), this.emit("command:!", command);
                }
            }
            if (shouldParse) {
                let parsed = this.mri(argv.slice(2));
                this.setParsedInfo(parsed);
            }
            this.options.help && this.showHelpOnExit && (this.outputHelp(), run = !1, this.unsetMatchedCommand()), this.options.version && this.showVersionOnExit && null == this.matchedCommandName && (this.outputVersion(), run = !1, this.unsetMatchedCommand());
            let parsedArgv = {
                args: this.args,
                options: this.options
            };
            return run && this.runMatchedCommand(), !this.matchedCommand && this.args[0] && this.emit("command:*"), parsedArgv;
        }
        mri(argv, command) {
            let cliOptions = [
                ...this.globalCommand.options,
                ...command ? command.options : []
            ], mriOptions = ((options)=>{
                let result = {
                    alias: {},
                    boolean: []
                };
                for (let [index, option] of options.entries())option.names.length > 1 && (result.alias[option.names[0]] = option.names.slice(1)), option.isBoolean && (option.negated && options.some((o, i)=>i !== index && o.names.some((name)=>option.names.includes(name)) && "boolean" == typeof o.required) || result.boolean.push(option.names[0]));
                return result;
            })(cliOptions), argsAfterDoubleDashes = [], doubleDashesIndex = argv.indexOf("--");
            doubleDashesIndex > -1 && (argsAfterDoubleDashes = argv.slice(doubleDashesIndex + 1), argv = argv.slice(0, doubleDashesIndex));
            let parsed = function(args, opts) {
                opts = opts || {};
                var k, arr, arg, name, val, out = {
                    _: []
                }, i = 0, j = 0, idx = 0, len = (args = args || []).length;
                let alibi = void 0 !== opts.alias, strict = void 0 !== opts.unknown, defaults = void 0 !== opts.default;
                if (opts.alias = opts.alias || {}, opts.string = toArr(opts.string), opts.boolean = toArr(opts.boolean), alibi) for(k in opts.alias)for(i = 0, arr = opts.alias[k] = toArr(opts.alias[k]); i < arr.length; i++)(opts.alias[arr[i]] = arr.concat(k)).splice(i, 1);
                for(i = opts.boolean.length; i-- > 0;)for(j = (arr = opts.alias[opts.boolean[i]] || []).length; j-- > 0;)opts.boolean.push(arr[j]);
                for(i = opts.string.length; i-- > 0;)for(j = (arr = opts.alias[opts.string[i]] || []).length; j-- > 0;)opts.string.push(arr[j]);
                if (defaults) {
                    for(k in opts.default)if (name = typeof opts.default[k], arr = opts.alias[k] = opts.alias[k] || [], void 0 !== opts[name]) for(opts[name].push(k), i = 0; i < arr.length; i++)opts[name].push(arr[i]);
                }
                let keys = strict ? Object.keys(opts.alias) : [];
                for(i = 0; i < len; i++){
                    if ('--' === (arg = args[i])) {
                        out._ = out._.concat(args.slice(++i));
                        break;
                    }
                    for(j = 0; j < arg.length && 45 === arg.charCodeAt(j); j++);
                    if (0 === j) out._.push(arg);
                    else if ('no-' === arg.substring(j, j + 3)) {
                        if (name = arg.substring(j + 3), strict && !~keys.indexOf(name)) return opts.unknown(arg);
                        out[name] = !1;
                    } else {
                        for(idx = j + 1; idx < arg.length && 61 !== arg.charCodeAt(idx); idx++);
                        for(name = arg.substring(j, idx), val = arg.substring(++idx) || i + 1 === len || 45 === ('' + args[i + 1]).charCodeAt(0) || args[++i], arr = 2 === j ? [
                            name
                        ] : name, idx = 0; idx < arr.length; idx++){
                            if (name = arr[idx], strict && !~keys.indexOf(name)) return opts.unknown('-'.repeat(j) + name);
                            !function(out, key, val, opts) {
                                var x, old = out[key], nxt = ~opts.string.indexOf(key) ? null == val || !0 === val ? '' : String(val) : 'boolean' == typeof val ? val : ~opts.boolean.indexOf(key) ? 'false' !== val && ('true' === val || (out._.push(0 * (x = +val) == 0 ? x : val), !!val)) : 0 * (x = +val) == 0 ? x : val;
                                out[key] = null == old ? nxt : Array.isArray(old) ? old.concat(nxt) : [
                                    old,
                                    nxt
                                ];
                            }(out, name, idx + 1 < arr.length || val, opts);
                        }
                    }
                }
                if (defaults) for(k in opts.default)void 0 === out[k] && (out[k] = opts.default[k]);
                if (alibi) for(k in out)for(arr = opts.alias[k] || []; arr.length > 0;)out[arr.shift()] = out[k];
                return out;
            }(argv, mriOptions), args = (parsed = Object.keys(parsed).reduce((res, name)=>__assign(__assign({}, res), {
                    [camelcaseOptionName(name)]: parsed[name]
                }), {
                _: []
            }))._, options = {
                "--": argsAfterDoubleDashes
            }, ignoreDefault = command && command.config.ignoreOptionDefaultValue ? command.config.ignoreOptionDefaultValue : this.globalCommand.config.ignoreOptionDefaultValue, transforms = Object.create(null);
            for (let cliOption of cliOptions){
                if (!ignoreDefault && void 0 !== cliOption.config.default) for (let name of cliOption.names)options[name] = cliOption.config.default;
                Array.isArray(cliOption.config.type) && void 0 === transforms[cliOption.name] && (transforms[cliOption.name] = Object.create(null), transforms[cliOption.name].shouldTransform = !0, transforms[cliOption.name].transformFunction = cliOption.config.type[0]);
            }
            for (let key of Object.keys(parsed))"_" !== key && (setDotProp(options, key.split("."), parsed[key]), setByType(options, transforms));
            return {
                args,
                options
            };
        }
        runMatchedCommand() {
            let { args, options, matchedCommand: command } = this;
            if (!command || !command.commandAction) return;
            command.checkUnknownOptions(), command.checkOptionValue(), command.checkRequiredArgs();
            let actionArgs = [];
            return command.args.forEach((arg, index)=>{
                arg.variadic ? actionArgs.push(args.slice(index)) : actionArgs.push(args[index]);
            }), actionArgs.push(options), command.commandAction.apply(this, actionArgs);
        }
    }
    function createEnvironmentAsyncHook() {
        let preGroup = [], postGroup = [], defaultGroup = [], tapEnvironment = ({ environment, handler: cb })=>{
            isFunction(cb) ? defaultGroup.push({
                environment,
                handler: cb
            }) : 'pre' === cb.order ? preGroup.push({
                environment,
                handler: cb.handler
            }) : 'post' === cb.order ? postGroup.push({
                environment,
                handler: cb.handler
            }) : defaultGroup.push({
                environment,
                handler: cb.handler
            });
        };
        return {
            tapEnvironment,
            tap: (handler)=>{
                tapEnvironment({
                    handler
                });
            },
            callChain: async ({ environment, args: params, afterEach })=>{
                for (let callback of [
                    ...preGroup,
                    ...defaultGroup,
                    ...postGroup
                ]){
                    if (environment && callback.environment && callback.environment !== environment) continue;
                    let result = await callback.handler(...params);
                    void 0 !== result && (params[0] = result), afterEach && afterEach(params);
                }
                return params;
            },
            callBatch: async ({ environment, args: params })=>{
                let results = [];
                for (let callback of [
                    ...preGroup,
                    ...defaultGroup,
                    ...postGroup
                ]){
                    if (environment && callback.environment && callback.environment !== environment) continue;
                    let result = await callback.handler(...params);
                    results.push(result);
                }
                return results;
            }
        };
    }
    function createAsyncHook() {
        let preGroup = [], postGroup = [], defaultGroup = [];
        return {
            tap: (cb)=>{
                isFunction(cb) ? defaultGroup.push(cb) : 'pre' === cb.order ? preGroup.push(cb.handler) : 'post' === cb.order ? postGroup.push(cb.handler) : defaultGroup.push(cb.handler);
            },
            callChain: async (...params)=>{
                for (let callback of [
                    ...preGroup,
                    ...defaultGroup,
                    ...postGroup
                ]){
                    let result = await callback(...params);
                    void 0 !== result && (params[0] = result);
                }
                return params;
            },
            callBatch: async (...params)=>{
                let results = [];
                for (let callback of [
                    ...preGroup,
                    ...defaultGroup,
                    ...postGroup
                ]){
                    let result = await callback(...params);
                    results.push(result);
                }
                return results;
            }
        };
    }
    let onBeforeCompile = ({ compiler, beforeCompile, beforeEnvironmentCompiler, isWatch })=>{
        let name = 'rsbuild:beforeCompile';
        if (helpers_isMultiCompiler(compiler)) {
            let waitBeforeCompileDone, { compilers } = compiler, doneCompilers = 0;
            for(let index = 0; index < compilers.length; index++){
                let compiler = compilers[index], compilerDone = !1;
                (isWatch ? compiler.hooks.watchRun : compiler.hooks.run).tapPromise(name, async ()=>{
                    !compilerDone && (compilerDone = !0, doneCompilers++), waitBeforeCompileDone || (waitBeforeCompileDone = beforeCompile?.()), await waitBeforeCompileDone, await beforeEnvironmentCompiler(index);
                }), compiler.hooks.invalid.tap(name, ()=>{
                    compilerDone && (compilerDone = !1, doneCompilers--), doneCompilers <= 0 && (waitBeforeCompileDone = void 0);
                });
            }
        } else (isWatch ? compiler.hooks.watchRun : compiler.hooks.run).tapPromise(name, async ()=>{
            await beforeCompile?.(), await beforeEnvironmentCompiler(0);
        });
    }, onCompileDone = ({ compiler, onDone, onEnvironmentDone, MultiStatsCtor })=>{
        if (helpers_isMultiCompiler(compiler)) {
            let { compilers } = compiler, compilerStats = [], doneCompilers = 0;
            for(let index = 0; index < compilers.length; index++){
                let compiler = compilers[index], compilerIndex = index, compilerDone = !1;
                compiler.hooks.done.tapPromise('rsbuild:done', async (stats)=>{
                    !compilerDone && (compilerDone = !0, doneCompilers++), compilerStats[compilerIndex] = stats;
                    let lastCompilerDone = doneCompilers === compilers.length;
                    await onEnvironmentDone(index, stats), lastCompilerDone && await onDone(new MultiStatsCtor(compilerStats));
                }), compiler.hooks.invalid.tap('rsbuild:done', ()=>{
                    compilerDone && (compilerDone = !1, doneCompilers--);
                });
            }
        } else compiler.hooks.done.tapPromise('rsbuild:done', async (stats)=>{
            await onEnvironmentDone(0, stats), await onDone(stats);
        });
    }, registerBuildHook = ({ context, isWatch, compiler, bundlerConfigs, MultiStatsCtor })=>{
        let isFirstCompile = !0, environmentList = Object.values(context.environments).reduce((prev, curr)=>(prev[curr.index] = curr, prev), []), onDone = async (stats)=>{
            let p = context.hooks.onAfterBuild.callBatch({
                isFirstCompile,
                stats,
                environments: context.environments,
                isWatch
            });
            isFirstCompile = !1, await p;
        }, onEnvironmentDone = async (buildIndex, stats)=>{
            await context.hooks.onAfterEnvironmentCompile.callBatch({
                environment: environmentList[buildIndex].name,
                args: [
                    {
                        isFirstCompile,
                        stats,
                        environment: environmentList[buildIndex],
                        isWatch
                    }
                ]
            });
        };
        onBeforeCompile({
            compiler,
            beforeCompile: async ()=>context.hooks.onBeforeBuild.callBatch({
                    bundlerConfigs,
                    environments: context.environments,
                    isWatch,
                    isFirstCompile
                }),
            beforeEnvironmentCompiler: async (buildIndex)=>context.hooks.onBeforeEnvironmentCompile.callBatch({
                    environment: environmentList[buildIndex].name,
                    args: [
                        {
                            bundlerConfig: bundlerConfigs?.[buildIndex],
                            environment: environmentList[buildIndex],
                            isWatch,
                            isFirstCompile
                        }
                    ]
                }),
            isWatch
        }), onCompileDone({
            compiler,
            onDone,
            onEnvironmentDone,
            MultiStatsCtor
        });
    }, registerDevHook = ({ context, compiler, bundlerConfigs, MultiStatsCtor })=>{
        let isFirstCompile = !0, environmentList = Object.values(context.environments).reduce((prev, curr)=>(prev[curr.index] = curr, prev), []), onDone = async (stats)=>{
            let p = context.hooks.onAfterDevCompile.callBatch({
                isFirstCompile,
                stats,
                environments: context.environments
            });
            isFirstCompile = !1, await p;
        }, onEnvironmentDone = async (buildIndex, stats)=>{
            await context.hooks.onAfterEnvironmentCompile.callBatch({
                environment: environmentList[buildIndex].name,
                args: [
                    {
                        isFirstCompile,
                        stats,
                        environment: environmentList[buildIndex],
                        isWatch: !0
                    }
                ]
            });
        };
        onBeforeCompile({
            compiler,
            beforeEnvironmentCompiler: async (buildIndex)=>context.hooks.onBeforeEnvironmentCompile.callBatch({
                    environment: environmentList[buildIndex].name,
                    args: [
                        {
                            bundlerConfig: bundlerConfigs?.[buildIndex],
                            environment: environmentList[buildIndex],
                            isWatch: !0,
                            isFirstCompile
                        }
                    ]
                }),
            beforeCompile: async ()=>context.hooks.onBeforeDevCompile.callBatch({
                    bundlerConfigs,
                    environments: context.environments,
                    isFirstCompile,
                    isWatch: !0
                }),
            isWatch: !0
        }), onCompileDone({
            compiler,
            onDone,
            onEnvironmentDone,
            MultiStatsCtor
        });
    };
    class BrowserslistError extends Error {
        constructor(message){
            super(message), function(obj, key, value) {
                key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value;
            }(this, "browserslist", void 0), this.name = 'BrowserslistError', this.browserslist = !0, Error.captureStackTrace && Error.captureStackTrace(this, BrowserslistError);
        }
    }
    let isFileCache = {};
    function isFile(file) {
        if (file in isFileCache) return isFileCache[file];
        let result = external_node_fs_namespaceObject.existsSync(file) && external_node_fs_namespaceObject.statSync(file).isFile();
        return isFileCache[file] = result, result;
    }
    function parsePackage(file) {
        let config = JSON.parse(external_node_fs_namespaceObject.readFileSync(file).toString().replace(/^\uFEFF/m, ''));
        if (config.browserlist && !config.browserslist) throw new BrowserslistError(`\`browserlist\` key instead of \`browserslist\` in ${file}`);
        let list = config.browserslist;
        for(let i in Array.isArray(list) && (list = {
            defaults: list
        }), 'string' == typeof list && (list = parseConfig(list)), list){
            var section = list[i];
            let FORMAT = 'Browserslist config should be a string or an array of strings with browser queries';
            if (Array.isArray(section)) {
                for(let i = 0; i < section.length; i++)if ('string' != typeof section[i]) throw new BrowserslistError(FORMAT);
            } else if ('string' != typeof section) throw new BrowserslistError(FORMAT);
        }
        return list;
    }
    let IS_SECTION = /^\s*\[(.+)]\s*$/;
    function parseConfig(string) {
        let result = {
            defaults: []
        }, sections = [
            'defaults'
        ];
        return string.toString().replace(/#[^\n]*/g, '').split(/\n|,/).map((line)=>line.trim()).filter((line)=>'' !== line).forEach((line)=>{
            let matched = line.match(IS_SECTION);
            matched ? (sections = matched[1].trim().split(' ')).forEach((section)=>{
                if (result[section]) throw new BrowserslistError(`Duplicate section ${section} in Browserslist config`);
                result[section] = [];
            }) : sections.forEach((section)=>{
                result[section].push(line);
            });
        }), result;
    }
    function parsePackageOrReadConfig(file) {
        if ('package.json' === external_node_path_.basename(file)) return parsePackage(file);
        var file1 = file;
        if (!isFile(file1)) throw new BrowserslistError(`Can't read ${file1} config`);
        return parseConfig(external_node_fs_namespaceObject.readFileSync(file1, 'utf-8'));
    }
    function pickEnv(config, opts) {
        return 'object' != typeof config ? config : config['string' == typeof opts.env ? opts.env : process.env.BROWSERSLIST_ENV ? process.env.BROWSERSLIST_ENV : process.env.NODE_ENV ? process.env.NODE_ENV : 'production'] || config.defaults;
    }
    function eachParent(file, callback) {
        let dir = isFile(file) ? external_node_path_.dirname(file) : file, loc = external_node_path_.resolve(dir);
        do {
            let result = callback(loc);
            if (void 0 !== result) return result;
        }while (loc !== (loc = external_node_path_.dirname(loc)));
    }
    let configCache = {}, OVERRIDE_PATHS = [
        'performance.removeConsole',
        'output.inlineScripts',
        'output.inlineStyles',
        'output.cssModules.auto',
        'output.overrideBrowserslist',
        'server.open',
        'server.printUrls',
        'resolve.extensions',
        'provider'
    ], merge = (x, y, path = '')=>{
        if (((key)=>{
            if (key.startsWith('environments.')) {
                let realKey = key.split('.').slice(2).join('.');
                return OVERRIDE_PATHS.includes(realKey);
            }
            return OVERRIDE_PATHS.includes(key) || key.startsWith('output.filename.');
        })(path)) return y ?? x;
        if (void 0 === x) return isPlainObject(y) ? cloneDeep(y) : y;
        if (void 0 === y) return isPlainObject(x) ? cloneDeep(x) : x;
        if ('boolean' == typeof x || 'boolean' == typeof y) return y;
        let pair = [
            x,
            y
        ];
        if (pair.some(Array.isArray)) return 'output.copy' !== path || pair.every(Array.isArray) ? [
            ...helpers_castArray(x),
            ...helpers_castArray(y)
        ] : Array.isArray(x) ? merge({
            patterns: x
        }, y, path) : merge(x, {
            patterns: y
        }, path);
        if (pair.some(isFunction)) return pair;
        if (!isPlainObject(x) || !isPlainObject(y)) return y;
        let merged = {};
        for (let key of new Set([
            ...Object.keys(x),
            ...Object.keys(y)
        ])){
            let childPath = path ? `${path}.${key}` : key;
            merged[key] = merge(x[key], y[key], childPath);
        }
        return merged;
    }, mergeRsbuildConfig = (...configs)=>2 === configs.length ? merge(configs[0], configs[1]) : configs.length < 2 ? configs[0] : configs.reduce((result, config)=>merge(result, config), {}), defaultConfig_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__), defaultAllowedOrigins = /^https?:\/\/(?:(?:[^:]+\.)?localhost|127\.0\.0\.1|\[::1\])(?::\d+)?$/, createDefaultConfig = ()=>({
            dev: {
                hmr: !0,
                liveReload: !0,
                watchFiles: [],
                assetPrefix: DEFAULT_ASSET_PREFIX,
                writeToDisk: !1,
                cliShortcuts: !1,
                client: {
                    path: '/rsbuild-hmr',
                    port: '',
                    host: '',
                    overlay: !0,
                    reconnect: 100
                }
            },
            server: {
                port: 3000,
                host: DEFAULT_DEV_HOST,
                open: !1,
                base: '/',
                htmlFallback: 'index',
                compress: !0,
                printUrls: !0,
                strictPort: !1,
                cors: {
                    origin: defaultAllowedOrigins
                },
                middlewareMode: !1
            },
            html: {
                meta: {
                    charset: {
                        charset: 'UTF-8'
                    },
                    viewport: 'width=device-width, initial-scale=1.0'
                },
                title: 'Rsbuild App',
                inject: 'head',
                mountId: 'root',
                crossorigin: !1,
                outputStructure: 'flat',
                scriptLoading: 'defer'
            },
            resolve: (swcHelpersPath || (swcHelpersPath = (0, external_node_path_.dirname)(defaultConfig_require.resolve('@swc/helpers/package.json'))), {
                alias: {
                    '@swc/helpers': swcHelpersPath
                },
                aliasStrategy: 'prefer-tsconfig',
                extensions: [
                    '.ts',
                    '.tsx',
                    '.mjs',
                    '.js',
                    '.jsx',
                    '.json'
                ]
            }),
            source: {
                define: {},
                preEntry: [],
                decorators: {
                    version: '2022-03'
                }
            },
            output: {
                target: 'web',
                cleanDistPath: 'auto',
                distPath: {
                    root: ROOT_DIST_DIR,
                    css: 'static/css',
                    svg: 'static/svg',
                    font: 'static/font',
                    html: './',
                    wasm: 'static/wasm',
                    image: 'static/image',
                    media: 'static/media',
                    assets: 'static/assets',
                    favicon: './'
                },
                assetPrefix: DEFAULT_ASSET_PREFIX,
                filename: {},
                charset: 'utf8',
                polyfill: 'off',
                dataUriLimit: {
                    svg: 4096,
                    font: 4096,
                    image: 4096,
                    media: 4096,
                    assets: 4096
                },
                legalComments: 'linked',
                injectStyles: !1,
                minify: !0,
                module: !1,
                manifest: !1,
                sourceMap: {
                    js: void 0,
                    css: !1
                },
                filenameHash: !0,
                inlineScripts: !1,
                inlineStyles: !1,
                cssModules: {
                    auto: !0,
                    namedExport: !1,
                    exportGlobals: !1,
                    exportLocalsConvention: 'camelCase'
                },
                emitAssets: !0
            },
            tools: {
                cssExtract: {
                    loaderOptions: {},
                    pluginOptions: {
                        ignoreOrder: !0
                    }
                }
            },
            security: {
                nonce: '',
                sri: {
                    enable: !1
                }
            },
            performance: {
                profile: !1,
                printFileSize: !0,
                removeConsole: !1,
                removeMomentLocale: !1,
                chunkSplit: {
                    strategy: 'split-by-experience'
                }
            },
            environments: {}
        }), withDefaultConfig = async (rootPath, config)=>{
        let merged = mergeRsbuildConfig(createDefaultConfig(), config);
        if (merged.root ||= rootPath, merged.source ||= {}, merged.server?.base && (config.dev?.assetPrefix === void 0 && (merged.dev ||= {}, merged.dev.assetPrefix = merged.server.base), config.output?.assetPrefix === void 0 && (merged.output ||= {}, merged.output.assetPrefix = merged.server.base)), merged.dev?.lazyCompilation === void 0 && (merged.dev ||= {}, merged.dev.lazyCompilation = {
            imports: !0,
            entries: !1
        }), !merged.source.tsconfigPath) {
            let tsconfigPath = (0, external_node_path_.join)(rootPath, 'tsconfig.json');
            await isFileExists(tsconfigPath) && (merged.source.tsconfigPath = tsconfigPath);
        }
        return merged;
    }, normalizePublicDirs = (publicDir)=>{
        if (!1 === publicDir) return [];
        let defaultConfig = {
            name: 'public',
            copyOnBuild: 'auto',
            watch: !1
        };
        return void 0 === publicDir ? [
            defaultConfig
        ] : Array.isArray(publicDir) ? publicDir.map((options)=>({
                ...defaultConfig,
                ...options
            })) : [
            {
                ...defaultConfig,
                ...publicDir
            }
        ];
    }, external_node_os_namespaceObject = require("node:os");
    var external_node_os_default = __webpack_require__.n(external_node_os_namespaceObject);
    let external_node_process_namespaceObject = require("node:process");
    var external_node_process_default = __webpack_require__.n(external_node_process_namespaceObject);
    let exitHook_callbacks = new Set(), isCalled = !1, isRegistered = !1;
    function exit(exitCode, type) {
        if (!isCalled) {
            for (let callback of (isCalled = !0, exitHook_callbacks))callback(exitCode);
            if ('SIGINT' === type) {
                let listeners = external_node_process_default().listeners('SIGINT');
                Array.isArray(listeners) && listeners.length <= 1 && external_node_process_default().exit(exitCode);
            }
        }
    }
    let isEnvironmentMatch = (pluginEnvironment, specifiedEnvironment)=>pluginEnvironment === specifiedEnvironment || void 0 === pluginEnvironment;
    async function initPlugins({ context, pluginManager }) {
        index_js_namespaceObject.logger.debug('initializing plugins');
        let plugins = pluginManager.getAllPluginsWithMeta();
        plugins = ((plugins)=>{
            let allLines = [];
            function getPlugin(name) {
                let targets = plugins.filter((item)=>item.instance.name === name);
                if (!targets.length) throw Error(`${picocolors_index_js_default().dim('[rsbuild:plugin]')} Plugin "${picocolors_index_js_default().yellow(name)}" not existed`);
                return targets;
            }
            for (let plugin of plugins){
                if (plugin.instance.pre) for (let pre of plugin.instance.pre)pre && plugins.some((item)=>item.instance.name === pre) && allLines.push([
                    pre,
                    plugin.instance.name
                ]);
                if (plugin.instance.post) for (let post of plugin.instance.post)post && plugins.some((item)=>item.instance.name === post) && allLines.push([
                    plugin.instance.name,
                    post
                ]);
            }
            let zeroEndPoints = plugins.filter((item)=>!allLines.find((l)=>l[1] === item.instance.name)), sortedPoint = [];
            for(; zeroEndPoints.length;){
                let zep = zeroEndPoints.shift();
                sortedPoint.push(...getPlugin(zep.instance.name)), allLines = allLines.filter((l)=>l[0] !== getPlugin(zep.instance.name)[0].instance.name), zeroEndPoints = plugins.filter((item)=>!sortedPoint.find((sp)=>sp.instance.name === item.instance.name)).filter((item)=>!allLines.find((l)=>l[1] === item.instance.name));
            }
            if (allLines.length) {
                let restInRingPoints = {};
                for (let l of allLines)restInRingPoints[l[0]] = !0, restInRingPoints[l[1]] = !0;
                throw Error(`${picocolors_index_js_default().dim('[rsbuild:plugin]')} Plugins dependencies has loop: ${picocolors_index_js_default().yellow(Object.keys(restInRingPoints).join(','))}`);
            }
            return sortedPoint;
        })(plugins = ((plugins)=>{
            let prePlugins = [], normalPlugins = [], postPlugins = [];
            for (let plugin of plugins){
                let { enforce } = plugin.instance;
                'pre' === enforce ? prePlugins.push(plugin) : 'post' === enforce ? postPlugins.push(plugin) : normalPlugins.push(plugin);
            }
            return [
                ...prePlugins,
                ...normalPlugins,
                ...postPlugins
            ];
        })(plugins));
        let removedPlugins = new Set(), removedEnvPlugins = {};
        for (let { environment, instance } of plugins)if (instance.remove) if (environment) for (let item of (removedEnvPlugins[environment] ??= new Set(), instance.remove))removedEnvPlugins[environment].add(item);
        else for (let item of instance.remove)removedPlugins.add(item);
        for (let { instance, environment } of plugins){
            let { name, setup } = instance;
            if (!(removedPlugins.has(name) || environment && removedEnvPlugins[environment]?.has(name))) {
                if (instance.apply && context.action) if (isFunction(instance.apply)) {
                    if (!instance.apply(context.originalConfig, {
                        action: context.action
                    })) continue;
                } else {
                    let expected = {
                        build: 'build',
                        dev: 'serve',
                        preview: 'serve'
                    }[context.action];
                    if (expected && instance.apply !== expected) continue;
                }
                await setup(context.getPluginAPI(environment));
            }
        }
        index_js_namespaceObject.logger.debug('plugins initialized');
    }
    let mapProcessAssetsStage = (compiler, stage)=>{
        let { Compilation } = compiler.webpack;
        switch(stage){
            case 'additional':
                return Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL;
            case 'pre-process':
                return Compilation.PROCESS_ASSETS_STAGE_PRE_PROCESS;
            case 'derived':
                return Compilation.PROCESS_ASSETS_STAGE_DERIVED;
            case 'additions':
                return Compilation.PROCESS_ASSETS_STAGE_ADDITIONS;
            case 'none':
                return Compilation.PROCESS_ASSETS_STAGE_NONE;
            case 'optimize':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE;
            case 'optimize-count':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_COUNT;
            case 'optimize-compatibility':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_COMPATIBILITY;
            case 'optimize-size':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE;
            case 'dev-tooling':
                return Compilation.PROCESS_ASSETS_STAGE_DEV_TOOLING;
            case 'optimize-inline':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE;
            case 'summarize':
                return Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE;
            case 'optimize-hash':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH;
            case 'optimize-transfer':
                return Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_TRANSFER;
            case 'analyse':
                return Compilation.PROCESS_ASSETS_STAGE_ANALYSE;
            case 'report':
                return Compilation.PROCESS_ASSETS_STAGE_REPORT;
            default:
                throw Error(`${picocolors_index_js_default().dim('[rsbuild]')} Invalid process assets stage: ${stage}`);
        }
    }, browsersListCache = new Map(), getEnvironmentHTMLPaths = (entry, config)=>'web' !== config.output.target || !1 === config.tools.htmlPlugin ? {} : Object.keys(entry).reduce((prev, key)=>{
            let entryValue = entry[key];
            return ('string' == typeof entryValue || Array.isArray(entryValue) || !1 !== entryValue.html) && (prev[key] = function(entryName, config) {
                let filename = getFilename(config, 'html').replace('[name]', entryName), prefix = config.output.distPath.html;
                return prefix.startsWith('/') && index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:config]')} Absolute path is not recommended at ${picocolors_index_js_default().yellow(`output.distPath.html: "${prefix}"`)}, use relative path instead.`), removeLeadingSlash(external_node_path_.posix.join(prefix, filename));
            }(key, config)), prev;
        }, {});
    async function updateEnvironmentContext(context, configs) {
        for (let [index, [name, config1]] of (context.environments ||= {}, Object.entries(configs).entries())){
            var cwd, config;
            let browserslist = function(path, config) {
                let { target, overrideBrowserslist } = config.output;
                if (Array.isArray(overrideBrowserslist)) return overrideBrowserslist;
                if ('web' === target || 'web-worker' === target) {
                    let browserslistrc = function(path) {
                        let env = process.env.NODE_ENV, cacheKey = path + env;
                        if (browsersListCache.has(cacheKey)) return browsersListCache.get(cacheKey);
                        let result = function(opts) {
                            if (opts.config) return pickEnv(parsePackageOrReadConfig(opts.config), opts);
                            if (opts.path) {
                                let config = function(from) {
                                    let resolved, fromDir = isFile(from = external_node_path_.resolve(from)) ? external_node_path_.dirname(from) : from;
                                    if (fromDir in configCache) return configCache[fromDir];
                                    let configFile = eachParent(from, (dir)=>{
                                        let pkgBrowserslist, config = external_node_path_.join(dir, 'browserslist'), pkg = external_node_path_.join(dir, 'package.json'), rc = external_node_path_.join(dir, '.browserslistrc');
                                        if (isFile(pkg)) try {
                                            pkgBrowserslist = parsePackage(pkg);
                                        } catch (e) {
                                            if (e instanceof BrowserslistError) throw e;
                                            console.warn(`[Browserslist] Could not parse ${pkg}. Ignoring it.`);
                                        }
                                        if (isFile(config) && pkgBrowserslist) throw new BrowserslistError(`${dir} contains both browserslist and package.json with browsers`);
                                        if (isFile(rc) && pkgBrowserslist) throw new BrowserslistError(`${dir} contains both .browserslistrc and package.json with browsers`);
                                        if (isFile(config) && isFile(rc)) throw new BrowserslistError(`${dir} contains both .browserslistrc and browserslist`);
                                        return isFile(config) ? config : isFile(rc) ? rc : pkgBrowserslist ? pkg : void 0;
                                    });
                                    configFile && (resolved = parsePackageOrReadConfig(configFile));
                                    let configDir = configFile && external_node_path_.dirname(configFile);
                                    return eachParent(from, (dir)=>{
                                        if (resolved && (configCache[dir] = resolved), dir === configDir) return null;
                                    }), resolved;
                                }(opts.path);
                                if (!config) return;
                                return pickEnv(config, opts);
                            }
                        }({
                            path,
                            env
                        });
                        return result ? (browsersListCache.set(cacheKey, result), result) : null;
                    }(path);
                    if (browserslistrc) return browserslistrc;
                }
                return DEFAULT_BROWSERSLIST[target];
            }(context.rootPath, config1), { entry = {}, tsconfigPath } = config1.source, htmlPaths = getEnvironmentHTMLPaths(entry, config1), webSocketToken = 'dev' === context.action ? await helpers_hash(context.rootPath + name) : '', environmentContext = {
                index,
                name,
                distPath: (cwd = context.rootPath, config = config1, ensureAbsolutePath(cwd, config.output?.distPath?.root ?? ROOT_DIST_DIR)),
                entry,
                browserslist,
                htmlPaths,
                tsconfigPath,
                config: config1,
                webSocketToken
            };
            context.environments[name] = new Proxy(environmentContext, {
                get: (target, prop)=>target[prop],
                set: (target, prop, newValue)=>('manifest' === prop ? target[prop] = newValue : index_js_namespaceObject.logger.error(`EnvironmentContext is readonly, you can not assign to the "environment.${prop}" prop.`), !0)
            });
        }
    }
    async function createContext(options, userConfig) {
        let { cwd } = options, rootPath = userConfig.root ? ensureAbsolutePath(cwd, userConfig.root) : cwd, rsbuildConfig = await withDefaultConfig(rootPath, userConfig), cachePath = (0, external_node_path_.join)(rootPath, 'node_modules', '.cache'), specifiedEnvironments = options.environment && options.environment.length > 0 ? options.environment : void 0, bundlerType = userConfig.provider ? 'webpack' : 'rspack';
        return {
            version: "1.5.0",
            rootPath,
            distPath: '',
            cachePath,
            callerName: options.callerName,
            bundlerType,
            environments: {},
            hooks: {
                onExit: createAsyncHook(),
                onCloseBuild: createAsyncHook(),
                onAfterBuild: createAsyncHook(),
                onBeforeBuild: createAsyncHook(),
                onBeforeDevCompile: createAsyncHook(),
                onAfterDevCompile: createAsyncHook(),
                onCloseDevServer: createAsyncHook(),
                onAfterStartDevServer: createAsyncHook(),
                onBeforeStartDevServer: createAsyncHook(),
                onAfterStartProdServer: createAsyncHook(),
                onBeforeStartProdServer: createAsyncHook(),
                onAfterCreateCompiler: createAsyncHook(),
                onBeforeCreateCompiler: createAsyncHook(),
                modifyHTML: createEnvironmentAsyncHook(),
                modifyHTMLTags: createEnvironmentAsyncHook(),
                modifyRspackConfig: createEnvironmentAsyncHook(),
                modifyBundlerChain: createEnvironmentAsyncHook(),
                modifyWebpackChain: createEnvironmentAsyncHook(),
                modifyWebpackConfig: createEnvironmentAsyncHook(),
                modifyRsbuildConfig: createAsyncHook(),
                modifyEnvironmentConfig: createEnvironmentAsyncHook(),
                onBeforeEnvironmentCompile: createEnvironmentAsyncHook(),
                onAfterEnvironmentCompile: createEnvironmentAsyncHook()
            },
            config: {
                ...rsbuildConfig
            },
            originalConfig: userConfig,
            specifiedEnvironments
        };
    }
    let normalizePluginObject = (plugin)=>{
        let { setup: _, ...rest } = plugin;
        return {
            ...rest,
            setup () {}
        };
    };
    async function outputInspectConfigFiles({ rawBundlerConfigs, rawEnvironmentConfigs, inspectOptions, rawExtraConfigs, configType }) {
        let { outputPath } = inspectOptions, files = [
            ...rawEnvironmentConfigs.map(({ name, content })=>{
                if (1 === rawEnvironmentConfigs.length) return {
                    path: (0, external_node_path_.join)(outputPath, 'rsbuild.config.mjs'),
                    label: 'Rsbuild config',
                    content
                };
                let outputFile = `rsbuild.config.${name}.mjs`;
                return {
                    path: (0, external_node_path_.join)(outputPath, outputFile),
                    label: `Rsbuild config (${name})`,
                    content
                };
            }),
            ...rawBundlerConfigs.map(({ name, content })=>{
                let outputFile = `${configType}.config.${name}.mjs`, outputFilePath = (0, external_node_path_.join)(outputPath, outputFile);
                return external_node_fs_default().existsSync(outputFilePath) && (outputFilePath = outputFilePath.replace(/\.mjs$/, `.${Date.now()}.mjs`)), {
                    path: outputFilePath,
                    label: `${upperFirst(configType)} Config (${name})`,
                    content
                };
            }),
            ...(rawExtraConfigs || []).map(({ name, content })=>({
                    path: (0, external_node_path_.join)(outputPath, `${name}.config.mjs`),
                    label: `${upperFirst(name)} Config`,
                    content
                }))
        ];
        await external_node_fs_default().promises.mkdir(outputPath, {
            recursive: !0
        }), await Promise.all(files.map(async (item)=>external_node_fs_default().promises.writeFile(item.path, `export default ${item.content}`)));
        let fileInfos = files.map((item)=>`  - ${picocolors_index_js_default().bold(picocolors_index_js_default().yellow(item.label))}: ${picocolors_index_js_default().underline(item.path)}`).join('\n');
        index_js_namespaceObject.logger.success(`config inspection completed, generated files: \n\n${fileInfos}\n`);
    }
    function stringifyConfig(config, verbose) {
        return src_class.toString(config, {
            verbose
        });
    }
    async function inspectConfig_inspectConfig({ context, pluginManager, bundlerConfigs, inspectOptions = {}, bundler = 'rspack' }) {
        var context1, inspectOptions1;
        inspectOptions.mode ? setNodeEnv(inspectOptions.mode) : process.env.NODE_ENV || setNodeEnv('development');
        let rawBundlerConfigs = bundlerConfigs.map((config, index)=>({
                name: config.name || String(index),
                content: stringifyConfig(config, inspectOptions.verbose)
            })), { rsbuildConfig, rawRsbuildConfig, environmentConfigs, rawEnvironmentConfigs } = (({ normalizedConfig, inspectOptions, pluginManager })=>{
            let { environments, ...rsbuildConfig } = normalizedConfig, rawRsbuildConfig = stringifyConfig({
                ...rsbuildConfig,
                plugins: pluginManager.getPlugins().map(normalizePluginObject)
            }, inspectOptions.verbose), environmentConfigs = {}, rawEnvironmentConfigs = [];
            for (let [name, config] of Object.entries(environments)){
                let debugConfig = {
                    ...config,
                    plugins: pluginManager.getPlugins({
                        environment: name
                    }).map(normalizePluginObject)
                };
                rawEnvironmentConfigs.push({
                    name,
                    content: stringifyConfig(debugConfig, inspectOptions.verbose)
                }), environmentConfigs[name] = debugConfig;
            }
            return {
                rsbuildConfig,
                rawRsbuildConfig,
                environmentConfigs: environments,
                rawEnvironmentConfigs
            };
        })({
            normalizedConfig: context.normalizedConfig,
            inspectOptions,
            pluginManager
        }), outputPath = (context1 = context, (inspectOptions1 = inspectOptions).outputPath ? (0, external_node_path_.isAbsolute)(inspectOptions1.outputPath) ? inspectOptions1.outputPath : (0, external_node_path_.join)(context1.distPath, inspectOptions1.outputPath) : (0, external_node_path_.join)(context1.distPath, RSBUILD_OUTPUTS_PATH)), rawExtraConfigs = inspectOptions.extraConfigs ? Object.entries(inspectOptions.extraConfigs).map(([name, content])=>({
                name,
                content: 'string' == typeof content ? content : stringifyConfig(content, inspectOptions.verbose)
            })) : void 0;
        return inspectOptions.writeToDisk && await outputInspectConfigFiles({
            rawBundlerConfigs,
            rawEnvironmentConfigs,
            rawExtraConfigs,
            inspectOptions: {
                ...inspectOptions,
                outputPath
            },
            configType: bundler
        }), {
            rsbuildConfig: rawRsbuildConfig,
            environmentConfigs: rawEnvironmentConfigs.map((r)=>r.content),
            bundlerConfigs: rawBundlerConfigs.map((r)=>r.content),
            origin: {
                rsbuildConfig,
                environmentConfigs,
                bundlerConfigs
            }
        };
    }
    let dist_isPlainObject = (obj)=>((obj)=>null !== obj && 'object' == typeof obj)(obj) && '[object Object]' === Object.prototype.toString.call(obj);
    function reduceConfigs({ initial, config, mergeFn = Object.assign }) {
        return null == config ? initial : dist_isPlainObject(config) ? dist_isPlainObject(initial) ? mergeFn(initial, config) : config : 'function' == typeof config ? config(initial) ?? initial : Array.isArray(config) ? config.reduce((initial, config)=>reduceConfigs({
                initial,
                config,
                mergeFn
            }), initial) : config ?? initial;
    }
    function reduceConfigsWithContext({ initial, config, ctx, mergeFn = Object.assign }) {
        return null == config ? initial : dist_isPlainObject(config) ? dist_isPlainObject(initial) ? mergeFn(initial, config) : config : 'function' == typeof config ? config(initial, ctx) ?? initial : Array.isArray(config) ? config.reduce((initial, config)=>reduceConfigsWithContext({
                initial,
                config,
                ctx,
                mergeFn
            }), initial) : config ?? initial;
    }
    async function reduceConfigsAsyncWithContext({ initial, config, ctx, mergeFn = Object.assign }) {
        return null == config ? initial : dist_isPlainObject(config) ? dist_isPlainObject(initial) ? mergeFn(initial, config) : config : 'function' == typeof config ? await config(initial, ctx) ?? initial : Array.isArray(config) ? config.reduce((initial, config)=>reduceConfigsWithContext({
                initial,
                config,
                ctx,
                mergeFn
            }), initial) : config ?? initial;
    }
    function reduceConfigsMergeContext({ initial, config, ctx, mergeFn = Object.assign }) {
        return null == config ? initial : dist_isPlainObject(config) ? dist_isPlainObject(initial) ? mergeFn(initial, config) : config : 'function' == typeof config ? config({
            value: initial,
            ...ctx
        }) ?? initial : Array.isArray(config) ? config.reduce((initial, config)=>reduceConfigsMergeContext({
                initial,
                config,
                ctx,
                mergeFn
            }), initial) : config ?? initial;
    }
    var webpack_merge_dist = __webpack_require__("../../node_modules/.pnpm/webpack-merge@6.0.1/node_modules/webpack-merge/dist/index.js");
    async function modifyBundlerChain(context, utils) {
        index_js_namespaceObject.logger.debug('applying modifyBundlerChain hook');
        let bundlerChain = new src_class(), [modifiedBundlerChain] = await context.hooks.modifyBundlerChain.callChain({
            environment: utils.environment.name,
            args: [
                bundlerChain,
                utils
            ]
        });
        if (utils.environment.config.tools?.bundlerChain) for (let item of helpers_castArray(utils.environment.config.tools.bundlerChain))await item(modifiedBundlerChain, utils);
        return index_js_namespaceObject.logger.debug('applied modifyBundlerChain hook'), modifiedBundlerChain;
    }
    let configChain_CHAIN_ID = {
        RULE: {
            MJS: 'mjs',
            FONT: 'font',
            IMAGE: 'image',
            MEDIA: 'media',
            ADDITIONAL_ASSETS: 'additional-assets',
            JS: 'js',
            JS_RAW: 'js-raw',
            JS_DATA_URI: 'js-data-uri',
            TS: 'ts',
            CSS: 'css',
            CSS_RAW: 'css-raw',
            CSS_INLINE: 'css-inline',
            LESS: 'less',
            LESS_RAW: 'less-raw',
            LESS_INLINE: 'less-inline',
            SASS: 'sass',
            SASS_RAW: 'sass-raw',
            SASS_INLINE: 'sass-inline',
            STYLUS: 'stylus',
            STYLUS_RAW: 'stylus-raw',
            STYLUS_INLINE: 'stylus-inline',
            SVG: 'svg',
            PUG: 'pug',
            VUE: 'vue',
            WASM: 'wasm',
            SVELTE: 'svelte'
        },
        ONE_OF: {
            SVG: 'svg',
            SVG_RAW: 'svg-asset-raw',
            SVG_URL: 'svg-asset-url',
            SVG_ASSET: 'svg-asset',
            SVG_REACT: 'svg-react',
            SVG_INLINE: 'svg-asset-inline'
        },
        USE: {
            TS: 'ts',
            CSS: 'css',
            SASS: 'sass',
            LESS: 'less',
            STYLUS: 'stylus',
            URL: 'url',
            PUG: 'pug',
            VUE: 'vue',
            SWC: 'swc',
            SVGR: 'svgr',
            BABEL: 'babel',
            STYLE: 'style-loader',
            SVELTE: 'svelte',
            POSTCSS: 'postcss',
            LIGHTNINGCSS: 'lightningcss',
            IGNORE_CSS: 'ignore-css',
            CSS_MODULES_TS: "css-modules-typescript",
            MINI_CSS_EXTRACT: 'mini-css-extract',
            RESOLVE_URL: 'resolve-url-loader'
        },
        PLUGIN: {
            HMR: 'hmr',
            COPY: 'copy',
            HTML: 'html',
            DEFINE: 'define',
            PROGRESS: 'progress',
            MANIFEST: 'webpack-manifest',
            TS_CHECKER: 'ts-checker',
            BUNDLE_ANALYZER: 'bundle-analyze',
            MODULE_FEDERATION: 'module-federation',
            HTML_PREFETCH: 'html-prefetch-plugin',
            HTML_PRELOAD: 'html-preload-plugin',
            MINI_CSS_EXTRACT: 'mini-css-extract',
            VUE_LOADER_PLUGIN: 'vue-loader-plugin',
            REACT_FAST_REFRESH: 'react-fast-refresh',
            SUBRESOURCE_INTEGRITY: 'subresource-integrity'
        },
        MINIMIZER: {
            JS: 'js',
            CSS: 'css'
        },
        RESOLVE_PLUGIN: {
            TS_CONFIG_PATHS: 'ts-config-paths'
        }
    }, pluginHelper_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__), setHTMLPlugin = (plugin)=>{
        plugin && (pluginHelper_htmlPlugin = plugin);
    }, getHTMLPlugin = ()=>(pluginHelper_htmlPlugin || (pluginHelper_htmlPlugin = pluginHelper_require('../compiled/html-rspack-plugin/index.js')), pluginHelper_htmlPlugin), setCssExtractPlugin = (plugin)=>{
        cssExtractPlugin = plugin;
    }, getCssExtractPlugin = ()=>cssExtractPlugin || rspack_rspack.CssExtractRspackPlugin;
    async function modifyRspackConfig(context, rspackConfig, chainUtils) {
        index_js_namespaceObject.logger.debug('applying modifyRspackConfig hook');
        let currentConfig = rspackConfig, utils = getConfigUtils(()=>currentConfig, chainUtils);
        if ([currentConfig] = await context.hooks.modifyRspackConfig.callChain({
            environment: utils.environment.name,
            args: [
                rspackConfig,
                utils
            ],
            afterEach: ([config])=>{
                currentConfig = config;
            }
        }), utils.environment.config.tools?.rspack) {
            let toolsRspackConfig = utils.environment.config.tools.rspack;
            currentConfig = await reduceConfigsAsyncWithContext({
                initial: currentConfig,
                config: toolsRspackConfig,
                ctx: utils,
                mergeFn: (...args)=>currentConfig = utils.mergeConfig.call(utils, args)
            });
        }
        return index_js_namespaceObject.logger.debug('applied modifyRspackConfig hook'), currentConfig;
    }
    function getConfigUtils(getCurrentConfig, chainUtils) {
        return {
            ...chainUtils,
            mergeConfig: webpack_merge_dist.merge,
            addRules (rules) {
                let config = getCurrentConfig(), ruleArr = helpers_castArray(rules);
                config.module || (config.module = {}), config.module.rules || (config.module.rules = []), config.module.rules.unshift(...ruleArr);
            },
            appendRules (rules) {
                let config = getCurrentConfig(), ruleArr = helpers_castArray(rules);
                config.module || (config.module = {}), config.module.rules || (config.module.rules = []), config.module.rules.push(...ruleArr);
            },
            prependPlugins (plugins) {
                let config = getCurrentConfig(), pluginArr = helpers_castArray(plugins);
                config.plugins || (config.plugins = []), config.plugins.unshift(...pluginArr);
            },
            appendPlugins (plugins) {
                let config = getCurrentConfig(), pluginArr = helpers_castArray(plugins);
                config.plugins || (config.plugins = []), config.plugins.push(...pluginArr);
            },
            removePlugin (pluginName) {
                let config = getCurrentConfig();
                config.plugins && (config.plugins = config.plugins.filter((plugin)=>!plugin || (plugin.name || plugin.constructor.name) !== pluginName));
            }
        };
    }
    function getChainUtils(target, environment) {
        return {
            rspack: rspack_rspack,
            environment,
            env: process.env.NODE_ENV || '',
            target,
            isDev: 'development' === environment.config.mode,
            isProd: 'production' === environment.config.mode,
            isServer: 'node' === target,
            isWebWorker: 'web-worker' === target,
            CHAIN_ID: configChain_CHAIN_ID,
            HtmlPlugin: getHTMLPlugin()
        };
    }
    async function generateRspackConfig({ target, context, environment }) {
        let chainUtils = getChainUtils(target, context.environments[environment]), { BannerPlugin, DefinePlugin, IgnorePlugin, ProvidePlugin, SourceMapDevToolPlugin, HotModuleReplacementPlugin } = rspack_rspack, rspackConfig = (await modifyBundlerChain(context, {
            ...chainUtils,
            bundler: {
                BannerPlugin,
                DefinePlugin,
                IgnorePlugin,
                ProvidePlugin,
                SourceMapDevToolPlugin,
                HotModuleReplacementPlugin
            }
        })).toConfig();
        var config = rspackConfig = await modifyRspackConfig(context, rspackConfig, chainUtils);
        if (config.plugins) {
            for (let plugin of config.plugins)if (plugin && void 0 === plugin.apply && 'name' in plugin && 'setup' in plugin) {
                let name = picocolors_index_js_default().bold(picocolors_index_js_default().yellow(plugin.name));
                throw Error(`${picocolors_index_js_default().dim('[rsbuild:plugin]')} "${picocolors_index_js_default().yellow(name)}" appears to be an Rsbuild plugin. It cannot be used as an Rspack plugin.`);
            }
        }
        return config.devServer && index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:config]')} Find invalid Rspack config: "${picocolors_index_js_default().yellow('devServer')}". Note that Rspack's "devServer" config is not supported by Rsbuild. You can use Rsbuild's "dev" config to configure the Rsbuild dev server.`), rspackConfig;
    }
    let allowedEnvironmentDevKeys = [
        'hmr',
        'client',
        'liveReload',
        'writeToDisk',
        'assetPrefix',
        'progressBar',
        'lazyCompilation'
    ];
    async function modifyRsbuildConfig(context) {
        index_js_namespaceObject.logger.debug('applying modifyRsbuildConfig hook');
        let pluginsCount = context.config.plugins?.length ?? 0, [modified] = await context.hooks.modifyRsbuildConfig.callChain(context.config, {
            mergeRsbuildConfig: mergeRsbuildConfig
        });
        context.config = modified, (modified.plugins?.length ?? 0) !== pluginsCount && index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild]')} Cannot change plugins via ${picocolors_index_js_default().yellow('modifyRsbuildConfig')} as plugins are already initialized when it executes.`), index_js_namespaceObject.logger.debug('applied modifyRsbuildConfig hook');
    }
    async function modifyEnvironmentConfig(context, config, name) {
        index_js_namespaceObject.logger.debug(`applying modifyEnvironmentConfig hook (${name})`);
        let [modified] = await context.hooks.modifyEnvironmentConfig.callChain({
            environment: name,
            args: [
                config,
                {
                    name,
                    mergeEnvironmentConfig: mergeRsbuildConfig
                }
            ]
        });
        return index_js_namespaceObject.logger.debug(`applied modifyEnvironmentConfig hook (${name})`), modified;
    }
    let createEnvironmentNotFoundError = (environments = [])=>{
        let envList = picocolors_index_js_default().yellow(environments.join(','));
        return Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} The current build is specified to run only in the ${envList} environment, but the configuration of the specified environment was not found.`);
    };
    async function initRsbuildConfig({ context, pluginManager }) {
        if (context.normalizedConfig) return context.normalizedConfig;
        await initPlugins({
            context,
            pluginManager
        }), await modifyRsbuildConfig(context);
        let normalizedBaseConfig = ((config)=>{
            let mergedConfig = mergeRsbuildConfig({
                ...createDefaultConfig(),
                mode: (()=>{
                    if (config.mode) return config.mode;
                    let nodeEnv = process.env.NODE_ENV || '';
                    return 'production' === nodeEnv || 'development' === nodeEnv ? nodeEnv : 'none';
                })()
            }, config), { watchFiles } = mergedConfig.dev;
            return Array.isArray(watchFiles) || (mergedConfig.dev.watchFiles = [
                watchFiles
            ]), mergedConfig;
        })(context.config), environments = {}, mergedEnvironments = ((normalizedConfig, rootPath, specifiedEnvironments)=>{
            let defaultEntry, { environments, dev, server: _server, provider: _provider, ...baseConfig } = normalizedConfig, isEnvironmentEnabled = (name)=>!specifiedEnvironments || specifiedEnvironments.includes(name), applyEnvironmentDefaultConfig = (config)=>{
                config.source.entry && 0 !== Object.keys(config.source.entry).length || (config.source.entry = (defaultEntry || (defaultEntry = function(root) {
                    let entryFile = findExists([
                        'ts',
                        'js',
                        'tsx',
                        'jsx',
                        'mts',
                        'cts',
                        'mjs',
                        'cjs'
                    ].map((ext)=>(0, external_node_path_.join)(root, `src/index.${ext}`)));
                    return entryFile ? {
                        index: entryFile
                    } : {};
                }(rootPath)), defaultEntry));
                let isServer = 'node' === config.output.target;
                return void 0 === config.output.distPath.js && (config.output.distPath.js = isServer ? '' : 'static/js'), config;
            };
            if (environments && Object.keys(environments).length > 0) {
                let resolvedEnvironments = Object.fromEntries(Object.entries(environments).filter(([name])=>isEnvironmentEnabled(name)).map(([name, config])=>[
                        name,
                        applyEnvironmentDefaultConfig({
                            ...mergeRsbuildConfig({
                                ...baseConfig,
                                dev: pick(dev, allowedEnvironmentDevKeys)
                            }, config)
                        })
                    ]));
                if (0 === Object.keys(resolvedEnvironments).length) throw createEnvironmentNotFoundError(specifiedEnvironments);
                return resolvedEnvironments;
            }
            let defaultEnvironmentName = baseConfig.output.target.replace(/[-_](\w)/g, (_, c)=>c.toUpperCase());
            if (!isEnvironmentEnabled(defaultEnvironmentName)) throw createEnvironmentNotFoundError(specifiedEnvironments);
            return {
                [defaultEnvironmentName]: applyEnvironmentDefaultConfig({
                    ...baseConfig,
                    dev: pick(dev, allowedEnvironmentDevKeys)
                })
            };
        })(normalizedBaseConfig, context.rootPath, context.specifiedEnvironments), tsconfigPaths = new Set();
        for (let [name, config] of Object.entries(mergedEnvironments)){
            let environmentConfig = await modifyEnvironmentConfig(context, config, name), normalizedEnvironmentConfig = {
                ...environmentConfig,
                dev: {
                    ...normalizedBaseConfig.dev,
                    ...environmentConfig.dev
                },
                server: normalizedBaseConfig.server
            }, { tsconfigPath } = normalizedEnvironmentConfig.source;
            if (tsconfigPath) {
                let absoluteTsconfigPath = ensureAbsolutePath(context.rootPath, tsconfigPath);
                normalizedEnvironmentConfig.source.tsconfigPath = absoluteTsconfigPath, tsconfigPaths.add(absoluteTsconfigPath);
            }
            environments[name] = normalizedEnvironmentConfig;
        }
        tsconfigPaths.size && 'prefer-tsconfig' === normalizedBaseConfig.resolve.aliasStrategy && normalizedBaseConfig.dev.watchFiles.push({
            paths: Array.from(tsconfigPaths),
            type: 'reload-server'
        }), context.normalizedConfig = {
            ...normalizedBaseConfig,
            environments
        }, await updateEnvironmentContext(context, environments);
        var context1 = context;
        let distPaths = Object.values(context1.environments).map((item)=>item.distPath);
        return context1.distPath = function(paths) {
            let uniquePaths = [
                ...new Set(paths)
            ];
            if (1 === uniquePaths.length) return uniquePaths[0];
            let [first, ...rest] = uniquePaths.map((p)=>p.split(external_node_path_.sep)), common = [];
            for(let i = 0; i < first.length; i++){
                let segment = first[i];
                if (rest.every((p)=>p[i] === segment)) common.push(segment);
                else break;
            }
            return common.join(external_node_path_.sep);
        }(distPaths), ((config)=>{
            if (config.server.base && !config.server.base.startsWith('/')) throw Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} The ${picocolors_index_js_default().yellow('"server.base"')} option should start with a slash, for example: "/base"`);
            if (!config.environments) return;
            let environmentNames = Object.keys(config.environments), environmentNameRegexp = /^[\w$-]+$/, validTargets = [
                'web',
                'node',
                'web-worker'
            ];
            for (let name of environmentNames){
                environmentNameRegexp.test(name) || index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:config]')} Environment name "${picocolors_index_js_default().yellow(name)}" contains invalid characters. Only letters, numbers, "-", "_", and "$" are allowed.`);
                let outputConfig = config.environments[name].output;
                if (outputConfig.target && !validTargets.includes(outputConfig.target)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} Invalid value of ${picocolors_index_js_default().yellow('output.target')}: ${picocolors_index_js_default().yellow(`"${outputConfig.target}"`)}, valid values are: ${picocolors_index_js_default().yellow(validTargets.join(', '))}`);
            }
        })(context.normalizedConfig), context.normalizedConfig;
    }
    async function initConfigs({ context, pluginManager, rsbuildOptions }) {
        let normalizedConfig = await initRsbuildConfig({
            context,
            pluginManager
        }), rspackConfigs = await Promise.all(Object.entries(normalizedConfig.environments).map(([environment, config])=>generateRspackConfig({
                target: config.output.target,
                context,
                environment
            })));
        if (isDebug()) {
            let inspect = async ()=>{
                await inspectConfig_inspectConfig({
                    context,
                    pluginManager,
                    inspectOptions: {
                        verbose: !0,
                        writeToDisk: !0
                    },
                    rsbuildOptions,
                    bundlerConfigs: rspackConfigs
                });
            };
            context.hooks.onBeforeBuild.tap(async ({ isFirstCompile })=>{
                isFirstCompile && await inspect();
            }), context.hooks.onAfterStartDevServer.tap(inspect);
        }
        return {
            rspackConfigs
        };
    }
    function isLikelyFile(filePath) {
        return (filePath.split(external_node_path_.sep).pop() || '').includes('.');
    }
    function formatFileList(paths, rootPath) {
        let files = paths.filter(isLikelyFile);
        0 === files.length && (files = [
            paths[0]
        ]);
        let fileInfo = files.slice(0, 1).map((file)=>(function(originalFilePath, root) {
                let prefix = root.endsWith(external_node_path_.sep) ? root : root + external_node_path_.sep, filePath = originalFilePath;
                filePath.startsWith(prefix) && (filePath = filePath.slice(prefix.length));
                let parts = filePath.split(external_node_path_.sep).filter(Boolean);
                return parts.length > 3 ? parts.slice(-3).join(external_node_path_.sep) : parts.join(external_node_path_.sep);
            })(file, rootPath)).join(', ');
        return files.length > 1 ? `${fileInfo} and ${files.length - 1} more` : fileInfo;
    }
    async function createCompiler_createCompiler(options) {
        let version;
        index_js_namespaceObject.logger.debug('creating compiler');
        let { context } = options, { rspackConfigs } = await initConfigs(options);
        if (await context.hooks.onBeforeCreateCompiler.callBatch({
            bundlerConfigs: rspackConfigs,
            environments: context.environments
        }), (version = rspack_rspack.rspackVersion).includes('-canary') && (version = version.split('-canary')[0]), !(!(version && /^[\d.]+$/.test(version)) || ((version1, version2)=>{
            let parts1 = version1.split('.').map(Number), parts2 = version2.split('.').map(Number), len = Math.max(parts1.length, parts2.length);
            for(let i = 0; i < len; i++){
                let item1 = parts1[i] ?? 0, item2 = parts2[i] ?? 0;
                if (item1 > item2) return 1;
                if (item1 < item2) return -1;
            }
            return 0;
        })(version, rspackMinVersion) >= 0)) throw Error(`${picocolors_index_js_default().dim('[rsbuild]')} The current Rspack version does not meet the requirements, the minimum supported version of Rspack is ${picocolors_index_js_default().green(rspackMinVersion)}`);
        let isMultiCompiler = rspackConfigs.length > 1, compiler = isMultiCompiler ? rspack_rspack(rspackConfigs) : rspack_rspack(rspackConfigs[0]), isVersionLogged = !1, isCompiling = !1, logRspackVersion = ()=>{
            isVersionLogged || (index_js_namespaceObject.logger.debug(`using Rspack v${rspack_rspack.rspackVersion}`), isVersionLogged = !0);
        };
        return compiler.hooks.watchRun.tap('rsbuild:compiling', (compiler)=>{
            logRspackVersion(), isCompiling || function(compiler, context) {
                let changedFiles = compiler.modifiedFiles ? Array.from(compiler.modifiedFiles) : null;
                if (changedFiles?.length) {
                    let fileInfo = formatFileList(changedFiles, context.rootPath);
                    index_js_namespaceObject.logger.start(`building ${picocolors_index_js_default().dim(fileInfo)}`);
                    return;
                }
                let removedFiles = compiler.removedFiles ? Array.from(compiler.removedFiles) : null;
                if (removedFiles?.length) {
                    let fileInfo = formatFileList(removedFiles, context.rootPath);
                    index_js_namespaceObject.logger.start(`building ${picocolors_index_js_default().dim(`removed ${fileInfo}`)}`);
                    return;
                }
                index_js_namespaceObject.logger.start('build started...');
            }(compiler, context), isCompiling = !0;
        }), 'build' === context.action && (isMultiCompiler ? compiler.compilers[0] : compiler).hooks.run.tap('rsbuild:run', ()=>{
            index_js_namespaceObject.logger.info('build started...'), logRspackVersion();
        }), compiler.hooks.done.tap('rsbuild:done', (stats)=>{
            ((stats)=>{
                let statsOptions = getStatsOptions(compiler), statsJson = stats.toJson({
                    children: !0,
                    moduleTrace: !0,
                    timings: !0,
                    preset: 'errors-warnings',
                    ...statsOptions
                }), printTime = (c, index)=>{
                    if (c.time) {
                        let time = prettyTime(c.time / 1000), { name } = rspackConfigs[index], suffix = name && isMultiCompiler ? picocolors_index_js_default().dim(` (${name})`) : '';
                        index_js_namespaceObject.logger.ready(`built in ${time}${suffix}`);
                    }
                }, hasErrors = stats.hasErrors();
                hasErrors || (isMultiCompiler && statsJson.children?.length ? statsJson.children.forEach((c, index)=>{
                    printTime(c, index);
                }) : printTime(statsJson, 0));
                let { message, level } = formatStats(statsJson, hasErrors);
                'error' === level && index_js_namespaceObject.logger.error(message), 'warning' === level && index_js_namespaceObject.logger.warn(message), isCompiling = !1;
            })(stats);
        }), 'dev' === context.action && registerDevHook({
            context,
            compiler,
            bundlerConfigs: rspackConfigs,
            MultiStatsCtor: rspack_rspack.MultiStats
        }), await context.hooks.onAfterCreateCompiler.callBatch({
            compiler,
            environments: context.environments
        }), index_js_namespaceObject.logger.debug('compiler created'), {
            compiler,
            rspackConfigs
        };
    }
    let RSPACK_BUILD_ERROR = 'Rspack build failed.', build_build = async (initOptions, { watch, compiler: customCompiler } = {})=>{
        let compiler, bundlerConfigs, { context } = initOptions;
        if (customCompiler) compiler = customCompiler;
        else {
            let result = await createCompiler_createCompiler(initOptions);
            compiler = result.compiler, bundlerConfigs = result.rspackConfigs;
        }
        if (registerBuildHook({
            context,
            bundlerConfigs,
            compiler,
            isWatch: !!watch,
            MultiStatsCtor: rspack_rspack.MultiStats
        }), watch) {
            let watchOptions = bundlerConfigs ? bundlerConfigs.map((options)=>options.watchOptions || {}) : [];
            return compiler.watch(watchOptions.length > 1 ? watchOptions : watchOptions[0] || {}, (err)=>{
                err && index_js_namespaceObject.logger.error(err);
            }), {
                close: ()=>new Promise((resolve)=>{
                        compiler.close(()=>{
                            resolve();
                        });
                    })
            };
        }
        let { stats } = await new Promise((resolve, reject)=>{
            compiler.run((err, stats)=>{
                compiler.close((closeErr)=>{
                    closeErr && index_js_namespaceObject.logger.error('Failed to close compiler: ', closeErr), err ? reject(err) : stats?.hasErrors() ? reject(Error(RSPACK_BUILD_ERROR)) : resolve({
                        stats
                    });
                });
            });
        });
        return {
            stats,
            close: async ()=>{}
        };
    }, types_namespaceObject = require("node:util/types");
    var main = __webpack_require__("../../node_modules/.pnpm/dotenv-expand@12.0.2/node_modules/dotenv-expand/lib/main.js");
    let DOTENV_LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;
    function loadEnv({ cwd = process.cwd(), mode = process.env.NODE_ENV || '', prefixes = [
        'PUBLIC_'
    ], processEnv = process.env } = {}) {
        if ('local' === mode) throw Error(`${picocolors_index_js_default().dim('[rsbuild:loadEnv]')} ${picocolors_index_js_default().yellow('local')} cannot be used as a value for env mode, because ${picocolors_index_js_default().yellow('.env.local')} represents a temporary local file. Please use another value.`);
        let filePaths = [
            '.env',
            '.env.local',
            `.env.${mode}`,
            `.env.${mode}.local`
        ].map((filename)=>(0, external_node_path_.join)(cwd, filename)).filter(isFileSync), parsed = {};
        for (let envPath of filePaths)Object.assign(parsed, function(src) {
            let match, obj = {}, lines = src.toString();
            for(lines = lines.replace(/\r\n?/gm, '\n'); null != (match = DOTENV_LINE.exec(lines));){
                let key = match[1], value = match[2] || '', maybeQuote = (value = value.trim())[0];
                value = value.replace(/^(['"`])([\s\S]*)\1$/gm, '$2'), '"' === maybeQuote && (value = (value = value.replace(/\\n/g, '\n')).replace(/\\r/g, '\r')), obj[key] = value;
            }
            return obj;
        }(external_node_fs_default().readFileSync(envPath))), index_js_namespaceObject.logger.debug('loaded env file:', envPath);
        parsed.NODE_ENV && (processEnv.NODE_ENV = parsed.NODE_ENV), (0, main.expand)({
            parsed,
            processEnv
        });
        let publicVars = {}, rawPublicVars = {};
        for (let key of Object.keys(processEnv))if (prefixes.some((prefix)=>key.startsWith(prefix))) {
            let val = processEnv[key];
            publicVars[`import.meta.env.${key}`] = JSON.stringify(val), publicVars[`process.env.${key}`] = JSON.stringify(val), rawPublicVars[key] = val;
        }
        let cleaned = !1;
        return {
            parsed,
            cleanup: ()=>{
                if (!cleaned) {
                    for (let key of Object.keys(parsed))'NODE_ENV' !== key && processEnv[key] === parsed[key] && delete processEnv[key];
                    cleaned = !0;
                }
            },
            filePaths,
            publicVars,
            rawPublicVars
        };
    }
    let external_node_util_namespaceObject = require("node:util"), chainStaticAssetRule = ({ emit, rule, maxSize, filename, assetType })=>{
        let generatorOptions = {
            filename
        };
        emit || (generatorOptions.emit = !1), rule.oneOf(`${assetType}-asset-url`).type('asset/resource').resourceQuery(/^\?(__inline=false|url)$/).set('generator', generatorOptions), rule.oneOf(`${assetType}-asset-inline`).type('asset/inline').resourceQuery(INLINE_QUERY_REGEX), rule.oneOf(`${assetType}-asset-raw`).type('asset/source').resourceQuery(RAW_QUERY_REGEX), rule.oneOf(`${assetType}-asset`).type('asset').parser({
            dataUrlCondition: {
                maxSize
            }
        }).set('generator', generatorOptions);
    }, isUseAnalyzer = (config)=>process.env.BUNDLE_ANALYZE || config.performance?.bundleAnalyze;
    async function validateWebpackCache(cacheDirectory, buildDependencies) {
        let configFile = (0, external_node_path_.join)(cacheDirectory, 'buildDependencies.json');
        if (await isFileExists(configFile)) {
            let rawConfigFile = await external_node_fs_default().promises.readFile(configFile, 'utf-8'), prevBuildDependencies = null;
            try {
                prevBuildDependencies = JSON.parse(rawConfigFile);
            } catch (e) {
                index_js_namespaceObject.logger.debug('failed to parse the previous buildDependencies.json', e);
            }
            if (JSON.stringify(prevBuildDependencies) === JSON.stringify(buildDependencies)) return;
            await external_node_fs_default().promises.rm(cacheDirectory, {
                force: !0,
                recursive: !0
            });
        }
        try {
            await external_node_fs_default().promises.mkdir(cacheDirectory, {
                recursive: !0
            }), await external_node_fs_default().promises.writeFile(configFile, JSON.stringify(buildDependencies));
        } catch (e) {
            index_js_namespaceObject.logger.debug('failed to write the buildDependencies.json', e);
        }
    }
    async function getBuildDependencies(context, config, environmentContext, userBuildDependencies) {
        let rootPackageJson = (0, external_node_path_.join)(context.rootPath, 'package.json'), browserslistConfig = (0, external_node_path_.join)(context.rootPath, '.browserslistrc'), buildDependencies = {};
        await isFileExists(rootPackageJson) && (buildDependencies.packageJson = [
            rootPackageJson
        ]);
        let { tsconfigPath } = environmentContext;
        tsconfigPath && (buildDependencies.tsconfig = [
            tsconfigPath
        ]), config._privateMeta?.configFilePath && (buildDependencies.rsbuildConfig = [
            config._privateMeta.configFilePath
        ]), await isFileExists(browserslistConfig) && (buildDependencies.browserslistrc = [
            browserslistConfig
        ]);
        let tailwindConfig = findExists([
            'ts',
            'js',
            'cjs',
            'mjs'
        ].map((ext)=>(0, external_node_path_.join)(context.rootPath, `tailwind.config.${ext}`)));
        return tailwindConfig && (buildDependencies.tailwindcss = [
            tailwindConfig
        ]), {
            ...buildDependencies,
            ...userBuildDependencies
        };
    }
    let addTrailingSep = (dir)=>dir.endsWith(external_node_path_.sep) ? dir : dir + external_node_path_.sep, isStrictSubdir = (parent, child)=>{
        let parentDir = addTrailingSep(parent), childDir = addTrailingSep(child);
        return parentDir !== childDir && childDir.startsWith(parentDir);
    }, normalizeCleanDistPath = (userOptions)=>{
        let defaultOptions = {
            enable: 'auto'
        };
        return 'boolean' == typeof userOptions || 'auto' === userOptions ? {
            ...defaultOptions,
            enable: userOptions
        } : {
            ...defaultOptions,
            ...userOptions
        };
    };
    var postcss_load_config_src = __webpack_require__("../../node_modules/.pnpm/postcss-load-config@6.0.1_jiti@2.5.1_postcss@8.5.6_yaml@2.8.0/node_modules/postcss-load-config/src/index.js"), src_default = __webpack_require__.n(postcss_load_config_src);
    let parseMinifyOptions = (config)=>{
        let isProd = 'production' === config.mode, { minify } = config.output;
        if ('boolean' == typeof minify) {
            let shouldMinify = minify && isProd;
            return {
                minifyJs: shouldMinify,
                minifyCss: shouldMinify
            };
        }
        return {
            minifyJs: !1 !== minify.js && ('always' === minify.js || isProd),
            minifyCss: !1 !== minify.css && ('always' === minify.css || isProd),
            jsOptions: minify.jsOptions,
            cssOptions: minify.cssOptions
        };
    }, getLightningCSSLoaderOptions = (config, targets, minify)=>{
        let userOptions = 'object' == typeof config.tools.lightningcssLoader ? config.tools.lightningcssLoader : {}, initialOptions = {
            targets,
            errorRecovery: !0
        };
        return minify && (initialOptions.minify = !0), reduceConfigs({
            initial: initialOptions,
            config: userOptions
        });
    }, clonePostCSSConfig = (config)=>({
            ...config,
            plugins: config.plugins ? [
                ...config.plugins
            ] : void 0
        }), getCSSSourceMap = (config)=>{
        let { sourceMap } = config.output;
        return 'boolean' == typeof sourceMap ? sourceMap : sourceMap.css;
    };
    async function loadUserPostcssrc(root, postcssrcCache) {
        let cached = postcssrcCache.get(root);
        if (cached) return clonePostCSSConfig(await cached);
        let promise = src_default()({}, root).catch((err)=>{
            if (err.message?.includes('No PostCSS Config found')) return {};
            throw err;
        });
        return postcssrcCache.set(root, promise), promise.then((config)=>(postcssrcCache.set(root, config), clonePostCSSConfig(config)));
    }
    let getPostcssLoaderOptions = async ({ config, root, postcssrcCache })=>{
        let extraPlugins = [], userOptions = await loadUserPostcssrc(root, postcssrcCache);
        userOptions.plugins ||= [];
        let finalOptions = reduceConfigsWithContext({
            initial: {
                implementation: getCompiledPath('postcss'),
                postcssOptions: userOptions,
                sourceMap: getCSSSourceMap(config)
            },
            config: config.tools.postcss,
            ctx: {
                addPlugins (plugins) {
                    extraPlugins.push(...helpers_castArray(plugins));
                }
            }
        });
        finalOptions.postcssOptions ||= {};
        let updatePostcssOptions = (options)=>(options.plugins ||= [], extraPlugins.length && options.plugins.push(...extraPlugins), options.plugins = options.plugins.map((plugin)=>((plugin)=>'function' == typeof plugin && plugin.postcss)(plugin) ? plugin() : plugin), options.config = !1, options), { postcssOptions } = finalOptions;
        if ('function' == typeof postcssOptions) {
            let postcssOptionsWrapper = (loaderContext)=>{
                let options = postcssOptions(loaderContext);
                if ('object' != typeof options || null === options) throw Error(`${picocolors_index_js_default().dim('[rsbuild:css]')} \`postcssOptions\` function must return a PostCSSOptions object, got ${picocolors_index_js_default().yellow(typeof options)}.`);
                return updatePostcssOptions({
                    ...userOptions,
                    ...options,
                    plugins: [
                        ...userOptions.plugins || [],
                        ...options.plugins || []
                    ]
                });
            };
            return postcssOptionsWrapper.config = !1, {
                ...finalOptions,
                postcssOptions: postcssOptionsWrapper
            };
        }
        return finalOptions.postcssOptions = updatePostcssOptions(postcssOptions), finalOptions;
    }, external_node_zlib_namespaceObject = require("node:zlib");
    var external_node_zlib_default = __webpack_require__.n(external_node_zlib_namespaceObject);
    let fileSize_gzip = (0, external_node_util_namespaceObject.promisify)(external_node_zlib_default().gzip);
    async function gzipSize(input) {
        let data = await fileSize_gzip(input);
        return Buffer.byteLength(data);
    }
    let EXCLUDE_ASSET_REGEX = /\.(?:map|LICENSE\.txt|d\.ts)$/, excludeAsset = (asset)=>EXCLUDE_ASSET_REGEX.test(asset.name), getAssetColor = (size)=>size > 300000 ? picocolors_index_js_default().red : size > 100000 ? picocolors_index_js_default().yellow : picocolors_index_js_default().green, calcFileSize = (len)=>{
        let val = len / 1000;
        return `${val.toFixed(val < 1 ? 2 : 1)} kB`;
    }, coloringAssetName = (assetName)=>JS_REGEX.test(assetName) ? picocolors_index_js_default().cyan(assetName) : assetName.endsWith('.css') ? picocolors_index_js_default().yellow(assetName) : assetName.endsWith('.html') ? picocolors_index_js_default().green(assetName) : picocolors_index_js_default().magenta(assetName), COMPRESSIBLE_REGEX = /\.(?:js|css|html|json|svg|txt|xml|xhtml|wasm|manifest|md)$/i;
    async function printFileSizes(options, stats, rootPath, distPath, environmentName) {
        let logs = [], showDetail = !1 !== options.detail, showTotal = !1 !== options.total;
        if (!showTotal && !showDetail) return logs;
        let exclude = options.exclude ?? excludeAsset, relativeDistPath = external_node_path_default().relative(rootPath, distPath), formatAsset = async (asset)=>{
            let assetName, fileName = asset.name.split('?')[0], contents = await external_node_fs_default().promises.readFile(external_node_path_default().join(distPath, fileName)), size = Buffer.byteLength(contents), gzippedSize = options.compressed && (assetName = fileName, COMPRESSIBLE_REGEX.test(assetName)) ? await gzipSize(contents) : null, gzipSizeLabel = gzippedSize ? getAssetColor(gzippedSize)(calcFileSize(gzippedSize)) : null;
            return {
                size,
                folder: external_node_path_default().join(relativeDistPath, external_node_path_default().dirname(fileName)),
                name: external_node_path_default().basename(fileName),
                gzippedSize,
                sizeLabel: calcFileSize(size),
                gzipSizeLabel
            };
        }, pickAssetInfo = (asset)=>({
                name: asset.name,
                size: asset.size
            }), getAssets = async ()=>Promise.all(getAssetsFromStats(stats).filter((asset)=>{
                let assetInfo = pickAssetInfo(asset);
                return !exclude(assetInfo) && (!options.include || options.include(assetInfo));
            }).map((asset)=>formatAsset(asset))), assets = await getAssets();
        if (0 === assets.length) return logs;
        logs.push(''), assets.sort((a, b)=>a.size - b.size);
        let totalSize = 0, totalGzipSize = 0;
        for (let asset of (showTotal = showTotal && !(showDetail && 1 === assets.length), assets))totalSize += asset.size, options.compressed && (totalGzipSize += asset.gzippedSize ?? asset.size);
        let fileHeader = showDetail ? `File (${environmentName})` : '', totalSizeLabel = showTotal ? showDetail ? 'Total:' : `Total size (${environmentName}):` : '', totalSizeStr = showTotal ? calcFileSize(totalSize) : '', getCustomTotal = ()=>'function' == typeof options.total ? options.total({
                environmentName,
                distPath: relativeDistPath,
                assets: assets.map((asset)=>pickAssetInfo(asset)),
                totalSize,
                totalGzipSize
            }) : null;
        if (showDetail) {
            let maxFileLength = Math.max(...assets.map((a)=>(a.folder + external_node_path_default().sep + a.name).length), showTotal ? totalSizeLabel.length : 0, fileHeader.length), maxSizeLength = Math.max(...assets.map((a)=>a.sizeLabel.length), totalSizeStr.length), showGzipHeader = !!(options.compressed && assets.some((item)=>null !== item.gzippedSize));
            for (let asset of (logs.push(function(maxFileLength, maxSizeLength, fileHeader, showGzipHeader) {
                let lengths = [
                    maxFileLength,
                    maxSizeLength
                ], rowTypes = [
                    fileHeader,
                    'Size'
                ];
                showGzipHeader && rowTypes.push('Gzip');
                let headerRow = rowTypes.reduce((prev, cur, index)=>{
                    let length = lengths[index], curLabel = cur;
                    return length && (curLabel = cur.length < length ? cur + ' '.repeat(length - cur.length) : cur), `${prev + curLabel}   `;
                }, '');
                return picocolors_index_js_default().blue(headerRow);
            }(maxFileLength, maxSizeLength, fileHeader, showGzipHeader)), assets)){
                let { sizeLabel } = asset, { name, folder, gzipSizeLabel } = asset, fileNameLength = (folder + external_node_path_default().sep + name).length, sizeLength = sizeLabel.length;
                sizeLength < maxSizeLength && (sizeLabel += ' '.repeat(maxSizeLength - sizeLength));
                let fileNameLabel = picocolors_index_js_default().dim(asset.folder + external_node_path_default().sep) + coloringAssetName(asset.name);
                fileNameLength < maxFileLength && (fileNameLabel += ' '.repeat(maxFileLength - fileNameLength));
                let log = `${fileNameLabel}   ${sizeLabel}`;
                gzipSizeLabel && (log += `   ${gzipSizeLabel}`), logs.push(log);
            }
            if (showTotal) {
                logs.push('');
                let customTotal = getCustomTotal();
                if (customTotal) logs.push(customTotal);
                else {
                    let log = '';
                    if (log += ' '.repeat(maxFileLength - totalSizeLabel.length), log += picocolors_index_js_default().magenta(totalSizeLabel), log += `   ${totalSizeStr}`, options.compressed) {
                        let colorFn = getAssetColor(totalGzipSize / assets.length);
                        log += ' '.repeat(maxSizeLength - totalSizeStr.length), log += `   ${colorFn(calcFileSize(totalGzipSize))}`;
                    }
                    logs.push(log);
                }
            }
        } else if (showTotal) {
            let customTotal = getCustomTotal();
            if (customTotal) logs.push(customTotal);
            else {
                let log = `${picocolors_index_js_default().magenta(totalSizeLabel)} ${totalSizeStr}`;
                options.compressed && (log += picocolors_index_js_default().green(` (${calcFileSize(totalGzipSize)} gzipped)`)), logs.push(log);
            }
        }
        return logs.push(''), logs;
    }
    let entryNameSymbol = Symbol('entryName'), VOID_TAGS = [
        'area',
        'base',
        'br',
        'col',
        'embed',
        'hr',
        'img',
        'input',
        'keygen',
        'link',
        'meta',
        'param',
        'source',
        'track',
        'wbr'
    ], HEAD_TAGS = [
        'title',
        'base',
        'link',
        'style',
        'meta',
        "script",
        "noscript",
        'template'
    ], FILE_ATTRS = {
        link: 'href',
        script: 'src'
    }, getTagPriority = (tag, tagConfig)=>{
        let priority = tag.head ?? HEAD_TAGS.includes(tag.tag) ? -2 : 2, append = tag.append ?? tagConfig.append;
        return 'boolean' == typeof append && (priority += append ? 1 : -1), priority;
    }, formatBasicTag = (tag)=>({
            tag: tag.tagName,
            attrs: tag.attributes,
            children: tag.innerHTML,
            metadata: tag.meta
        }), fromBasicTag = (tag)=>({
            meta: tag.metadata ?? {},
            tagName: tag.tag,
            attributes: tag.attrs ?? {},
            voidTag: VOID_TAGS.includes(tag.tag),
            innerHTML: tag.children
        }), formatTags = (tags, override)=>tags.map((tag)=>({
                ...formatBasicTag(tag),
                publicPath: !1,
                ...override
            }));
    class RsbuildHtmlPlugin {
        name;
        getExtraData;
        constructor(getExtraData){
            this.name = 'RsbuildHtmlPlugin', this.getExtraData = getExtraData;
        }
        apply(compiler) {
            let emitFavicon = async ({ compilation, favicon, faviconDistPath })=>{
                let buffer, name = external_node_path_default().basename(favicon);
                if (compilation.assets[name]) return name;
                if (!compilation.inputFileSystem) return addCompilationError(compilation, `${picocolors_index_js_default().dim('[rsbuild:html]')} Failed to read the favicon file as ${picocolors_index_js_default().yellow('compilation.inputFileSystem')} is not available.`), null;
                let inputFilename = external_node_path_default().isAbsolute(favicon) ? favicon : external_node_path_default().join(compilation.compiler.context, favicon);
                try {
                    if (!(buffer = await (0, external_node_util_namespaceObject.promisify)(compilation.inputFileSystem.readFile)(inputFilename))) throw Error('Buffer is undefined');
                } catch (error) {
                    return index_js_namespaceObject.logger.debug(`read favicon error: ${error}`), addCompilationError(compilation, `${picocolors_index_js_default().dim('[rsbuild:html]')} Failed to read the favicon file at ${picocolors_index_js_default().yellow(inputFilename)}.`), null;
                }
                let source = new compiler.webpack.sources.RawSource(buffer, !1), outputFilename = external_node_path_default().posix.join(faviconDistPath, name);
                return compilation.emitAsset(outputFilename, source), outputFilename;
            }, addFavicon = async ({ headTags, favicon, faviconDistPath, compilation, publicPath })=>{
                let href = favicon;
                if (!isURL(favicon)) {
                    let name = await emitFavicon({
                        compilation,
                        favicon,
                        faviconDistPath
                    });
                    if (null === name) return;
                    href = ensureAssetPrefix(name, publicPath);
                }
                let tag = {
                    tagName: 'link',
                    voidTag: !0,
                    attributes: {
                        rel: 'icon',
                        href
                    },
                    meta: {}
                };
                href.endsWith('.svg') && (tag.attributes.type = 'image/svg+xml'), headTags.unshift(tag);
            }, getExtraDataByPlugin = (plugin)=>{
                if (!plugin.options) return;
                let entryName = plugin.options[entryNameSymbol];
                if (entryName) return this.getExtraData(entryName);
            };
            compiler.hooks.compilation.tap(this.name, (compilation)=>{
                let hooks = getHTMLPlugin().getCompilationHooks(compilation);
                hooks.alterAssetTagGroups.tapPromise(this.name, async (data)=>{
                    let html, extraData = getExtraDataByPlugin(data.plugin);
                    if (!extraData) return data;
                    let { headTags, bodyTags } = data, { favicon, faviconDistPath, context, tagConfig, entryName, environment, templateContent } = extraData;
                    (html = templateContent) && /<title/i.test(html) && /<\/title/i.test(html) || ((headTags, title = '')=>{
                        '' !== title && void 0 !== title && headTags.unshift({
                            tagName: 'title',
                            innerHTML: title,
                            attributes: {},
                            voidTag: !1,
                            meta: {}
                        });
                    })(headTags, data.plugin.options?.title), favicon && await addFavicon({
                        headTags,
                        favicon,
                        faviconDistPath,
                        compilation,
                        publicPath: data.publicPath
                    });
                    let tags = {
                        headTags: headTags.map(formatBasicTag),
                        bodyTags: bodyTags.map(formatBasicTag)
                    }, [modified] = await context.hooks.modifyHTMLTags.callChain({
                        environment: environment.name,
                        args: [
                            tags,
                            {
                                compiler,
                                compilation,
                                assetPrefix: data.publicPath,
                                filename: data.outputName,
                                environment
                            }
                        ]
                    });
                    return Object.assign(data, {
                        headTags: modified.headTags.map(fromBasicTag),
                        bodyTags: modified.bodyTags.map(fromBasicTag)
                    }), tagConfig && ((data, tagConfig, compilationHash, entryName)=>{
                        if (!tagConfig.tags?.length) return;
                        let fromInjectTags = (tags)=>{
                            let ret = [];
                            for (let tag of tags){
                                let attrs = {
                                    ...tag.attrs
                                }, filenameTag = FILE_ATTRS[tag.tag], filename = attrs[filenameTag];
                                if ('string' == typeof filename) {
                                    let optPublicPath = tag.publicPath ?? tagConfig.publicPath;
                                    'function' == typeof optPublicPath ? filename = optPublicPath(filename, data.publicPath) : 'string' == typeof optPublicPath ? filename = ensureAssetPrefix(filename, optPublicPath) : !1 !== optPublicPath && (filename = ensureAssetPrefix(filename, data.publicPath));
                                    let optHash = tag.hash ?? tagConfig.hash;
                                    'function' == typeof optHash ? compilationHash.length && (filename = optHash(filename, compilationHash)) : 'string' == typeof optHash ? optHash.length && (filename = `${filename}?${optHash}`) : !0 === optHash && compilationHash.length && (filename = `${filename}?${compilationHash}`), attrs[filenameTag] = filename, tag.attrs = attrs;
                                }
                                ret.push(fromBasicTag(tag));
                            }
                            return ret;
                        }, tags = [
                            ...formatTags(data.headTags, {
                                head: !0
                            }),
                            ...formatTags(data.bodyTags, {
                                head: !1
                            })
                        ], context = {
                            hash: compilationHash,
                            entryName,
                            outputName: data.outputName,
                            publicPath: data.publicPath
                        };
                        for (let item of tagConfig.tags)isFunction(item) ? tags = item(tags, context) || tags : tags.push(item), tags = tags.sort((tag1, tag2)=>getTagPriority(tag1, tagConfig) - getTagPriority(tag2, tagConfig));
                        let [headTags, bodyTags] = function(array, predicate) {
                            let truthy = [], falsy = [];
                            for (let value of array)predicate(value) ? truthy.push(value) : falsy.push(value);
                            return [
                                truthy,
                                falsy
                            ];
                        }(tags, (tag)=>tag.head ?? HEAD_TAGS.includes(tag.tag));
                        return data.headTags = fromInjectTags(headTags), data.bodyTags = fromInjectTags(bodyTags);
                    })(data, tagConfig, compilation.hash ?? '', entryName), data;
                }), hooks.beforeEmit.tapPromise(this.name, async (data)=>{
                    let extraData = getExtraDataByPlugin(data.plugin);
                    if (!extraData) return data;
                    let { context, environment } = extraData, [modified] = await context.hooks.modifyHTML.callChain({
                        environment: environment.name,
                        args: [
                            data.html,
                            {
                                compiler,
                                compilation,
                                filename: data.outputName,
                                environment
                            }
                        ]
                    });
                    return {
                        ...data,
                        html: modified
                    };
                });
            });
        }
    }
    let existTemplatePath = new Set();
    async function getTemplate(entryName, config, rootPath) {
        let templatePath = reduceConfigsMergeContext({
            initial: '',
            config: config.html.template,
            ctx: {
                entryName
            }
        });
        if (!templatePath) {
            let mountId;
            return {
                templatePath: void 0,
                templateContent: (mountId = config.html.mountId, `<!doctype html><html><head></head><body><div id="${mountId}"></div></body></html>`)
            };
        }
        let absolutePath = (0, external_node_path_.isAbsolute)(templatePath) ? templatePath : external_node_path_default().join(rootPath, templatePath);
        if (!existTemplatePath.has(absolutePath)) {
            if (!await isFileExists(absolutePath)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:html]')} Failed to resolve HTML template, check if the file exists: ${picocolors_index_js_default().yellow(absolutePath)}`);
            existTemplatePath.add(absolutePath);
        }
        let templateContent = await external_node_fs_default().promises.readFile(absolutePath, 'utf-8');
        return {
            templatePath: absolutePath,
            templateContent
        };
    }
    function updateSourceMappingURL({ source, compilation, publicPath, type, config }) {
        let { devtool } = compilation.options;
        if (devtool && !devtool.includes('inline') && source.includes('# sourceMappingURL')) {
            let prefix = addTrailingSlash(external_node_path_default().join(publicPath, config.output.distPath[type] || ''));
            return source.replace(/# sourceMappingURL=/, `# sourceMappingURL=${prefix}`);
        }
        return source;
    }
    function matchTests(name, asset, tests) {
        return tests.some((test)=>isFunction(test) ? test({
                name,
                size: asset.size()
            }) : test.exec(name));
    }
    let getInlineTests = (config)=>{
        let isProd = 'production' === config.mode, { inlineStyles, inlineScripts } = config.output, scriptTests = [], styleTests = [];
        return inlineScripts && (!0 === inlineScripts ? isProd && scriptTests.push(JS_REGEX) : (0, types_namespaceObject.isRegExp)(inlineScripts) || isFunction(inlineScripts) ? isProd && scriptTests.push(inlineScripts) : ('auto' === inlineScripts.enable ? isProd : inlineScripts.enable) && scriptTests.push(inlineScripts.test)), inlineStyles && (!0 === inlineStyles ? isProd && styleTests.push(CSS_REGEX) : (0, types_namespaceObject.isRegExp)(inlineStyles) || isFunction(inlineStyles) ? isProd && styleTests.push(inlineStyles) : ('auto' === inlineStyles.enable ? isProd : inlineStyles.enable) && styleTests.push(inlineStyles.test)), {
            scriptTests,
            styleTests
        };
    }, external_node_buffer_namespaceObject = require("node:buffer"), external_node_child_process_namespaceObject = require("node:child_process"), promises_namespaceObject = require("node:fs/promises");
    function isInsideContainer() {
        return void 0 === cachedResult && (cachedResult = (()=>{
            try {
                return external_node_fs_namespaceObject.statSync('/run/.containerenv'), !0;
            } catch  {
                return !1;
            }
        })() || (void 0 === isDockerCached && (isDockerCached = function() {
            try {
                return external_node_fs_namespaceObject.statSync('/.dockerenv'), !0;
            } catch  {
                return !1;
            }
        }() || function() {
            try {
                return external_node_fs_namespaceObject.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');
            } catch  {
                return !1;
            }
        }()), isDockerCached)), cachedResult;
    }
    let isWsl = ()=>{
        if ('linux' !== external_node_process_namespaceObject.platform) return !1;
        if (external_node_os_namespaceObject.release().toLowerCase().includes('microsoft')) return !isInsideContainer();
        try {
            return !!external_node_fs_namespaceObject.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') && !isInsideContainer();
        } catch  {
            return !1;
        }
    }, is_wsl = external_node_process_namespaceObject.env.__IS_WSL_TEST__ ? isWsl : isWsl(), wslDrivesMountPoint = (()=>{
        let mountPoint, defaultMountPoint = '/mnt/';
        return async function() {
            if (mountPoint) return mountPoint;
            let configFilePath = '/etc/wsl.conf', isConfigFileExists = !1;
            try {
                await promises_namespaceObject.access(configFilePath, promises_namespaceObject.constants.F_OK), isConfigFileExists = !0;
            } catch  {}
            if (!isConfigFileExists) return defaultMountPoint;
            let configContent = await promises_namespaceObject.readFile(configFilePath, {
                encoding: 'utf8'
            }), configMountPoint = /(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(configContent);
            return configMountPoint ? mountPoint = (mountPoint = configMountPoint.groups.mountPoint.trim()).endsWith('/') ? mountPoint : `${mountPoint}/` : defaultMountPoint;
        };
    })(), powerShellPathFromWsl = async ()=>{
        let mountPoint = await wslDrivesMountPoint();
        return `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`;
    }, powerShellPath = async ()=>is_wsl ? powerShellPathFromWsl() : `${external_node_process_namespaceObject.env.SYSTEMROOT || external_node_process_namespaceObject.env.windir || String.raw`C:\Windows`}\\System32\\WindowsPowerShell\\v1.0\\powershell.exe`;
    function defineLazyProperty(object, propertyName, valueGetter) {
        let define = (value)=>Object.defineProperty(object, propertyName, {
                value,
                enumerable: !0,
                writable: !0
            });
        return Object.defineProperty(object, propertyName, {
            configurable: !0,
            enumerable: !0,
            get () {
                let result = valueGetter();
                return define(result), result;
            },
            set (value) {
                define(value);
            }
        }), object;
    }
    let execFileAsync = (0, external_node_util_namespaceObject.promisify)(external_node_child_process_namespaceObject.execFile);
    async function defaultBrowserId() {
        if ('darwin' !== external_node_process_namespaceObject.platform) throw Error('macOS only');
        let { stdout } = await execFileAsync('defaults', [
            'read',
            'com.apple.LaunchServices/com.apple.launchservices.secure',
            'LSHandlers'
        ]), match = /LSHandlerRoleAll = "(?!-)(?<id>[^"]+?)";\s+?LSHandlerURLScheme = (?:http|https);/.exec(stdout);
        return match?.groups.id ?? 'com.apple.Safari';
    }
    let run_applescript_execFileAsync = (0, external_node_util_namespaceObject.promisify)(external_node_child_process_namespaceObject.execFile);
    async function runAppleScript(script, { humanReadableOutput = !0 } = {}) {
        if ('darwin' !== external_node_process_namespaceObject.platform) throw Error('macOS only');
        let { stdout } = await run_applescript_execFileAsync("osascript", [
            '-e',
            script,
            humanReadableOutput ? [] : [
                '-ss'
            ]
        ]);
        return stdout.trim();
    }
    async function bundleName(bundleId) {
        return runAppleScript(`tell application "Finder" to set app_path to application file id "${bundleId}" as string\ntell application "System Events" to get value of property list item "CFBundleName" of property list file (app_path & ":Contents:Info.plist")`);
    }
    let windows_execFileAsync = (0, external_node_util_namespaceObject.promisify)(external_node_child_process_namespaceObject.execFile), windowsBrowserProgIds = {
        AppXq0fevzme2pys62n3e0fbqa7peapykr8v: {
            name: 'Edge',
            id: 'com.microsoft.edge.old'
        },
        MSEdgeDHTML: {
            name: 'Edge',
            id: 'com.microsoft.edge'
        },
        MSEdgeHTM: {
            name: 'Edge',
            id: 'com.microsoft.edge'
        },
        'IE.HTTP': {
            name: 'Internet Explorer',
            id: 'com.microsoft.ie'
        },
        FirefoxURL: {
            name: 'Firefox',
            id: 'org.mozilla.firefox'
        },
        ChromeHTML: {
            name: 'Chrome',
            id: 'com.google.chrome'
        },
        BraveHTML: {
            name: 'Brave',
            id: 'com.brave.Browser'
        },
        BraveBHTML: {
            name: 'Brave Beta',
            id: 'com.brave.Browser.beta'
        },
        BraveSSHTM: {
            name: 'Brave Nightly',
            id: 'com.brave.Browser.nightly'
        }
    };
    class UnknownBrowserError extends Error {
    }
    async function defaultBrowser(_execFileAsync = windows_execFileAsync) {
        let { stdout } = await _execFileAsync('reg', [
            'QUERY',
            ' HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice',
            '/v',
            'ProgId'
        ]), match = /ProgId\s*REG_SZ\s*(?<id>\S+)/.exec(stdout);
        if (!match) throw new UnknownBrowserError(`Cannot find Windows browser in stdout: ${JSON.stringify(stdout)}`);
        let { id } = match.groups, browser = windowsBrowserProgIds[id];
        if (!browser) throw new UnknownBrowserError(`Unknown browser ID: ${id}`);
        return browser;
    }
    let default_browser_execFileAsync = (0, external_node_util_namespaceObject.promisify)(external_node_child_process_namespaceObject.execFile);
    async function default_browser_defaultBrowser() {
        if ('darwin' === external_node_process_namespaceObject.platform) {
            let id = await defaultBrowserId();
            return {
                name: await bundleName(id),
                id
            };
        }
        if ('linux' === external_node_process_namespaceObject.platform) {
            let { stdout } = await default_browser_execFileAsync('xdg-mime', [
                'query',
                'default',
                'x-scheme-handler/http'
            ]), id = stdout.trim();
            return {
                name: id.replace(/.desktop$/, '').replace('-', ' ').toLowerCase().replaceAll(/(?:^|\s|-)\S/g, (x)=>x.toUpperCase()),
                id
            };
        }
        if ('win32' === external_node_process_namespaceObject.platform) return defaultBrowser();
        throw Error('Only macOS, Linux, and Windows are supported');
    }
    let execFile = (0, external_node_util_namespaceObject.promisify)(external_node_child_process_namespaceObject.execFile), open_dirname = external_node_path_.dirname((0, external_node_url_.fileURLToPath)(__rslib_import_meta_url__)), localXdgOpenPath = external_node_path_.join(open_dirname, 'xdg-open'), { platform, arch } = external_node_process_namespaceObject;
    async function getWindowsDefaultBrowserFromWsl() {
        let powershellPath = await powerShellPath(), rawCommand = String.raw`(Get-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice").ProgId`, encodedCommand = external_node_buffer_namespaceObject.Buffer.from(rawCommand, 'utf16le').toString('base64'), { stdout } = await execFile(powershellPath, [
            '-NoProfile',
            '-NonInteractive',
            '-ExecutionPolicy',
            'Bypass',
            '-EncodedCommand',
            encodedCommand
        ], {
            encoding: 'utf8'
        }), progId = stdout.trim(), browserMap = {
            ChromeHTML: 'com.google.chrome',
            BraveHTML: 'com.brave.Browser',
            MSEdgeHTM: 'com.microsoft.edge',
            FirefoxURL: 'org.mozilla.firefox'
        };
        return browserMap[progId] ? {
            id: browserMap[progId]
        } : {};
    }
    let pTryEach = async (array, mapper)=>{
        let latestError;
        for (let item of array)try {
            return await mapper(item);
        } catch (error) {
            latestError = error;
        }
        throw latestError;
    }, baseOpen = async (options)=>{
        let command;
        if (Array.isArray((options = {
            wait: !1,
            background: !1,
            newInstance: !1,
            allowNonzeroExitCode: !1,
            ...options
        }).app)) return pTryEach(options.app, (singleApp)=>baseOpen({
                ...options,
                app: singleApp
            }));
        let { name: app, arguments: appArguments = [] } = options.app ?? {};
        if (appArguments = [
            ...appArguments
        ], Array.isArray(app)) return pTryEach(app, (appName)=>baseOpen({
                ...options,
                app: {
                    name: appName,
                    arguments: appArguments
                }
            }));
        if ('browser' === app || 'browserPrivate' === app) {
            let ids = {
                'com.google.chrome': 'chrome',
                'google-chrome.desktop': 'chrome',
                'com.brave.Browser': 'brave',
                'org.mozilla.firefox': 'firefox',
                'firefox.desktop': 'firefox',
                'com.microsoft.msedge': 'edge',
                'com.microsoft.edge': 'edge',
                'com.microsoft.edgemac': 'edge',
                'microsoft-edge.desktop': 'edge'
            }, browser = is_wsl ? await getWindowsDefaultBrowserFromWsl() : await default_browser_defaultBrowser();
            if (browser.id in ids) {
                let browserName = ids[browser.id];
                return 'browserPrivate' === app && appArguments.push({
                    chrome: '--incognito',
                    brave: '--incognito',
                    firefox: '--private-window',
                    edge: '--inPrivate'
                }[browserName]), baseOpen({
                    ...options,
                    app: {
                        name: apps[browserName],
                        arguments: appArguments
                    }
                });
            }
            throw Error(`${browser.name} is not supported as a default browser`);
        }
        let cliArguments = [], childProcessOptions = {};
        if ('darwin' === platform) command = 'open', options.wait && cliArguments.push('--wait-apps'), options.background && cliArguments.push('--background'), options.newInstance && cliArguments.push('--new'), app && cliArguments.push('-a', app);
        else if ('win32' !== platform && (!is_wsl || isInsideContainer() || app)) {
            if (app) command = app;
            else {
                let isBundled = !open_dirname || '/' === open_dirname, exeLocalXdgOpen = !1;
                try {
                    await promises_namespaceObject.access(localXdgOpenPath, promises_namespaceObject.constants.X_OK), exeLocalXdgOpen = !0;
                } catch  {}
                command = external_node_process_namespaceObject.versions.electron ?? ('android' === platform || isBundled || !exeLocalXdgOpen) ? 'xdg-open' : localXdgOpenPath;
            }
            appArguments.length > 0 && cliArguments.push(...appArguments), options.wait || (childProcessOptions.stdio = 'ignore', childProcessOptions.detached = !0);
        } else {
            command = await powerShellPath(), cliArguments.push('-NoProfile', '-NonInteractive', '-ExecutionPolicy', 'Bypass', '-EncodedCommand'), is_wsl || (childProcessOptions.windowsVerbatimArguments = !0);
            let encodedArguments = [
                'Start'
            ];
            options.wait && encodedArguments.push('-Wait'), app ? (encodedArguments.push(`"\`"${app}\`""`), options.target && appArguments.push(options.target)) : options.target && encodedArguments.push(`"${options.target}"`), appArguments.length > 0 && (appArguments = appArguments.map((argument)=>`"\`"${argument}\`""`), encodedArguments.push('-ArgumentList', appArguments.join(','))), options.target = external_node_buffer_namespaceObject.Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');
        }
        'darwin' === platform && appArguments.length > 0 && cliArguments.push('--args', ...appArguments), options.target && cliArguments.push(options.target);
        let subprocess = external_node_child_process_namespaceObject.spawn(command, cliArguments, childProcessOptions);
        return options.wait ? new Promise((resolve, reject)=>{
            subprocess.once('error', reject), subprocess.once('close', (exitCode)=>{
                if (!options.allowNonzeroExitCode && exitCode > 0) return void reject(Error(`Exited with code ${exitCode}`));
                resolve(subprocess);
            });
        }) : (subprocess.unref(), subprocess);
    };
    function detectArchBinary(binary) {
        if ('string' == typeof binary || Array.isArray(binary)) return binary;
        let { [arch]: archBinary } = binary;
        if (!archBinary) throw Error(`${arch} is not supported`);
        return archBinary;
    }
    function detectPlatformBinary({ [platform]: platformBinary }, { wsl }) {
        if (wsl && is_wsl) return detectArchBinary(wsl);
        if (!platformBinary) throw Error(`${platform} is not supported`);
        return detectArchBinary(platformBinary);
    }
    let apps = {};
    defineLazyProperty(apps, 'chrome', ()=>detectPlatformBinary({
            darwin: 'google chrome',
            win32: 'chrome',
            linux: [
                'google-chrome',
                'google-chrome-stable',
                'chromium'
            ]
        }, {
            wsl: {
                ia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',
                x64: [
                    '/mnt/c/Program Files/Google/Chrome/Application/chrome.exe',
                    '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe'
                ]
            }
        })), defineLazyProperty(apps, 'brave', ()=>detectPlatformBinary({
            darwin: 'brave browser',
            win32: 'brave',
            linux: [
                'brave-browser',
                'brave'
            ]
        }, {
            wsl: {
                ia32: '/mnt/c/Program Files (x86)/BraveSoftware/Brave-Browser/Application/brave.exe',
                x64: [
                    '/mnt/c/Program Files/BraveSoftware/Brave-Browser/Application/brave.exe',
                    '/mnt/c/Program Files (x86)/BraveSoftware/Brave-Browser/Application/brave.exe'
                ]
            }
        })), defineLazyProperty(apps, 'firefox', ()=>detectPlatformBinary({
            darwin: 'firefox',
            win32: String.raw`C:\Program Files\Mozilla Firefox\firefox.exe`,
            linux: 'firefox'
        }, {
            wsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'
        })), defineLazyProperty(apps, 'edge', ()=>detectPlatformBinary({
            darwin: 'microsoft edge',
            win32: 'msedge',
            linux: [
                'microsoft-edge',
                'microsoft-edge-dev'
            ]
        }, {
            wsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'
        })), defineLazyProperty(apps, 'browser', ()=>'browser'), defineLazyProperty(apps, 'browserPrivate', ()=>'browserPrivate');
    let normalizeUrl = (url)=>url.replace(/([^:]\/)\/+/g, '$1'), joinUrlSegments = (s1, s2)=>s1 && s2 ? addTrailingSlash(s1) + removeLeadingSlash(s2) : s1 || s2 || '', stripBase = (path, base)=>{
        if (path === base) return '/';
        let trailingSlashBase = addTrailingSlash(base);
        return path.startsWith(trailingSlashBase) ? path.slice(trailingSlashBase.length - 1) : path;
    }, getRoutes = (context)=>Object.values(context.environments).reduce((prev, environmentContext)=>{
            let { distPath, config } = environmentContext, distPrefix = (0, external_node_path_.relative)(context.distPath, distPath).split(external_node_path_.sep).join('/'), routes = formatRoutes(environmentContext.htmlPaths, context.normalizedConfig.server.base, external_node_path_.posix.join(distPrefix, config.output.distPath.html), config.html.outputStructure);
            return prev.concat(...routes);
        }, []), formatRoutes = (entry, base, distPathPrefix, outputStructure)=>{
        let prefix = joinUrlSegments(base, ((input)=>{
            let prefix = input;
            if (prefix?.startsWith('./') && (prefix = prefix.replace('./', '')), !prefix) return '/';
            let hasLeadingSlash = prefix.startsWith('/'), hasTailSlash = prefix.endsWith('/');
            return `${hasLeadingSlash ? '' : '/'}${prefix}${hasTailSlash ? '' : '/'}`;
        })(distPathPrefix));
        return Object.keys(entry).map((entryName)=>({
                entryName,
                pathname: prefix + ('index' === entryName && 'nested' !== outputStructure ? '' : entryName)
            })).sort((a)=>'index' === a.entryName ? -1 : 1);
    };
    function printServerURLs({ urls: originalUrls, port, routes, protocol, printUrls, trailingLineBreak = !0 }) {
        if (!1 === printUrls) return null;
        let urls = originalUrls, useCustomUrl = isFunction(printUrls);
        if (useCustomUrl) {
            let newUrls = printUrls({
                urls: urls.map((item)=>item.url),
                port,
                routes,
                protocol
            });
            if (!newUrls) return null;
            if (!Array.isArray(newUrls)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} "server.printUrls" must return an array, but got ${typeof newUrls}.`);
            urls = newUrls.map((url)=>({
                    url,
                    label: getUrlLabel(url)
                }));
        }
        if (0 === urls.length || 0 === routes.length && !useCustomUrl) return null;
        let message = function(urls, routes) {
            if (routes.length <= 1) {
                let pathname = routes.length ? routes[0].pathname : '';
                return urls.map(({ label, url })=>{
                    let normalizedPathname = normalizeUrl(`${url}${pathname}`), prefix = `\u{279C}  ${picocolors_index_js_default().dim(label.padEnd(10))}`;
                    return `  ${prefix}${picocolors_index_js_default().cyan(normalizedPathname)}\n`;
                }).join('');
            }
            let message = '', maxNameLength = Math.max(...routes.map((r)=>r.entryName.length));
            return urls.forEach(({ label, url }, index)=>{
                for (let r of (index > 0 && (message += '\n'), message += `  \u{279C}  ${label}\n`, routes))message += `  ${picocolors_index_js_default().dim('-')} ${picocolors_index_js_default().dim(r.entryName.padEnd(maxNameLength + 4))}${picocolors_index_js_default().cyan(normalizeUrl(`${url}${r.pathname}`))}\n`;
            }), message;
        }(urls, routes);
        return !trailingLineBreak && message.endsWith('\n') && (message = message.slice(0, -1)), index_js_namespaceObject.logger.log(message), message;
    }
    let getPort = async ({ host, port, strictPort, tryLimits = 20 })=>{
        'string' == typeof port && (port = Number.parseInt(port, 10)), strictPort && (tryLimits = 1);
        let { createServer } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:net")), original = port, found = !1, attempts = 0;
        for(; !found && attempts <= tryLimits;)try {
            await new Promise((resolve, reject)=>{
                let server = createServer();
                server.unref(), server.on('error', reject), server.listen({
                    port,
                    host
                }, ()=>{
                    found = !0, server.close(resolve);
                });
            });
        } catch (e) {
            if ('EADDRINUSE' !== e.code) throw e;
            port++, attempts++;
        }
        if (port !== original && strictPort) throw Error(`${picocolors_index_js_default().dim('[rsbuild:server]')} Port ${picocolors_index_js_default().yellow(original)} is occupied, please choose another one.`);
        return port;
    }, getServerConfig = async ({ config })=>{
        let { host, port: originalPort, strictPort } = config.server, port = await getPort({
            host,
            port: originalPort,
            strictPort
        }), https = !!config.server.https, portTip = port !== originalPort ? `port ${originalPort} is in use, ${picocolors_index_js_default().yellow(`using port ${port}.`)}` : void 0;
        return {
            port,
            host,
            https,
            portTip
        };
    }, isLoopbackHost = (host)=>new Set([
            'localhost',
            '127.0.0.1',
            '::1',
            '0000:0000:0000:0000:0000:0000:0000:0001'
        ]).has(host), getHostInUrl = async (host)=>{
        if (host === DEFAULT_DEV_HOST) return 'localhost';
        let { isIPv6 } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:net"));
        return isIPv6(host) ? '::' === host ? '[::1]' : `[${host}]` : host;
    }, concatUrl = ({ host, port, protocol })=>`${protocol}://${host}:${port}`, LOCAL_LABEL = 'Local:  ', NETWORK_LABEL = 'Network:  ', getUrlLabel = (url)=>{
        try {
            let { hostname } = new URL(url);
            return isLoopbackHost(hostname) ? LOCAL_LABEL : NETWORK_LABEL;
        } catch  {
            return NETWORK_LABEL;
        }
    }, getAddressUrls = async ({ protocol = 'http', port, host })=>{
        if (host && host !== DEFAULT_DEV_HOST) {
            let url = concatUrl({
                port,
                host: await getHostInUrl(host),
                protocol
            });
            return [
                {
                    label: isLoopbackHost(host) ? LOCAL_LABEL : NETWORK_LABEL,
                    url
                }
            ];
        }
        let ipv4Interfaces = (()=>{
            let interfaces = external_node_os_default().networkInterfaces(), ipv4Interfaces = new Map();
            for (let key of Object.keys(interfaces))for (let detail of interfaces[key]){
                let familyV4Value = 'string' == typeof detail.family ? 'IPv4' : 4;
                detail.family !== familyV4Value || ipv4Interfaces.has(detail.address) || ipv4Interfaces.set(detail.address, detail);
            }
            return Array.from(ipv4Interfaces.values());
        })(), addressUrls = [], hasLocalUrl = !1;
        for (let detail of ipv4Interfaces)if (isLoopbackHost(detail.address) || detail.internal) {
            if (hasLocalUrl) continue;
            addressUrls.push({
                label: LOCAL_LABEL,
                url: concatUrl({
                    host: 'localhost',
                    port,
                    protocol
                })
            }), hasLocalUrl = !0;
        } else addressUrls.push({
            label: NETWORK_LABEL,
            url: concatUrl({
                host: detail.address,
                port,
                protocol
            })
        });
        return addressUrls;
    };
    function getServerTerminator(server) {
        let listened = !1, pendingSockets = new Set(), onConnection = (socket)=>{
            pendingSockets.add(socket), socket.on('close', ()=>{
                pendingSockets.delete(socket);
            });
        };
        return server.on('connection', onConnection), server.on('secureConnection', onConnection), server.once('listening', ()=>{
            listened = !0;
        }), ()=>new Promise((resolve, reject)=>{
                for (let socket of pendingSockets)socket.destroy();
                listened ? server.close((err)=>{
                    err ? reject(err) : resolve();
                }) : resolve();
            });
    }
    let supportedChromiumBrowsers = [
        'Google Chrome Canary',
        'Google Chrome Dev',
        'Google Chrome Beta',
        'Google Chrome',
        'Microsoft Edge',
        'Brave Browser',
        'Vivaldi',
        'Chromium'
    ], mapChromiumBrowserName = (browser)=>'chrome' === browser || 'google chrome' === browser ? 'Google Chrome' : browser;
    async function openBrowser(url) {
        var browser, browserArgs;
        let browser1 = process.env.BROWSER, browserArgs1 = process.env.BROWSER_ARGS;
        if (browser = browser1, browserArgs = browserArgs1, 'darwin' === process.platform && (!browser || !browserArgs) && (!browser || supportedChromiumBrowsers.includes(mapChromiumBrowserName(browser)))) {
            let { exec } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:child_process")), { promisify } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:util")), execAsync = promisify(exec), getDefaultBrowserForAppleScript = async ()=>{
                let { stdout: ps } = await execAsync('ps cax');
                return supportedChromiumBrowsers.find((b)=>ps.includes(b));
            };
            try {
                let chromiumBrowser = browser1 ? mapChromiumBrowserName(browser1) : await getDefaultBrowserForAppleScript();
                if (chromiumBrowser) return await execAsync(`osascript openChrome.applescript "${encodeURI(url)}" "${chromiumBrowser}"`, {
                    cwd: STATIC_PATH
                }), !0;
                index_js_namespaceObject.logger.debug('failed to find the target browser.');
            } catch (err) {
                index_js_namespaceObject.logger.debug("failed to open start URL with apple script."), index_js_namespaceObject.logger.debug(err);
            }
        }
        try {
            let options = browser1 ? {
                app: {
                    name: apps[browser1] ?? browser1,
                    arguments: browserArgs1?.split(' ')
                }
            } : {};
            return (await ((target, options)=>{
                if ('string' != typeof target) throw TypeError('Expected a `target`');
                return baseOpen({
                    ...options,
                    target
                });
            })(url, options)).on('error', (err)=>{
                index_js_namespaceObject.logger.error('Failed to launch browser in child process', err);
            }), !0;
        } catch (err) {
            return index_js_namespaceObject.logger.error('Failed to launch browser.'), index_js_namespaceObject.logger.error(err), !1;
        }
    }
    let openedURLs = [], replacePortPlaceholder = (url, port)=>url.replace(/<port>/g, String(port));
    async function server_open_open({ https, port, routes, config, clearCache }) {
        if ('true' === process.env.CSB) return;
        let { targets, before } = ((config)=>{
            let { open } = config.server;
            return 'boolean' == typeof open ? {
                targets: []
            } : 'string' == typeof open ? {
                targets: [
                    open
                ]
            } : Array.isArray(open) ? {
                targets: open
            } : {
                targets: open.target ? helpers_castArray(open.target) : [],
                before: open.before
            };
        })(config);
        clearCache && (openedURLs = []);
        let urls = [], host = await getHostInUrl(config.server.host), baseUrl = `${https ? 'https' : 'http'}://${host}:${port}`;
        for (let url of (targets.length ? urls.push(...targets.map((target)=>(function(str, base) {
                if (canParse(str)) return str;
                try {
                    return new URL(str, base).href;
                } catch  {
                    throw Error(`${picocolors_index_js_default().dim('[rsbuild:open]')} Invalid input: ${picocolors_index_js_default().yellow(str)} is not a valid URL or pathname`);
                }
            })(replacePortPlaceholder(target, port), baseUrl))) : routes.length && urls.push(`${baseUrl}${routes[0].pathname}`), before && await before(), urls))openedURLs.includes(url) || (openBrowser(url), openedURLs.push(url));
    }
    function recursiveChunkEntryNames(chunk) {
        let [...chunkGroups] = chunk.groupsIterable;
        return [
            ...new Set(chunkGroups.flatMap((chunkGroup)=>(function recursiveChunkGroup(chunkGroup, visited = new Set()) {
                    if (visited.has(chunkGroup)) return [];
                    visited.add(chunkGroup);
                    let parents = chunkGroup.getParents();
                    return parents.length ? parents.flatMap((chunkParent)=>recursiveChunkGroup(chunkParent, visited)) : [
                        chunkGroup.name
                    ];
                })(chunkGroup)).filter((name)=>!!name))
        ];
    }
    class PatchSplitChunksPlugin {
        name;
        constructor(name){
            this.name = name;
        }
        apply(compiler) {
            let { splitChunks } = compiler.options.optimization;
            if (!splitChunks) return;
            let applyPatch = (config)=>{
                if ('object' != typeof config || (0, types_namespaceObject.isRegExp)(config)) return;
                let { chunks } = config;
                if (chunks && 'async' !== chunks) {
                    if ('function' == typeof chunks) {
                        config.chunks = (chunk)=>(!chunk.name || chunk.name !== this.name) && chunks(chunk);
                        return;
                    }
                    if ('all' === chunks) {
                        config.chunks = (chunk)=>!chunk.name || chunk.name !== this.name;
                        return;
                    }
                    if ('initial' === chunks) {
                        config.chunks = (chunk)=>(!chunk.name || chunk.name !== this.name) && chunk.isOnlyInitial();
                        return;
                    }
                }
            };
            applyPatch(splitChunks);
            let { cacheGroups } = splitChunks;
            if (cacheGroups) for (let cacheGroupKey of Object.keys(cacheGroups))cacheGroups[cacheGroupKey] && applyPatch(cacheGroups[cacheGroupKey]);
        }
    }
    let resolve_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__);
    function isAsyncChunk(chunk) {
        return 'canBeInitial' in chunk ? !chunk.canBeInitial() : 'isInitial' in chunk && !chunk.isInitial();
    }
    let HtmlResourceHintsPlugin_defaultOptions = {
        type: 'async-chunks',
        dedupe: !0
    };
    class HtmlResourceHintsPlugin {
        options;
        name = 'HtmlResourceHintsPlugin';
        resourceHints = [];
        type;
        HTMLCount;
        constructor(options, type, HTMLCount){
            this.options = {
                ...HtmlResourceHintsPlugin_defaultOptions,
                ...options
            }, this.type = type, this.HTMLCount = HTMLCount;
        }
        apply(compiler) {
            compiler.hooks.compilation.tap(this.name, (compilation)=>{
                let pluginHooks = getHTMLPlugin().getCompilationHooks(compilation), pluginName = `HTML${upperFirst(this.type)}Plugin`;
                pluginHooks.beforeAssetTagGeneration.tap(pluginName, (data)=>(this.resourceHints = function(options, type, compilation, data, HTMLCount) {
                        let extractedChunks = function(compilation, includeType) {
                            let chunks = [
                                ...compilation.chunks
                            ];
                            if (void 0 === includeType || 'async-chunks' === includeType) return chunks.filter(isAsyncChunk);
                            if ('initial' === includeType) return chunks.filter((chunk)=>!isAsyncChunk(chunk));
                            if ('all-chunks' === includeType) return chunks;
                            if ('all-assets' === includeType) {
                                let licenseAssets = [
                                    ...compilation.assetsInfo?.values() || []
                                ].map((info)=>!!info.related?.license && info.related.license).filter(Boolean);
                                return [
                                    {
                                        files: Object.keys(compilation.assets).filter((t)=>!licenseAssets.includes(t))
                                    }
                                ];
                            }
                            return chunks;
                        }(compilation, options.type), sortedFilteredFiles = ((files, include, exclude)=>{
                            let includeRegExp = [], excludeRegExp = [], includeFn = [], excludeFn = [];
                            if (include) for (let item of helpers_castArray(include))'string' == typeof item ? includeRegExp.push(new RegExp(item)) : isFunction(item) ? includeFn.push(item) : includeRegExp.push(item);
                            if (exclude) for (let item of helpers_castArray(exclude))'string' == typeof item ? excludeRegExp.push(new RegExp(item)) : isFunction(item) ? excludeFn.push(item) : excludeRegExp.push(item);
                            return files.filter((file)=>{
                                let includeMatched = !1;
                                for (let item of includeRegExp)item.test(file) && (includeMatched = !0);
                                for (let item of includeFn)item(file) && (includeMatched = !0);
                                if (includeRegExp.length + includeFn.length > 0 && !includeMatched) return !1;
                                for (let item of excludeRegExp)if (item.test(file)) return !1;
                                for (let item of excludeFn)if (item(file)) return !1;
                                return !0;
                            });
                        })([
                            ...new Set(('all-assets' === options.type || 1 === HTMLCount ? extractedChunks : extractedChunks.filter((chunk)=>(function({ chunk, htmlPluginData }) {
                                    let { options } = htmlPluginData.plugin;
                                    return recursiveChunkEntryNames(chunk).some((chunkName)=>{
                                        var chunkName1, includeChunks, excludeChunks;
                                        return chunkName1 = chunkName, includeChunks = options?.chunks, excludeChunks = options?.excludeChunks, !(Array.isArray(includeChunks) && -1 === includeChunks.indexOf(chunkName1) || Array.isArray(excludeChunks) && -1 !== excludeChunks.indexOf(chunkName1));
                                    });
                                })({
                                    chunk: chunk,
                                    compilation,
                                    htmlPluginData: data,
                                    pluginOptions: options
                                }))).reduce((accumulated, chunk)=>accumulated.concat([
                                    ...chunk.files,
                                    ...chunk.auxiliaryFiles || []
                                ]), []).filter((file)=>!file.endsWith('.map')))
                        ], options.include, options.exclude).sort(), links = [], { publicPath, crossOriginLoading } = compilation.outputOptions;
                        for (let file of sortedFilteredFiles){
                            let href = ensureAssetPrefix(file, publicPath), attributes = {
                                href,
                                rel: type
                            };
                            'preload' === type && (attributes.as = function({ href, file }) {
                                let url = new external_node_url_.URL(file || href, 'https://example.com'), extension = external_node_path_default().extname(url.pathname).slice(1);
                                return [
                                    'css'
                                ].includes(extension) ? 'style' : IMAGE_EXTENSIONS.includes(extension) ? 'image' : VIDEO_EXTENSIONS.includes(extension) ? 'video' : AUDIO_EXTENSIONS.includes(extension) ? 'audio' : FONT_EXTENSIONS.includes(extension) ? 'font' : [
                                    'vtt'
                                ].includes(extension) ? 'track' : "script";
                            }({
                                href,
                                file
                            }), 'font' === attributes.as && (attributes.crossorigin = ''), ("script" === attributes.as || 'style' === attributes.as) && crossOriginLoading && ('use-credentials' === crossOriginLoading || '/' !== publicPath) && (attributes.crossorigin = 'anonymous' === crossOriginLoading ? '' : crossOriginLoading)), links.push({
                                tagName: 'link',
                                attributes,
                                voidTag: !0,
                                meta: {}
                            });
                        }
                        return links;
                    }(this.options, this.type, compilation, data, this.HTMLCount), data)), pluginHooks.alterAssetTags.tap(pluginName, (data)=>{
                    var resourceHints, scripts;
                    return this.resourceHints && (data.assetTags.styles = [
                        ...this.options.dedupe ? (resourceHints = this.resourceHints, scripts = data.assetTags.scripts, resourceHints.filter((resourceHint)=>!scripts.find((script)=>script.attributes.src === resourceHint.attributes.href))) : this.resourceHints,
                        ...data.assetTags.styles
                    ]), data;
                });
            });
        }
    }
    let resourceHints_generateLinks = (options, rel)=>options.map((option)=>({
                tag: 'link',
                attrs: {
                    rel,
                    ...option
                }
            })), rsdoctor_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__);
    async function ensureFileDir(outputFilePath) {
        let dir = external_node_path_default().dirname(outputFilePath);
        await external_node_fs_default().promises.mkdir(dir, {
            recursive: !0
        });
    }
    async function applyProfile(root, filterValue, traceLayer = 'perfetto', traceOutput) {
        var value;
        if ('perfetto' !== traceLayer && 'logger' !== traceLayer) throw Error(`unsupported trace layer: ${traceLayer}`);
        if (!traceOutput) {
            let timestamp = Date.now(), defaultOutputDir = external_node_path_default().join(root, `.rspack-profile-${timestamp}-${process.pid}`), defaultRustTracePerfettoOutput = external_node_path_default().join(defaultOutputDir, 'rspack.pftrace');
            traceOutput = 'perfetto' === traceLayer ? defaultRustTracePerfettoOutput : 'stdout';
        }
        let filter = "OVERVIEW" === (value = filterValue) ? 'info' : "ALL" === value ? 'trace' : value;
        return await ensureFileDir(traceOutput), await rspack_rspack.experiments.globalTrace.register(filter, traceLayer, traceOutput), traceOutput;
    }
    let MODULE_PATH_REGEX = /.*[\\/]node_modules[\\/](?!\.pnpm[\\/])(?:(@[^\\/]+)[\\/])?([^\\/]+)/, SPLIT_STRATEGY_DISPATCHER = {
        'split-by-experience': function(ctx) {
            let { override, polyfill, defaultConfig, forceSplittingGroups } = ctx, experienceCacheGroup = {}, packageRegExps = {
                axios: /node_modules[\\/]axios(-.+)?[\\/]/
            };
            for (let [name, test] of (('entry' === polyfill || 'usage' === polyfill) && (packageRegExps.polyfill = /node_modules[\\/](?:tslib|core-js|@swc[\\/]helpers)[\\/]/), Object.entries(packageRegExps))){
                let key = `lib-${name}`;
                experienceCacheGroup[key] = {
                    test,
                    priority: 0,
                    name: key
                };
            }
            return {
                ...defaultConfig,
                ...override,
                cacheGroups: {
                    ...defaultConfig.cacheGroups,
                    ...experienceCacheGroup,
                    ...forceSplittingGroups,
                    ...override.cacheGroups
                }
            };
        },
        'split-by-module': function(ctx) {
            let { override, forceSplittingGroups, defaultConfig } = ctx;
            return {
                ...defaultConfig,
                minSize: 0,
                maxInitialRequests: 1 / 0,
                ...override,
                cacheGroups: {
                    ...defaultConfig.cacheGroups,
                    ...forceSplittingGroups,
                    vendors: {
                        priority: -9,
                        test: NODE_MODULES_REGEX,
                        name: (module)=>module ? function(modulePath) {
                                let handleModuleContext = modulePath?.match(MODULE_PATH_REGEX);
                                if (!handleModuleContext) return;
                                let [, scope, name] = handleModuleContext;
                                return [
                                    'npm',
                                    (scope ?? '').replace('@', ''),
                                    name
                                ].filter(Boolean).join('.');
                            }(module.context) : void 0
                    },
                    ...override.cacheGroups
                }
            };
        },
        'split-by-size': function(ctx) {
            let { override, forceSplittingGroups, defaultConfig, userConfig } = ctx;
            return {
                ...defaultConfig,
                minSize: userConfig.minSize ?? 0,
                maxSize: userConfig.maxSize ?? 1 / 0,
                ...override,
                cacheGroups: {
                    ...defaultConfig.cacheGroups,
                    ...forceSplittingGroups,
                    ...override.cacheGroups
                }
            };
        },
        custom: function(ctx) {
            let { override, forceSplittingGroups, defaultConfig } = ctx;
            return {
                ...defaultConfig,
                ...override,
                cacheGroups: {
                    ...defaultConfig.cacheGroups,
                    ...forceSplittingGroups,
                    ...override.cacheGroups
                }
            };
        },
        'all-in-one': function(_ctx) {
            return !1;
        },
        'single-vendor': function(ctx) {
            let { override, defaultConfig, forceSplittingGroups } = ctx;
            return {
                ...defaultConfig,
                ...override,
                cacheGroups: {
                    ...defaultConfig.cacheGroups,
                    singleVendor: {
                        test: NODE_MODULES_REGEX,
                        priority: 0,
                        chunks: 'all',
                        name: 'vendor',
                        enforce: !0
                    },
                    ...forceSplittingGroups,
                    ...override.cacheGroups
                }
            };
        }
    }, swc_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__), builtinSwcLoaderName = 'builtin:swc-loader', isCliShortcutsEnabled = (config)=>config.dev.cliShortcuts && isTTY('stdin');
    async function setupCliShortcuts({ help = !0, openPage, closeServer, printUrls, restartServer, customShortcuts }) {
        let shortcuts = [
            {
                key: 'c',
                description: `${picocolors_index_js_default().bold('c + enter')}  ${picocolors_index_js_default().dim('clear console')}`,
                action: ()=>{
                    console.clear();
                }
            },
            {
                key: 'o',
                description: `${picocolors_index_js_default().bold('o + enter')}  ${picocolors_index_js_default().dim('open in browser')}`,
                action: openPage
            },
            {
                key: 'q',
                description: `${picocolors_index_js_default().bold('q + enter')}  ${picocolors_index_js_default().dim('quit process')}`,
                action: async ()=>{
                    try {
                        await closeServer();
                    } finally{
                        process.exit(0);
                    }
                }
            },
            restartServer ? {
                key: 'r',
                description: `${picocolors_index_js_default().bold('r + enter')}  ${picocolors_index_js_default().dim('restart server')}`,
                action: restartServer
            } : null,
            {
                key: 'u',
                description: `${picocolors_index_js_default().bold('u + enter')}  ${picocolors_index_js_default().dim('show urls')}`,
                action: printUrls
            }
        ].filter(Boolean);
        if (customShortcuts && !Array.isArray(shortcuts = customShortcuts(shortcuts))) throw Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} ${picocolors_index_js_default().yellow('dev.cliShortcuts')} option must return an array of shortcuts.`);
        help && index_js_namespaceObject.logger.log(!0 === help ? `  \u{279C}  ${picocolors_index_js_default().dim('press')} ${picocolors_index_js_default().bold('h + enter')} ${picocolors_index_js_default().dim('to show shortcuts')}\n` : `  \u{279C}  ${help}\n`);
        let { createInterface } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:readline")), rl = createInterface({
            input: process.stdin
        });
        return rl.on('line', (input)=>{
            if ('h' === input) {
                let message = `\n  ${picocolors_index_js_default().bold(picocolors_index_js_default().blue('Shortcuts:'))}\n`;
                for (let shortcut of shortcuts)message += `  ${shortcut.description}\n`;
                index_js_namespaceObject.logger.log(message);
            }
            for (let shortcut of shortcuts)if (input === shortcut.key) return void shortcut.action();
        }), ()=>{
            rl.close();
        };
    }
    async function getLocalhostResolvedAddress() {
        let { promises: dns } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:dns")), [defaultLookup, explicitLookup] = await Promise.all([
            dns.lookup('localhost'),
            dns.lookup('localhost', {
                verbatim: !0
            })
        ]);
        return defaultLookup.family === explicitLookup.family && defaultLookup.address === explicitLookup.address ? void 0 : defaultLookup.address;
    }
    async function resolveHostname(host = 'localhost') {
        var host1;
        if ('localhost' === host) {
            let resolvedAddress = await getLocalhostResolvedAddress();
            if (resolvedAddress) return resolvedAddress;
        }
        return void 0 === host || (host1 = host, new Set([
            '0.0.0.0',
            '::',
            '0000:0000:0000:0000:0000:0000:0000:0000'
        ]).has(host1)) ? 'localhost' : host;
    }
    let compilationMiddleware_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__), getCompilationMiddleware = async ({ config, compiler, callbacks, environments, resolvedPort })=>{
        let { default: rsbuildDevMiddleware } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/rsbuild-dev-middleware/index.js")), resolvedHost = await resolveHostname(config.server.host);
        return applyToCompiler(compiler, (compiler, index)=>{
            let environment = Object.values(environments).find((env)=>env.index === index);
            if (!environment) return;
            let token = environment.webSocketToken;
            token && (!function({ config, compiler, token, resolvedHost, resolvedPort }) {
                if (!((compiler)=>{
                    let { target } = compiler.options;
                    return !!target && (Array.isArray(target) ? target.includes('web') : 'web' === target);
                })(compiler)) return;
                let clientPaths = function(devConfig) {
                    let clientPaths = [];
                    return (devConfig.hmr || devConfig.liveReload) && (hmrClientPath || (hmrClientPath = compilationMiddleware_require.resolve('@rsbuild/core/client/hmr')), clientPaths.push(hmrClientPath), devConfig.client?.overlay && (overlayClientPath || (overlayClientPath = compilationMiddleware_require.resolve('@rsbuild/core/client/overlay')), clientPaths.push(overlayClientPath))), clientPaths;
                }(config.dev);
                if (!clientPaths.length) return;
                let clientConfig = {
                    ...config.dev.client
                };
                for (let clientPath of ('<port>' === clientConfig.port && (clientConfig.port = resolvedPort), new compiler.webpack.DefinePlugin({
                    RSBUILD_WEB_SOCKET_TOKEN: JSON.stringify(token),
                    RSBUILD_CLIENT_CONFIG: JSON.stringify(clientConfig),
                    RSBUILD_SERVER_HOST: JSON.stringify(resolvedHost),
                    RSBUILD_SERVER_PORT: JSON.stringify(resolvedPort),
                    RSBUILD_DEV_LIVE_RELOAD: config.dev.liveReload
                }).apply(compiler), clientPaths))new compiler.webpack.EntryPlugin(compiler.context, clientPath, {
                    name: void 0
                }).apply(compiler);
            }({
                token,
                config: environment.config,
                compiler,
                resolvedHost,
                resolvedPort
            }), (({ compiler, token, callbacks: { onDone, onInvalid } })=>{
                if (((compiler)=>{
                    let { target } = compiler.options;
                    return !!target && (Array.isArray(target) ? target.includes('node') : 'node' === target);
                })(compiler)) return;
                let { compile, invalid, done } = compiler.hooks;
                compile.tap('rsbuild-dev-server', ()=>{
                    onInvalid(token);
                }), invalid.tap('rsbuild-dev-server', (fileName)=>{
                    onInvalid(token, fileName);
                }), done.tap('rsbuild-dev-server', (stats)=>{
                    onDone(token, stats);
                });
            })({
                compiler,
                callbacks,
                token
            }));
        }), rsbuildDevMiddleware(compiler, {
            etag: 'weak',
            publicPath: '/',
            stats: !1,
            serverSideRender: !0,
            writeToDisk: ((config, environments)=>{
                let writeToDiskValues = Object.values(environments).map((env)=>env.config.dev.writeToDisk);
                return 1 === new Set(writeToDiskValues).size ? writeToDiskValues[0] : (filePath, name)=>{
                    let { writeToDisk } = config;
                    return name && environments[name] && (writeToDisk = environments[name].config.dev.writeToDisk ?? writeToDisk), 'function' == typeof writeToDisk ? writeToDisk(filePath) : writeToDisk;
                };
            })(config.dev, environments)
        });
    }, styles = {
        1: 'font-weight:bold',
        2: 'opacity:0.5',
        3: 'font-style:italic',
        4: 'text-decoration:underline;text-underline-offset:3px',
        8: 'display:none',
        9: 'text-decoration:line-through',
        30: 'color:#000',
        31: 'color:#fb6a6a',
        32: 'color:#6ef790',
        33: 'color:#eff986',
        34: 'color:#6eb2f7',
        35: 'color:#f76ebe',
        36: 'color:#6eecf7',
        37: 'color:#f0f0f0',
        90: 'color:#888'
    };
    for(let i = 91; i <= 97; i++)styles[i] = styles[i - 60];
    let closeCode = [
        0,
        21,
        22,
        23,
        24,
        27,
        28,
        29,
        39,
        49
    ], parseQueryString = (req)=>{
        let queryStr = req.url ? req.url.split('?')[1] : '';
        return queryStr ? Object.fromEntries(new URLSearchParams(queryStr)) : {};
    };
    class SocketServer {
        wsServer;
        socketsMap = new Map();
        options;
        stats;
        initialChunks;
        heartbeatTimer = null;
        environments;
        constructor(options, environments){
            this.options = options, this.stats = {}, this.initialChunks = {}, this.environments = environments;
        }
        upgrade = (req, socket, head)=>{
            if (!this.wsServer.shouldHandle(req)) return;
            let query = parseQueryString(req);
            if (!Object.values(this.environments).map((env)=>env.webSocketToken).includes(query.token)) return void socket.destroy();
            this.wsServer.handleUpgrade(req, socket, head, (connection)=>{
                this.wsServer.emit('connection', connection, req);
            });
        };
        checkSockets = ()=>{
            for (let socket of this.wsServer.clients)socket.isAlive ? (socket.isAlive = !1, socket.ping(()=>{})) : socket.terminate();
            null !== this.heartbeatTimer && (this.heartbeatTimer = setTimeout(this.checkSockets, 30000).unref());
        };
        clearHeartbeatTimer() {
            this.heartbeatTimer && (clearTimeout(this.heartbeatTimer), this.heartbeatTimer = null);
        }
        async prepare() {
            this.clearHeartbeatTimer();
            let { default: ws } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/ws/index.js"));
            this.wsServer = new ws.Server({
                noServer: !0,
                path: this.options.client?.path
            }), this.wsServer.on('error', (err)=>{
                index_js_namespaceObject.logger.error(err);
            }), this.heartbeatTimer = setTimeout(this.checkSockets, 30000).unref(), this.wsServer.on('connection', (socket, req)=>{
                let query = parseQueryString(req);
                this.onConnect(socket, query.token);
            });
        }
        updateStats(stats, token) {
            this.stats[token] = stats, this.socketsMap.size && this.sendStats({
                token
            });
        }
        sockWrite(message, token) {
            let messageStr = JSON.stringify(message), sendToSockets = (sockets)=>{
                for (let socket of sockets)this.send(socket, messageStr);
            };
            if (token) {
                let sockets = this.socketsMap.get(token);
                sockets && sendToSockets(sockets);
            } else for (let sockets of this.socketsMap.values())sendToSockets(sockets);
        }
        async close() {
            for (let socket of (this.clearHeartbeatTimer(), this.wsServer.removeAllListeners(), this.wsServer.clients))socket.terminate();
            for (let sockets of this.socketsMap.values())sockets.forEach((socket)=>{
                socket.close();
            });
            return this.stats = {}, this.initialChunks = {}, this.socketsMap.clear(), new Promise((resolve, reject)=>{
                this.wsServer.close((err)=>{
                    err ? reject(err) : resolve();
                });
            });
        }
        onConnect(socket, token) {
            socket.isAlive = !0, socket.on('pong', ()=>{
                socket.isAlive = !0;
            });
            let sockets = this.socketsMap.get(token);
            sockets || (sockets = new Set(), this.socketsMap.set(token, sockets)), sockets.add(socket), socket.on('close', ()=>{
                let sockets = this.socketsMap.get(token);
                sockets && (sockets.delete(socket), 0 === sockets.size && this.socketsMap.delete(token));
            }), this.stats && this.sendStats({
                force: !0,
                token
            });
        }
        getStats(name) {
            let curStats = this.stats[name];
            if (!curStats) return null;
            let statsOptions = getStatsOptions(curStats.compilation.compiler), statsJson = curStats.toJson({
                all: !1,
                hash: !0,
                assets: !0,
                warnings: !0,
                warningsCount: !0,
                errors: !0,
                errorsCount: !0,
                errorDetails: !1,
                entrypoints: !0,
                children: !0,
                moduleTrace: !0,
                ...statsOptions
            });
            return statsJson ? {
                statsJson,
                root: curStats.compilation.compiler.options.context
            } : null;
        }
        sendStats({ force = !1, token }) {
            var a, b;
            let result = this.getStats(token);
            if (!result) return null;
            let { statsJson, root } = result, newInitialChunks = new Set();
            if (statsJson.entrypoints) for (let entrypoint of Object.values(statsJson.entrypoints)){
                let chunks = entrypoint.chunks;
                if (Array.isArray(chunks)) for (let chunkName of chunks)chunkName && newInitialChunks.add(String(chunkName));
            }
            let initialChunks = this.initialChunks[token], shouldReload = !!statsJson.entrypoints && !!initialChunks && (a = initialChunks, b = newInitialChunks, !(a.size === b.size && [
                ...a
            ].every((value)=>b.has(value))));
            if (this.initialChunks[token] = newInitialChunks, shouldReload) return void this.sockWrite({
                type: 'static-changed'
            }, token);
            if (!force && statsJson && !statsJson.errorsCount && statsJson.assets && statsJson.assets.every((asset)=>!asset.emitted)) return void this.sockWrite({
                type: 'ok'
            }, token);
            if (statsJson.hash && this.sockWrite({
                type: 'hash',
                data: statsJson.hash
            }, token), statsJson.errorsCount) {
                let { errors: formattedErrors } = formatStatsMessages({
                    errors: getAllStatsErrors(statsJson),
                    warnings: []
                });
                this.sockWrite({
                    type: 'errors',
                    data: {
                        text: formattedErrors,
                        html: function(errors, root) {
                            let htmlItems = errors.map((item)=>{
                                var text, text1 = function(text) {
                                    let ansiCodes = [], ret = text.replace(/\x1B\[([0-9;]+)m/g, (_match, sequences)=>{
                                        let style = '';
                                        for (let seq of sequences.split(';'))styles[seq] && (style += `${styles[seq]};`);
                                        return style ? (ansiCodes.push(sequences), `<span style="${style}">`) : closeCode.includes(Number(sequences)) && ansiCodes.length > 0 ? (ansiCodes.pop(), '</span>') : '';
                                    });
                                    return ansiCodes.length > 0 && (ret += Array(ansiCodes.length + 1).join('</span>')), ret;
                                }((text = item) ? text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;') : ''), root1 = root;
                                let pathRegex = /(?:\.\.?[/\\]|[a-zA-Z]:\\|\/)[^:]*:\d+:\d+/g, urlRegex = /(https?:\/\/(?:[\w-]+\.)+[a-z0-9](?:[\w-.~:/?#[\]@!$&'*+,;=])*)/gi;
                                return text1.split('\n').map((line)=>{
                                    let replacedLine = line.replace(pathRegex, (file)=>{
                                        let hasClosingSpan = file.includes('</span>') && !file.includes('<span'), filePath = hasClosingSpan ? file.replace('</span>', '') : file, isAbsolute = external_node_path_default().isAbsolute(filePath), absolutePath = root1 && !isAbsolute ? external_node_path_default().join(root1, filePath) : filePath, relativePath = root1 && isAbsolute ? function(base, filepath) {
                                            let relativePath = (0, external_node_path_.relative)(base, filepath);
                                            return '' === relativePath ? `.${external_node_path_.sep}` : relativePath.startsWith('.') ? relativePath : `.${external_node_path_.sep}${relativePath}`;
                                        }(root1, filePath) : filePath;
                                        return `<a class="file-link" data-file="${absolutePath}">${relativePath}</a>${hasClosingSpan ? '</span>' : ''}`;
                                    });
                                    return replacedLine = replacedLine.replace(urlRegex, (url)=>`<a class="url-link" href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`);
                                }).join('\n');
                            });
                            return `
<style>
.root {
  position: fixed;
  z-index: 9999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  margin: 0;
  background: rgba(0, 0, 0, 0.66);
  cursor: pointer;
}
.container {
  font-family: Menlo, Consolas, monospace;
  line-height: 1.6;
  width: 960px;
  max-width: 85%;
  color: #d8d8d8;
  margin: 32px auto;
  padding: 32px 40px;
  position: relative;
  background: #181818;
  border-radius: 24px;
  box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  overflow: hidden;
  direction: ltr;
  text-align: left;
  box-sizing: border-box;
  cursor: default;
}
.title {
  margin: 0 0 20px;
  padding-bottom: 12px;
  font-size: 17px;
  font-weight: 600;
  color: #fb6a6a;
  border-bottom: 2px solid rgba(252,94,94,.66);
}
.content {
  margin: 0;
  font-size: 14px;
  font-family: inherit;
  overflow-x: scroll;
  scrollbar-width: none;
}
.content::-webkit-scrollbar {
  display: none;
}
.file-link,
.url-link,
.config-link {
  cursor: pointer;
  text-decoration: underline;
  text-underline-offset: 3px;
  &:hover {
    opacity: 0.8;
  }
  &:active {
    opacity: 0.6;
  }
}
.file-link {
  color: #6eecf7;
}
.url-link {
  color: #eff986;
}
.config-link {
  color: inherit;
  text-decoration: none;
}
.close {
  position: absolute;
  top: 27px;
  right: 32px;
  width: 32px;
  height: 32px;
  cursor: pointer;
}
.close:hover {
  opacity: 0.8;
}
.close:active {
  opacity: 0.6;
}
.close:before,
.close:after {
  position: absolute;
  left: 16px;
  top: 8px;
  content: ' ';
  height: 18px;
  width: 2px;
  border-radius: 4px;
  background-color: #b8b8b8;
}
.close:before {
  transform: rotate(45deg);
}
.close:after {
  transform: rotate(-45deg);
}
.footer {
  font-size: 12px;
  color: #7e6a92;
  margin-top: 20px;
  padding-top: 12px;
  border-top: 2px solid rgba(126,106,146,.6);
}
.footer p {
  margin: 4px 0 0;
}
.footer span {
  color: #a88dc3;
}
</style>

<div class="root">
  <div class="container">
    <div class="close"></div>
    <p class="title">Build failed</p>
    <pre class="content">${htmlItems.join('\n\n').trim()}</pre>
    <footer class="footer">
      <p><span>Fix error</span>, click outside, or press Esc to close the overlay.</p>
      <p>Disable overlay by setting Rsbuild's <span><a class="config-link" target="_blank" rel="noopener noreferrer" href="https://rsbuild.rs/config/dev/client">dev.client.overlay</a></span> config to false.<p>
    </footer>
  </div>
</div>
`;
                        }(formattedErrors, root)
                    }
                }, token);
                return;
            }
            if (statsJson.warningsCount) {
                let { warnings: formattedWarnings } = formatStatsMessages({
                    warnings: getAllStatsWarnings(statsJson),
                    errors: []
                });
                this.sockWrite({
                    type: 'warnings',
                    data: {
                        text: formattedWarnings
                    }
                }, token);
                return;
            }
            this.sockWrite({
                type: 'ok'
            }, token);
        }
        send(socket, message) {
            socket.readyState === socket.OPEN && socket.send(message);
        }
    }
    class CompilationManager {
        middleware;
        outputFileSystem;
        config;
        compiler;
        environments;
        publicPaths;
        socketServer;
        resolvedPort;
        constructor({ config, compiler, publicPaths, resolvedPort, environments }){
            this.config = config, this.compiler = compiler, this.environments = environments, this.publicPaths = publicPaths, this.resolvedPort = resolvedPort, this.outputFileSystem = external_node_fs_default(), this.socketServer = new SocketServer(config.dev, environments);
        }
        async init() {
            await this.setupCompilationMiddleware(), await this.socketServer.prepare();
            let { compiler } = this;
            this.outputFileSystem = (helpers_isMultiCompiler(compiler) ? compiler.compilers[0].outputFileSystem : compiler.outputFileSystem) || external_node_fs_default();
        }
        watch() {
            this.middleware.watch();
        }
        async close() {
            await this.socketServer.close(), this.middleware && await new Promise((resolve)=>{
                this.middleware.close(()=>{
                    resolve();
                });
            }), await new Promise((resolve)=>{
                this.compiler.close(()=>{
                    resolve();
                });
            });
        }
        readFileSync = (fileName)=>'readFileSync' in this.outputFileSystem ? this.outputFileSystem.readFileSync(fileName, 'utf-8') : external_node_fs_default().readFileSync(fileName, 'utf-8');
        async setupCompilationMiddleware() {
            let { config, publicPaths, environments } = this, middleware = await getCompilationMiddleware({
                config,
                compiler: this.compiler,
                callbacks: {
                    onInvalid: (token, fileName)=>{
                        if ('string' == typeof fileName && fileName.endsWith('.html')) return void this.socketServer.sockWrite({
                            type: 'static-changed'
                        }, token);
                    },
                    onDone: (token, stats)=>{
                        this.socketServer.updateStats(stats, token);
                    }
                },
                environments,
                resolvedPort: this.resolvedPort
            }), { base } = config.server, assetPrefixes = publicPaths.map(getPathnameFromUrl).map((prefix)=>base && '/' !== base ? stripBase(prefix, base) : prefix), wrapper = (req, res, next)=>{
                let { url } = req, assetPrefix = url && assetPrefixes.find((prefix)=>url.startsWith(prefix));
                assetPrefix && '/' !== assetPrefix ? (req.url = url.slice(assetPrefix.length - 1), middleware(req, res, (...args)=>{
                    req.url = url, next(...args);
                })) : middleware(req, res, next);
            };
            wrapper.close = middleware.close, wrapper.watch = middleware.watch, this.middleware = wrapper;
        }
    }
    let ENCODING_REGEX = /\bgzip\b/, CONTENT_TYPE_REGEX = /text|javascript|\/json|xml/i, gzipMiddleware = ({ filter, level = external_node_zlib_default().constants.Z_BEST_SPEED } = {})=>(req, res, next)=>{
            let gzip, writeHeadStatus;
            if (filter && !filter(req, res)) return void next();
            let accept = req.headers['accept-encoding'], encoding = 'string' == typeof accept && ENCODING_REGEX.test(accept);
            if ('HEAD' === req.method || !encoding) return void next();
            let started = !1, on = res.on.bind(res), end = res.end.bind(res), write = res.write.bind(res), writeHead = res.writeHead.bind(res), listeners = [], start = ()=>{
                if (!started) {
                    if (started = !0, ((res)=>{
                        if (res.getHeader('Content-Encoding')) return !1;
                        let contentType = String(res.getHeader('Content-Type'));
                        if (contentType && !CONTENT_TYPE_REGEX.test(contentType)) return !1;
                        let size = res.getHeader('Content-Length');
                        return void 0 === size || Number(size) > 1024;
                    })(res)) for (let listener of (res.setHeader('Content-Encoding', 'gzip'), res.removeHeader('Content-Length'), (gzip = external_node_zlib_default().createGzip({
                        level
                    })).on('data', (chunk)=>{
                        write(chunk) || gzip.pause();
                    }), on('drain', ()=>gzip.resume()), gzip.on('end', ()=>{
                        end();
                    }), listeners))gzip.on.apply(gzip, listener);
                    else for (let listener of listeners)on.apply(res, listener);
                    writeHead(writeHeadStatus ?? res.statusCode);
                }
            };
            res.writeHead = (status, reason, headers)=>{
                if (reason) for (let [key, value] of Object.entries(headers || reason))res.setHeader(key, value);
                return writeHeadStatus = status, res;
            }, res.write = (...args)=>(start(), gzip ? gzip.write(...args) : write.apply(res, args)), res.end = (...args)=>(start(), gzip ? gzip.end(...args) : end.apply(res, args)), res.on = (type, listener)=>(started ? gzip && 'drain' === type ? gzip.on(type, listener) : on(type, listener) : listeners.push([
                    type,
                    listener
                ]), res), next();
        };
    function historyApiFallbackMiddleware(options = {}) {
        return (req, _res, next)=>{
            let rewriteTarget, { headers } = req;
            if (!req.url) return void next();
            if ('GET' !== req.method && 'HEAD' !== req.method) {
                index_js_namespaceObject.logger.debug('Not rewriting', req.method, req.url, 'because the method is not GET or HEAD.'), next();
                return;
            }
            if (!headers || 'string' != typeof headers.accept) {
                index_js_namespaceObject.logger.debug('Not rewriting', req.method, req.url, 'because the client did not send an HTTP accept header.'), next();
                return;
            }
            if (0 === headers.accept.indexOf('application/json')) {
                index_js_namespaceObject.logger.debug('Not rewriting', req.method, req.url, 'because the client prefers JSON.'), next();
                return;
            }
            let rewrites = options.rewrites || [], htmlAcceptHeaders = options.htmlAcceptHeaders || [
                'text/html',
                '*/*'
            ], { accept } = headers;
            if (!htmlAcceptHeaders.some((item)=>accept.includes(item))) {
                index_js_namespaceObject.logger.debug('Not rewriting', req.method, req.url, 'because the client does not accept HTML.'), next();
                return;
            }
            let parsedUrl = function(req) {
                let proto = req.headers['x-forwarded-proto'] || 'http', host = req.headers['x-forwarded-host'] || req.headers.host || 'localhost';
                try {
                    return new external_node_url_.URL(req.url || '/', `${proto}://${host}`);
                } catch  {
                    return null;
                }
            }(req);
            if (null === parsedUrl) return void next();
            for (let rewrite of rewrites){
                let match = parsedUrl.pathname?.match(rewrite.from);
                if (!match) continue;
                let rule = rewrite.to;
                '/' !== (rewriteTarget = 'string' == typeof rule ? rule : rule({
                    parsedUrl,
                    match,
                    request: req
                })).charAt(0) && index_js_namespaceObject.logger.debug('We recommend using an absolute path for the rewrite target.', 'Received a non-absolute rewrite target', rewriteTarget, 'for URL', req.url), index_js_namespaceObject.logger.debug('Rewriting', req.method, req.url, 'to', rewriteTarget), req.url = rewriteTarget, next();
                return;
            }
            let { pathname } = parsedUrl;
            if (pathname && pathname.lastIndexOf('.') > pathname.lastIndexOf('/') && !0 !== options.disableDotRule) {
                index_js_namespaceObject.logger.debug('Not rewriting', req.method, req.url, 'because the path includes a dot (.) character.'), next();
                return;
            }
            let index = options.index || '/index.html';
            index_js_namespaceObject.logger.debug('Rewriting', req.method, req.url, 'to', index), req.url = index, next();
        };
    }
    let faviconFallbackMiddleware = (req, res, next)=>{
        '/favicon.ico' === req.url ? (res.statusCode = 204, res.end()) : next();
    }, getRequestLoggerMiddleware = async ()=>{
        let { default: onFinished } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/on-finished/index.js"));
        return (req, res, next)=>{
            let _startAt = process.hrtime();
            onFinished(res, ()=>{
                let method = req.method, url = req.originalUrl || req.url, status = Number(res.statusCode), statusColor = ((status)=>status >= 500 ? picocolors_index_js_default().red : status >= 400 ? picocolors_index_js_default().yellow : status >= 300 ? picocolors_index_js_default().cyan : status >= 200 ? picocolors_index_js_default().green : (res)=>res)(status), endAt = process.hrtime(), totalTime = (endAt[0] - _startAt[0]) * 1e3 + (endAt[1] - _startAt[1]) * 1e-6;
                index_js_namespaceObject.logger.debug(`${statusColor(status)} ${method} ${url} ${picocolors_index_js_default().dim(`${totalTime.toFixed(3)} ms`)}`);
            }), next();
        };
    }, notFoundMiddleware = (_req, res, _next)=>{
        res.statusCode = 404, res.end();
    }, optionsFallbackMiddleware = (req, res, next)=>{
        if ('OPTIONS' === req.method) {
            res.statusCode = 204, res.setHeader('Content-Length', '0'), res.end();
            return;
        }
        next();
    }, middlewares_isFileExists = async (filePath, outputFileSystem)=>new Promise((resolve)=>{
            outputFileSystem.stat(filePath, (_error, stats)=>{
                resolve(stats?.isFile());
            });
        }), maybeHTMLRequest = (req)=>{
        if (!req.url || !req.headers || 'GET' !== req.method && 'HEAD' !== req.method) return !1;
        let { accept } = req.headers;
        return 'string' == typeof accept && (accept.includes('text/html') || accept.includes('*/*'));
    }, postfixRE = /[?#].*$/, getUrlPathname = (url)=>url.replace(postfixRE, ''), getBaseMiddleware = ({ base })=>(req, res, next)=>{
            let url = req.url, pathname = getUrlPathname(url);
            if (pathname.startsWith(base)) {
                req.url = stripBase(url, base), next();
                return;
            }
            let redirectPath = addTrailingSlash(url) !== base ? joinUrlSegments(base, url) : base;
            if ('/' === pathname || '/index.html' === pathname) {
                res.writeHead(302, {
                    Location: redirectPath
                }), res.end();
                return;
            }
            if (req.headers.accept?.includes('text/html')) {
                res.writeHead(404, {
                    'Content-Type': 'text/html'
                }), res.end(`The server is configured with a base URL of ${base} - did you mean to visit <a href="${redirectPath}">${redirectPath}</a> instead?`);
                return;
            }
            res.writeHead(404, {
                'Content-Type': 'text/plain'
            }), res.end(`The server is configured with a base URL of ${base} - did you mean to visit ${redirectPath} instead?`);
        }, createProxyMiddleware = async (proxyOptions)=>{
        let formattedOptions = function(proxyOptions) {
            let ret = [];
            if (Array.isArray(proxyOptions)) ret.push(...proxyOptions);
            else if ('target' in proxyOptions) ret.push(proxyOptions);
            else for (let [context, options] of Object.entries(proxyOptions)){
                let opts = {
                    context,
                    changeOrigin: !0,
                    logLevel: 'warn',
                    logProvider: ()=>index_js_namespaceObject.logger
                };
                'string' == typeof options ? opts.target = options : Object.assign(opts, options), ret.push(opts);
            }
            return ret;
        }(proxyOptions), proxyMiddlewares = [], middlewares = [], { createProxyMiddleware: baseMiddleware } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/http-proxy-middleware/index.js"));
        for (let opts of formattedOptions){
            let { onProxyRes } = opts;
            opts.onProxyRes = (proxyRes, _req, res)=>{
                onProxyRes && onProxyRes(proxyRes, _req, res), res.on('close', ()=>{
                    res.writableEnded || proxyRes.destroy();
                });
            };
            let proxyMiddleware = baseMiddleware(opts.context, opts), middleware = async (req, res, next)=>{
                let bypassUrl = 'function' == typeof opts.bypass ? await opts.bypass(req, res, opts) : null;
                !1 === bypassUrl ? (res.statusCode = 404, next()) : 'string' == typeof bypassUrl ? (req.url = bypassUrl, next()) : !0 === bypassUrl ? next() : proxyMiddleware(req, res, next);
            };
            middlewares.push(middleware), opts.ws && proxyMiddlewares.push(proxyMiddleware);
        }
        return {
            middlewares,
            upgrade: (req, socket, head)=>{
                for (let middleware of proxyMiddlewares)'function' == typeof middleware.upgrade && middleware.upgrade(req, socket, head);
            }
        };
    }, applyDefaultMiddlewares = async ({ config, compilationManager, context, devServerAPI, middlewares, pwd, postCallbacks })=>{
        let upgradeEvents = [], { server } = config;
        if (server.cors) {
            let { default: corsMiddleware } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/cors/index.js"));
            middlewares.push(corsMiddleware('boolean' == typeof server.cors ? {} : server.cors));
        }
        let { headers } = server;
        if (headers && middlewares.push((_req, res, next)=>{
            for (let [key, value] of Object.entries(headers))res.setHeader(key, value);
            next();
        }), server.proxy) {
            let { middlewares: proxyMiddlewares, upgrade } = await createProxyMiddleware(server.proxy);
            for (let middleware of (upgradeEvents.push(upgrade), proxyMiddlewares))middlewares.push(middleware);
        }
        let { compress } = server;
        if (compress && middlewares.push(gzipMiddleware('object' == typeof compress ? compress : void 0)), 'dev' === context.action && 'rspack' === context.bundlerType && compilationManager) {
            let { compiler } = compilationManager;
            (helpers_isMultiCompiler(compiler) ? compiler.compilers.some((childCompiler)=>childCompiler.options.experiments?.lazyCompilation || childCompiler.options.lazyCompilation) : compiler.options.experiments?.lazyCompilation || compiler.options.lazyCompilation) && middlewares.push(rspack_rspack.experiments.lazyCompilationMiddleware(compiler));
        }
        server.base && '/' !== server.base && middlewares.push(getBaseMiddleware({
            base: server.base
        }));
        let { default: launchEditorMiddleware } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/launch-editor-middleware/index.js"));
        for (let publicDir of (middlewares.push([
            '/__open-in-editor',
            launchEditorMiddleware()
        ]), middlewares.push((({ environments })=>async (req, res, next)=>{
                if ('/rsbuild-dev-server' !== getUrlPathname(req.url)) return void next();
                res.writeHead(200, {
                    'Content-Type': 'text/html; charset=utf-8'
                }), res.write(`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
      body {
        margin: 0;
        color: #f6f7f9;
        padding: 32px 40px;
        line-height: 1.8;
        min-height: 100vh;
        background-image: linear-gradient(#020917, #101725);
        font-family: ui-sans-serif,system-ui,sans-serif;
      }
      h1, h2 {
        font-weight: 500;
      }
      h1 {
        margin: 0;
        font-size: 36px;
      }
      h2 {
        font-size: 20px;
        margin: 24px 0 16px;
      }
      ul {
        margin: 0;
        padding-left: 16px;
      }
      a {
        color: #58c4dc;
        text-decoration: none;
      }
      a:hover {
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <h1>Assets Report</h1>
  </body>
</html>`);
                try {
                    for(let key in environments){
                        res.write(`<h2>Environment: ${key}</h2>`);
                        let list = [], environment = environments[key], stats = await environment.getStats(), assets = getAssetsFromStats(stats);
                        for (let asset of (res.write('<ul>'), assets))list.push(`<li><a target="_blank" href="${asset?.name}">${asset?.name}</a></li>`);
                        res.write(list?.join('')), res.write('</ul>');
                    }
                    res.end('</body></html>');
                } catch (err) {
                    index_js_namespaceObject.logger.error(err), res.writeHead(500), res.end('Failed to list the files');
                }
            })({
            environments: devServerAPI.environments
        })), compilationManager && (middlewares.push(compilationManager.middleware), upgradeEvents.push(compilationManager.socketServer.upgrade), middlewares.push((req, res, next)=>{
            req.url?.endsWith('.hot-update.json') && 'OPTIONS' !== req.method ? (res.statusCode = 404, res.end()) : next();
        })), compilationManager && middlewares.push((({ distPath, compilationManager })=>async (req, res, next)=>{
                if (!maybeHTMLRequest(req)) return void next();
                let pathname = getUrlPathname(req.url), rewrite = (newUrl)=>{
                    req.url = newUrl, compilationManager.middleware(req, res, (...args)=>{
                        next(...args);
                    });
                };
                if (pathname.endsWith('/')) {
                    let newUrl = `${pathname}index.html`, filePath = external_node_path_default().join(distPath, newUrl);
                    if (await middlewares_isFileExists(filePath, compilationManager.outputFileSystem)) return void rewrite(newUrl);
                } else if (!external_node_path_default().extname(pathname)) {
                    let newUrl = `${pathname}.html`, filePath = external_node_path_default().join(distPath, newUrl);
                    if (await middlewares_isFileExists(filePath, compilationManager.outputFileSystem)) return void rewrite(newUrl);
                }
                next();
            })({
            compilationManager,
            distPath: context.distPath
        })), normalizePublicDirs(server?.publicDir))){
            let { default: sirv } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/sirv/index.js")), { name } = publicDir, assetMiddleware = sirv((0, external_node_path_.isAbsolute)(name) ? name : (0, external_node_path_.join)(pwd, name), {
                etag: !0,
                dev: !0
            });
            middlewares.push(assetMiddleware);
        }
        for (let callback of postCallbacks)callback();
        return compilationManager && middlewares.push((({ htmlFallback, distPath, compilationManager })=>async (req, res, next)=>{
                if (!maybeHTMLRequest(req) || '/favicon.ico' === req.url || 'index' !== htmlFallback) return void next();
                let filePath = external_node_path_default().join(distPath, 'index.html');
                if (await middlewares_isFileExists(filePath, compilationManager.outputFileSystem)) {
                    let newUrl = '/index.html';
                    'verbose' === index_js_namespaceObject.logger.level && index_js_namespaceObject.logger.debug(`    ${req.method} ${req.url} ${picocolors_index_js_default().yellow('fallback to')} ${newUrl}`), req.url = newUrl, compilationManager.middleware(req, res, (...args)=>{
                        next(...args);
                    });
                    return;
                }
                next();
            })({
            compilationManager,
            distPath: context.distPath,
            htmlFallback: server.htmlFallback
        })), server.historyApiFallback && (middlewares.push(historyApiFallbackMiddleware(!0 === server.historyApiFallback ? {} : server.historyApiFallback)), compilationManager?.middleware && middlewares.push(compilationManager.middleware)), middlewares.push(faviconFallbackMiddleware), {
            onUpgrade: (...args)=>{
                for (let cb of upgradeEvents)cb(...args);
            }
        };
    }, getDevMiddlewares = async (options)=>{
        let middlewares = [], { compilationManager } = options;
        'verbose' === index_js_namespaceObject.logger.level && middlewares.push(await getRequestLoggerMiddleware());
        let { before, after } = ((config, devServerAPI)=>{
            let setupMiddlewares = config.dev.setupMiddlewares || [], serverOptions = pick(devServerAPI, [
                'sockWrite',
                'environments'
            ]), before = [], after = [];
            for (let handler of helpers_castArray(setupMiddlewares))handler({
                unshift: (...handlers)=>before.unshift(...handlers),
                push: (...handlers)=>after.push(...handlers)
            }, serverOptions);
            return {
                before,
                after
            };
        })(options.config, options.devServerAPI);
        middlewares.push(...before);
        let { onUpgrade } = await applyDefaultMiddlewares({
            ...options,
            middlewares
        });
        return middlewares.push(...after), {
            close: async ()=>{
                await compilationManager?.close();
            },
            onUpgrade,
            middlewares
        };
    }, asModule = async (something, context, unlinked)=>{
        let { Module, SyntheticModule } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:vm"));
        if (something instanceof Module) return something;
        let exports1 = [
            ...new Set([
                'default',
                ...Object.keys(something)
            ])
        ], syntheticModule = new SyntheticModule(exports1, ()=>{
            for (let name of exports1)syntheticModule.setExport(name, 'default' === name ? something : something[name]);
        }, {
            context
        });
        return unlinked || (await syntheticModule.link(()=>{}), await syntheticModule.evaluate()), syntheticModule;
    };
    class BasicRunner {
        _options;
        globalContext = null;
        baseModuleScope = null;
        requirers = new Map();
        constructor(_options){
            this._options = _options;
        }
        run(file) {
            this.globalContext || (this.globalContext = this.createGlobalContext()), this.baseModuleScope = this.createBaseModuleScope(), this.createRunner();
            let res = this.getRequire()(this._options.dist, file.startsWith('./') ? file : `./${file}`);
            return 'object' == typeof res && 'then' in res ? res : Promise.resolve(res);
        }
        getRequire() {
            let entryRequire = this.requirers.get('entry');
            return (currentDirectory, modulePath, context = {})=>entryRequire(currentDirectory, Array.isArray(modulePath) ? modulePath : modulePath.split('?')[0], context);
        }
        getFile(modulePath, currentDirectory) {
            let p;
            if (Array.isArray(modulePath)) return {
                path: external_node_path_default().join(currentDirectory, '.array-require.js'),
                content: `module.exports = (${modulePath.map((arg)=>`require(${JSON.stringify(`./${arg}`)})`).join(', ')});`,
                subPath: ''
            };
            let joinedPath = (p = modulePath, /^\.\.?\//.test(p)) ? external_node_path_default().join(currentDirectory, modulePath) : modulePath;
            return this._options.isBundleOutput(joinedPath) ? {
                path: joinedPath,
                content: this._options.readFileSync(joinedPath),
                subPath: ((p)=>{
                    let lastSlash = p.lastIndexOf('/'), firstSlash = p.indexOf('/');
                    if (-1 !== lastSlash && firstSlash !== lastSlash) {
                        if (-1 !== firstSlash) {
                            let next = p.indexOf('/', firstSlash + 1), dir = p.slice(firstSlash + 1, next);
                            for(; '.' === dir;)firstSlash = next, next = p.indexOf('/', firstSlash + 1), dir = p.slice(firstSlash + 1, next);
                        }
                        return p.slice(firstSlash + 1, lastSlash + 1);
                    }
                    return '';
                })(modulePath)
            } : null;
        }
        preExecute(_code, _file) {}
        postExecute(_m, _file) {}
        createRunner() {
            this.requirers.set('entry', (_currentDirectory, _modulePath, _context = {})=>{
                throw Error(`${picocolors_index_js_default().dim('[rsbuild:runner]')} Not implemented`);
            });
        }
    }
    let cjs_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__), cjs_define = (...args)=>{
        args.pop()();
    };
    class CommonJsRunner extends BasicRunner {
        createGlobalContext() {
            return {
                console: console,
                setTimeout: (cb, ms, ...args)=>{
                    let timeout = setTimeout(cb, ms, ...args);
                    return timeout.unref(), timeout;
                },
                clearTimeout: clearTimeout,
                queueMicrotask
            };
        }
        createBaseModuleScope() {
            return {
                console: this.globalContext.console,
                setTimeout: this.globalContext.setTimeout,
                clearTimeout: this.globalContext.clearTimeout,
                nsObj: (m)=>(Object.defineProperty(m, Symbol.toStringTag, {
                        value: 'Module'
                    }), m),
                queueMicrotask
            };
        }
        createModuleScope(requireFn, m, file) {
            return {
                ...this.baseModuleScope,
                require: requireFn.bind(null, external_node_path_default().dirname(file.path)),
                module: m,
                exports: m.exports,
                __dirname: external_node_path_default().dirname(file.path),
                __filename: file.path,
                define: cjs_define
            };
        }
        createRunner() {
            this.requirers.set('miss', this.createMissRequirer()), this.requirers.set('entry', this.createCjsRequirer());
        }
        createMissRequirer() {
            return (_currentDirectory, modulePath, _context = {})=>{
                let resolvedPath = cjs_require.resolve(modulePath, {
                    paths: [
                        _currentDirectory
                    ]
                });
                return cjs_require(resolvedPath.startsWith('node:') ? resolvedPath.slice(5) : resolvedPath);
            };
        }
        createCjsRequirer() {
            let requireCache = Object.create(null), vm = cjs_require('node:vm');
            return (currentDirectory, modulePath, context = {})=>{
                let file = context.file || this.getFile(modulePath, currentDirectory);
                if (!file) return this.requirers.get('miss')(currentDirectory, modulePath);
                if (file.path in requireCache) return requireCache[file.path].exports;
                let m = {
                    exports: {}
                };
                requireCache[file.path] = m;
                let currentModuleScope = this.createModuleScope(this.getRequire(), m, file), args = Object.keys(currentModuleScope), argValues = args.map((arg)=>currentModuleScope[arg]), code = `(function(${args.join(', ')}) {
        ${file.content}
      })`;
                this.preExecute(code, file);
                let dynamicImport = Function('specifier', 'return import(specifier)');
                return vm.runInThisContext(code, {
                    filename: file.path,
                    importModuleDynamically: async (specifier)=>await dynamicImport(specifier)
                }).call(m.exports, ...argValues), this.postExecute(m, file), m.exports;
            };
        }
    }
    let esm_require = (0, external_node_module_.createRequire)(__rslib_import_meta_url__);
    class EsmRunner extends CommonJsRunner {
        createRunner() {
            super.createRunner(), this.requirers.set('cjs', this.getRequire()), this.requirers.set('esm', this.createEsmRequirer());
            let outputModule = this._options.compilerOptions.experiments?.outputModule;
            this.requirers.set('entry', (currentDirectory, modulePath, context)=>{
                let file = this.getFile(modulePath, currentDirectory);
                return file ? outputModule && !file.path.endsWith('.cjs') ? this.requirers.get('esm')(currentDirectory, modulePath, {
                    ...context,
                    file
                }) : this.requirers.get('cjs')(currentDirectory, modulePath, {
                    ...context,
                    file
                }) : this.requirers.get('miss')(currentDirectory, modulePath);
            });
        }
        createEsmRequirer() {
            let esmCache = new Map(), esmIdentifier = this._options.name, vm = esm_require('node:vm');
            return (currentDirectory, modulePath, context = {})=>{
                if (!vm.SourceTextModule) throw Error(`${picocolors_index_js_default().dim('[rsbuild:runner]')} Running ESM bundle needs add Node.js option ${picocolors_index_js_default().yellow('--experimental-vm-modules')}.`);
                let _require = this.getRequire(), file = context.file || this.getFile(modulePath, currentDirectory);
                if (!file) return this.requirers.get('miss')(currentDirectory, modulePath);
                let esm = esmCache.get(file.path);
                return (esm || (esm = new vm.SourceTextModule(file.content, {
                    identifier: `${esmIdentifier}-${file.path}`,
                    url: `${(0, external_node_url_.pathToFileURL)(file.path).href}?${esmIdentifier}`,
                    initializeImportMeta: (meta, _)=>{
                        meta.url = (0, external_node_url_.pathToFileURL)(file.path).href;
                    },
                    importModuleDynamically: async (specifier, module)=>asModule(await _require(external_node_path_default().dirname(file.path), specifier, {
                            esmMode: 1
                        }), module.context)
                }), esmCache.set(file.path, esm)), 2 === context.esmMode) ? esm : (async ()=>{
                    if (await esm.link(async (specifier, referencingModule)=>asModule(await _require(external_node_path_default().dirname(referencingModule.identifier ? referencingModule.identifier.slice(esmIdentifier.length + 1) : (0, external_node_url_.fileURLToPath)(referencingModule.url)), specifier, {
                            esmMode: 2
                        }), referencingModule.context, !0)), await esm.evaluate(), 1 === context.esmMode) return esm;
                    let ns = esm.namespace;
                    return ns.default && ns.default instanceof Promise ? ns.default : ns;
                })();
            };
        }
    }
    class BasicRunnerFactory {
        name;
        constructor(name){
            this.name = name;
        }
        create(options) {
            return this.createRunner(options);
        }
        createRunner(options) {
            let runnerOptions = {
                name: this.name,
                ...options
            }, { compilerOptions } = options;
            if ('web' === compilerOptions.target || 'webworker' === compilerOptions.target) throw Error(`${picocolors_index_js_default().dim('[rsbuild:runner]')} Not support run ${picocolors_index_js_default().yellow(compilerOptions.target)} resource in Rsbuild server`);
            return new EsmRunner(runnerOptions);
        }
    }
    let runner_run = async ({ bundlePath, ...runnerFactoryOptions })=>{
        let runner = new BasicRunnerFactory(bundlePath).create(runnerFactoryOptions);
        return await runner.run(bundlePath);
    }, loadBundle = async (stats, entryName, utils)=>{
        let { chunks, entrypoints, outputPath } = stats.toJson({
            all: !1,
            chunks: !0,
            entrypoints: !0,
            outputPath: !0
        });
        if (!entrypoints?.[entryName]) throw Error(`${picocolors_index_js_default().dim('[rsbuild:loadBundle]')} Can't find entry: ${picocolors_index_js_default().yellow(entryName)}`);
        let { chunks: entryChunks = [] } = entrypoints[entryName], files = entryChunks.reduce((prev, entryChunkName)=>{
            let chunk = chunks?.find((chunk)=>chunk.entry && chunk.names?.includes(String(entryChunkName)));
            return chunk?.files ? prev.concat(chunk.files.filter((file)=>!file.endsWith('.css'))) : prev;
        }, []);
        if (0 === files.length) throw Error(`${picocolors_index_js_default().dim('[rsbuild:loadBundle]')} Failed to get bundle by entryName: ${picocolors_index_js_default().yellow(entryName)}`);
        if (files.length > 1) throw Error(`${picocolors_index_js_default().dim('[rsbuild:loadBundle]')} Only support load single entry chunk, but got ${picocolors_index_js_default().yellow(files.length)}: ${files.join(',')}`);
        let allChunkFiles = chunks?.flatMap((c)=>c.files).map((file)=>(0, external_node_path_.join)(outputPath, file)) || [];
        return await runner_run({
            bundlePath: files[0],
            dist: outputPath,
            compilerOptions: stats.compilation.options,
            readFileSync: utils.readFileSync,
            isBundleOutput: (modulePath)=>allChunkFiles.includes(modulePath)
        });
    }, createCacheableFunction = (getter)=>{
        let cache = new WeakMap();
        return async (stats, entryName, utils)=>{
            let cachedEntries = cache.get(stats);
            if (cachedEntries?.[entryName]) return cachedEntries[entryName];
            let res = await getter(stats, entryName, utils);
            return cache.set(stats, {
                ...cachedEntries || {},
                [entryName]: res
            }), res;
        };
    }, cleanupCallbacks = new Set(), handleTermination = async (exitCode)=>{
        try {
            await Promise.all([
                ...cleanupCallbacks
            ].map((cb)=>cb()));
        } finally{
            process.exitCode ??= exitCode, process.exit();
        }
    }, registerCleanup = (callback)=>{
        cleanupCallbacks.add(callback);
    }, removeCleanup = (callback)=>{
        cleanupCallbacks.delete(callback);
    }, shutdownRefCount = 0, setupGracefulShutdown = ()=>{
        shutdownRefCount++;
        let onSigterm = ()=>{
            handleTermination(external_node_os_namespaceObject.constants.signals.SIGTERM + 128);
        };
        process.once('SIGTERM', onSigterm);
        let isCI = 'true' === process.env.CI, onStdinEnd = ()=>{
            handleTermination(0);
        };
        return isCI || process.stdin.on('end', onStdinEnd), ()=>{
            !(--shutdownRefCount > 0) && (process.removeListener('SIGTERM', onSigterm), isCI || process.stdin.removeListener('end', onStdinEnd));
        };
    }, createHttpServer = async ({ serverConfig, middlewares })=>{
        if (serverConfig.https) {
            if (serverConfig.proxy) {
                let { createServer } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:https"));
                return createServer(serverConfig.https, middlewares);
            }
            let { createSecureServer } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:http2"));
            return createSecureServer({
                allowHTTP1: !0,
                maxSessionMemory: 1024,
                ...serverConfig.https
            }, middlewares);
        }
        let { createServer } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:http"));
        return createServer(middlewares);
    };
    async function setupWatchFiles(options) {
        let { config, root, compilationManager } = options, { hmr, liveReload } = config.dev;
        if (!hmr && !liveReload || !compilationManager) return;
        let closeDevFilesWatcher = await watchDevFiles(config.dev, compilationManager, root), serverFilesWatcher = await function(serverConfig, compilationManager, root) {
            let publicDirs = normalizePublicDirs(serverConfig.publicDir);
            if (!publicDirs.length) return;
            let watchPaths = publicDirs.filter((item)=>item.watch).map((item)=>item.name);
            if (watchPaths.length) return startWatchFiles(prepareWatchOptions(watchPaths), compilationManager, root);
        }(config.server, compilationManager, root);
        return {
            async close () {
                await Promise.all([
                    closeDevFilesWatcher?.(),
                    serverFilesWatcher?.close()
                ]);
            }
        };
    }
    async function watchDevFiles(devConfig, compilationManager, root) {
        let { watchFiles } = devConfig;
        if (!watchFiles) return;
        let watchers = [];
        for (let { paths, options, type } of helpers_castArray(watchFiles)){
            let watchOptions = prepareWatchOptions(paths, options, type), watcher = await startWatchFiles(watchOptions, compilationManager, root);
            watcher && watchers.push(watcher);
        }
        return async ()=>{
            for (let watcher of watchers)await watcher.close();
        };
    }
    function prepareWatchOptions(paths, options = {}, type) {
        return {
            paths: 'string' == typeof paths ? [
                paths
            ] : paths,
            options,
            type
        };
    }
    let GLOB_REGEX = /[*?{}[\]()!@+|]/;
    async function createChokidar(pathOrGlobs, root, options) {
        let chokidar = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/chokidar/index.js")), watchFiles = new Set(), globPatterns = pathOrGlobs.filter((pathOrGlob)=>{
            let str;
            return str = pathOrGlob, !!GLOB_REGEX.test(str) || (watchFiles.add(pathOrGlob), !1);
        });
        if (globPatterns.length) {
            let tinyglobby = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/tinyglobby/index.js")), { glob } = tinyglobby.default || tinyglobby;
            for (let file of (await glob(globPatterns, {
                cwd: root,
                absolute: !0
            })))watchFiles.add(file);
        }
        return chokidar.watch(Array.from(watchFiles), options);
    }
    async function startWatchFiles({ paths, options, type = 'reload-page' }, compilationManager, root) {
        if ('reload-page' !== type) return;
        let watcher = await createChokidar(paths, root, options);
        return watcher.on('change', ()=>{
            compilationManager.socketServer.sockWrite({
                type: 'static-changed'
            });
        }), watcher;
    }
    async function devServer_createDevServer(options, createCompiler, config, { compiler: customCompiler, getPortSilently, runCompile = !0 } = {}) {
        let lastStats, fileWatcher, devMiddlewares;
        index_js_namespaceObject.logger.debug('create dev server');
        let { port, host, https, portTip } = await getServerConfig({
            config
        }), { middlewareMode } = config.server, { context } = options, routes = getRoutes(context), root = context.rootPath;
        context.devServer = {
            hostname: host,
            port,
            https
        };
        let waitLastCompileDoneResolve = null, waitLastCompileDone = new Promise((resolve)=>{
            waitLastCompileDoneResolve = resolve;
        });
        context.hooks.onAfterDevCompile.tap(({ stats })=>{
            lastStats = 'stats' in stats ? stats.stats : [
                stats
            ], waitLastCompileDoneResolve && (waitLastCompileDoneResolve(), waitLastCompileDoneResolve = null);
        });
        let startCompile = async ()=>{
            let compiler = customCompiler || await createCompiler();
            if (!compiler) throw Error(`${picocolors_index_js_default().dim('[rsbuild:server]')} Failed to get compiler instance.`);
            compiler?.hooks.watchRun.tap('rsbuild:watchRun', ()=>{
                lastStats && (waitLastCompileDoneResolve && (waitLastCompileDoneResolve(), waitLastCompileDoneResolve = null), waitLastCompileDone = new Promise((resolve)=>{
                    waitLastCompileDoneResolve = resolve;
                }));
            });
            let publicPaths = helpers_isMultiCompiler(compiler) ? compiler.compilers.map(getPublicPathFromCompiler) : [
                getPublicPathFromCompiler(compiler)
            ], compilationManager = new CompilationManager({
                config,
                compiler,
                publicPaths: publicPaths,
                resolvedPort: port,
                environments: context.environments
            });
            return await compilationManager.init(), compilationManager;
        }, protocol = https ? 'https' : 'http', urls = await getAddressUrls({
            protocol,
            port,
            host
        }), cliShortcutsEnabled = isCliShortcutsEnabled(config), printUrls = ()=>printServerURLs({
                urls,
                port,
                routes,
                protocol,
                printUrls: config.server.printUrls,
                trailingLineBreak: !cliShortcutsEnabled
            }), openPage = async ()=>server_open_open({
                https,
                port,
                routes,
                config,
                clearCache: !0
            }), cleanupGracefulShutdown = middlewareMode ? null : setupGracefulShutdown(), closeServer = async ()=>{
            removeCleanup(closeServer), cleanupGracefulShutdown?.(), await context.hooks.onCloseDevServer.callBatch(), await Promise.all([
                devMiddlewares?.close(),
                fileWatcher?.close()
            ]);
        };
        middlewareMode || registerCleanup(closeServer);
        let beforeCreateCompiler = async ()=>{
            if (printUrls(), cliShortcutsEnabled) {
                let shortcutsOptions = 'boolean' == typeof config.dev.cliShortcuts ? {} : config.dev.cliShortcuts, cleanup = await setupCliShortcuts({
                    openPage,
                    closeServer,
                    printUrls,
                    restartServer: ()=>restartDevServer({
                            clear: !1
                        }),
                    help: shortcutsOptions.help,
                    customShortcuts: shortcutsOptions.custom
                });
                context.hooks.onCloseDevServer.tap(cleanup);
            }
            !getPortSilently && portTip && index_js_namespaceObject.logger.info(portTip);
        }, cacheableLoadBundle = createCacheableFunction(loadBundle), cacheableTransformedHtml = createCacheableFunction((_stats, entryName, utils)=>((entryName, utils)=>{
                let { htmlPaths, distPath } = utils.environment, htmlPath = htmlPaths[entryName];
                if (!htmlPath) throw Error(`${picocolors_index_js_default().dim('[rsbuild:getTransformedHtml]')} Failed to get HTML file by entryName: ${picocolors_index_js_default().yellow(entryName)}`);
                let fileName = (0, external_node_path_.join)(distPath, htmlPath);
                return utils.readFileSync(fileName);
            })(entryName, utils)), environmentAPI = Object.fromEntries(Object.entries(context.environments).map(([name, environment])=>[
                name,
                {
                    getStats: async ()=>{
                        if (!compilationManager) throw Error(`${picocolors_index_js_default().dim('[rsbuild:server]')} Can not call ${picocolors_index_js_default().yellow('getStats')} when ${picocolors_index_js_default().yellow('runCompile')} is false`);
                        return await waitLastCompileDone, lastStats[environment.index];
                    },
                    context: environment,
                    loadBundle: async (entryName)=>{
                        if (!compilationManager) throw Error(`${picocolors_index_js_default().dim('[rsbuild:server]')} Can not call ${picocolors_index_js_default().yellow('loadBundle')} when ${picocolors_index_js_default().yellow('runCompile')} is false`);
                        return await waitLastCompileDone, cacheableLoadBundle(lastStats[environment.index], entryName, {
                            readFileSync: compilationManager.readFileSync,
                            environment
                        });
                    },
                    getTransformedHtml: async (entryName)=>{
                        if (!compilationManager) throw Error(`${picocolors_index_js_default().dim('[rsbuild:server]')} Can not call ${picocolors_index_js_default().yellow('getTransformedHtml')} when ${picocolors_index_js_default().yellow('runCompile')} is false`);
                        return await waitLastCompileDone, cacheableTransformedHtml(lastStats[environment.index], entryName, {
                            readFileSync: compilationManager.readFileSync,
                            environment
                        });
                    }
                }
            ])), { default: connect } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/connect/index.js")), middlewares = connect(), httpServer = middlewareMode ? null : await createHttpServer({
            serverConfig: config.server,
            middlewares
        }), devServerAPI = {
            port,
            middlewares,
            environments: environmentAPI,
            httpServer,
            sockWrite: (type, data)=>compilationManager?.socketServer.sockWrite({
                    type,
                    data
                }),
            listen: async ()=>{
                if (!httpServer) throw Error(`${picocolors_index_js_default().dim('[rsbuild:server]')} Can not listen dev server as ${picocolors_index_js_default().yellow('server.middlewareMode')} is enabled.`);
                let serverTerminator = getServerTerminator(httpServer);
                return index_js_namespaceObject.logger.debug('listen dev server'), context.hooks.onCloseDevServer.tap(serverTerminator), new Promise((resolve)=>{
                    httpServer.listen({
                        host,
                        port
                    }, async (err)=>{
                        if (err) throw err;
                        middlewares.use(optionsFallbackMiddleware), middlewares.use(notFoundMiddleware), devMiddlewares && httpServer.on('upgrade', devMiddlewares.onUpgrade), index_js_namespaceObject.logger.debug('listen dev server done'), await devServerAPI.afterListen(), onBeforeRestartServer(devServerAPI.close), resolve({
                            port,
                            urls: urls.map((item)=>item.url),
                            server: {
                                close: devServerAPI.close
                            }
                        });
                    });
                });
            },
            afterListen: async ()=>{
                await context.hooks.onAfterStartDevServer.callBatch({
                    port,
                    routes,
                    environments: context.environments
                });
            },
            connectWebSocket: ({ server })=>{
                devMiddlewares && server.on('upgrade', devMiddlewares.onUpgrade);
            },
            close: closeServer,
            printUrls,
            open: openPage
        }, postCallbacks = (await context.hooks.onBeforeStartDevServer.callBatch({
            server: devServerAPI,
            environments: context.environments
        })).filter((item)=>'function' == typeof item);
        runCompile ? context.hooks.onBeforeCreateCompiler.tap(beforeCreateCompiler) : await beforeCreateCompiler();
        let compilationManager = runCompile ? await startCompile() : void 0;
        for (let item of (fileWatcher = await setupWatchFiles({
            config,
            compilationManager,
            root
        }), (devMiddlewares = await getDevMiddlewares({
            pwd: root,
            compilationManager,
            config,
            devServerAPI,
            context,
            postCallbacks
        })).middlewares))Array.isArray(item) ? middlewares.use(...item) : middlewares.use(item);
        return compilationManager?.watch(), index_js_namespaceObject.logger.debug('create dev server done'), devServerAPI;
    }
    let rspackProvider = ({ context, pluginManager, rsbuildOptions })=>{
        let createCompiler = async ()=>(await createCompiler_createCompiler({
                context,
                pluginManager,
                rsbuildOptions
            })).compiler;
        return {
            bundler: 'rspack',
            createCompiler,
            async createDevServer (options) {
                let config = await initRsbuildConfig({
                    context,
                    pluginManager
                });
                return devServer_createDevServer({
                    context,
                    pluginManager,
                    rsbuildOptions
                }, createCompiler, config, options);
            },
            async startDevServer (options) {
                let config = await initRsbuildConfig({
                    context,
                    pluginManager
                });
                return (await devServer_createDevServer({
                    context,
                    pluginManager,
                    rsbuildOptions
                }, createCompiler, config, options)).listen();
            },
            build: async (options)=>build_build({
                    context,
                    pluginManager,
                    rsbuildOptions
                }, options),
            async initConfigs (options) {
                if (context.action && options?.action && context.action !== options.action) throw Error(`\
[rsbuild] initConfigs() can only be called with the same action type.
  - Expected: ${context.action}
  - Actual: ${options?.action}`);
                options?.action && (context.action = options.action);
                let { rspackConfigs } = await initConfigs({
                    context,
                    pluginManager,
                    rsbuildOptions
                });
                return rspackConfigs;
            },
            async inspectConfig (inspectOptions) {
                let bundlerConfigs = (await initConfigs({
                    context,
                    pluginManager,
                    rsbuildOptions
                })).rspackConfigs;
                return inspectConfig_inspectConfig({
                    context,
                    pluginManager,
                    rsbuildOptions,
                    inspectOptions,
                    bundlerConfigs
                });
            }
        };
    };
    class RsbuildProdServer {
        app;
        options;
        middlewares;
        constructor(options, middlewares){
            this.options = options, this.middlewares = middlewares;
        }
        async onInit(app) {
            this.app = app, await this.applyDefaultMiddlewares();
        }
        async applyDefaultMiddlewares() {
            let { headers, proxy, historyApiFallback, compress, base, cors } = this.options.serverConfig;
            if ('verbose' === index_js_namespaceObject.logger.level && this.middlewares.use(await getRequestLoggerMiddleware()), cors) {
                let { default: corsMiddleware } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/cors/index.js"));
                this.middlewares.use(corsMiddleware('boolean' == typeof cors ? {} : cors));
            }
            if (headers && this.middlewares.use((_req, res, next)=>{
                for (let [key, value] of Object.entries(headers))res.setHeader(key, value);
                next();
            }), proxy) {
                let { middlewares, upgrade } = await createProxyMiddleware(proxy);
                for (let middleware of middlewares)this.middlewares.use(middleware);
                this.app.on('upgrade', upgrade);
            }
            if (compress) {
                let { constants } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "node:zlib"));
                this.middlewares.use(gzipMiddleware({
                    level: constants.Z_DEFAULT_COMPRESSION,
                    ...'object' == typeof compress ? compress : void 0
                }));
            }
            base && '/' !== base && this.middlewares.use(getBaseMiddleware({
                base
            })), await this.applyStaticAssetMiddleware(), historyApiFallback && (this.middlewares.use(historyApiFallbackMiddleware(!0 === historyApiFallback ? {} : historyApiFallback)), await this.applyStaticAssetMiddleware()), this.middlewares.use(faviconFallbackMiddleware), this.middlewares.use(optionsFallbackMiddleware), this.middlewares.use(notFoundMiddleware);
        }
        async applyStaticAssetMiddleware() {
            let { output: { path, assetPrefixes }, serverConfig: { htmlFallback } } = this.options, { default: sirv } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/sirv/index.js")), assetMiddleware = sirv(path, {
                etag: !0,
                dev: !0,
                ignores: [
                    'favicon.ico'
                ],
                single: 'index' === htmlFallback
            });
            this.middlewares.use((req, res, next)=>{
                let url = req.url, assetPrefix = url && assetPrefixes.find((prefix)=>url.startsWith(prefix));
                assetPrefix && url?.startsWith(assetPrefix) ? (req.url = url.slice(assetPrefix.length), assetMiddleware(req, res, (...args)=>{
                    req.url = url, next(...args);
                })) : assetMiddleware(req, res, next);
            });
        }
        async close() {}
    }
    async function startProdServer(context, config, { getPortSilently } = {}) {
        let { port, host, https, portTip } = await getServerConfig({
            config
        }), { default: connect } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/connect/index.js")), middlewares = connect(), serverConfig = config.server, server = new RsbuildProdServer({
            pwd: context.rootPath,
            output: {
                path: context.distPath,
                assetPrefixes: Object.values(context.environments).map((e)=>getPathnameFromUrl(e.config.output.assetPrefix))
            },
            serverConfig
        }, middlewares);
        await context.hooks.onBeforeStartProdServer.callBatch();
        let httpServer = await createHttpServer({
            serverConfig,
            middlewares: server.middlewares
        }), serverTerminator = getServerTerminator(httpServer);
        return await server.onInit(httpServer), new Promise((resolve)=>{
            httpServer.listen({
                host,
                port
            }, async ()=>{
                let routes = getRoutes(context);
                await context.hooks.onAfterStartProdServer.callBatch({
                    port,
                    routes,
                    environments: context.environments
                });
                let protocol = https ? 'https' : 'http', urls = await getAddressUrls({
                    protocol,
                    port,
                    host
                }), cliShortcutsEnabled = isCliShortcutsEnabled(config), cleanupGracefulShutdown = setupGracefulShutdown(), closeServer = async ()=>{
                    removeCleanup(closeServer), cleanupGracefulShutdown(), await Promise.all([
                        server.close(),
                        serverTerminator()
                    ]);
                };
                registerCleanup(closeServer);
                let printUrls = ()=>printServerURLs({
                        urls,
                        port,
                        routes,
                        protocol,
                        printUrls: serverConfig.printUrls,
                        trailingLineBreak: !cliShortcutsEnabled
                    }), openPage = async ()=>server_open_open({
                        https,
                        port,
                        routes,
                        config,
                        clearCache: !0
                    });
                if (printUrls(), cliShortcutsEnabled) {
                    let shortcutsOptions = 'boolean' == typeof config.dev.cliShortcuts ? {} : config.dev.cliShortcuts;
                    await setupCliShortcuts({
                        openPage,
                        closeServer,
                        printUrls,
                        help: shortcutsOptions.help,
                        customShortcuts: shortcutsOptions.custom
                    });
                }
                !getPortSilently && portTip && index_js_namespaceObject.logger.info(portTip), resolve({
                    port,
                    urls: urls.map((item)=>item.url),
                    server: {
                        close: closeServer
                    }
                });
            });
        });
    }
    async function createRsbuild(options = {}) {
        var pluginManager, context;
        let plugins, context1, envs = options.loadEnv ? loadEnv({
            cwd: options.cwd,
            ...'boolean' == typeof options.loadEnv ? {} : options.loadEnv
        }) : null, config = isFunction(options.rsbuildConfig) ? await options.rsbuildConfig() : options.rsbuildConfig || {};
        config.logLevel && (index_js_namespaceObject.logger.level = config.logLevel), function(config, envs) {
            if (null !== envs && (config.source ||= {}, config.source.define = {
                ...envs.publicVars,
                ...config.source.define
            }, 0 !== envs.filePaths.length && (config.dev ||= {}, config.dev.watchFiles = [
                ...config.dev.watchFiles ? helpers_castArray(config.dev.watchFiles) : [],
                {
                    paths: envs.filePaths,
                    type: 'reload-server'
                }
            ], config.performance?.buildCache))) {
                let { buildCache } = config.performance;
                !0 === buildCache ? config.performance.buildCache = {
                    buildDependencies: envs.filePaths
                } : (buildCache.buildDependencies ||= [], buildCache.buildDependencies.push(...envs.filePaths));
            }
        }(config, envs);
        let resolvedOptions = {
            cwd: process.cwd(),
            callerName: 'rsbuild',
            ...options,
            rsbuildConfig: config
        }, pluginManager1 = (plugins = [], {
            getPlugins: (options = {})=>plugins.filter((plugin)=>isEnvironmentMatch(plugin.environment, options.environment)).map(({ instance })=>instance),
            getAllPluginsWithMeta: ()=>plugins,
            addPlugins: (newPlugins, options)=>{
                let { before, environment } = options || {};
                for (let newPlugin of newPlugins)if (newPlugin) {
                    var plugin = newPlugin;
                    let type = typeof plugin;
                    if ('object' !== type || null === plugin) throw Error(`${picocolors_index_js_default().dim('[rsbuild:plugin]')} Expect Rsbuild plugin instance to be an object, but got ${picocolors_index_js_default().yellow(type)}.`);
                    if (!isFunction(plugin.setup)) {
                        if (isFunction(plugin.apply)) {
                            let { name = 'SomeWebpackPlugin' } = plugin.constructor || {};
                            throw Error([
                                `${picocolors_index_js_default().yellow(name)} looks like a webpack or Rspack plugin, please use ${picocolors_index_js_default().yellow('`tools.rspack`')} to register it:`,
                                picocolors_index_js_default().green(`
  // rsbuild.config.ts
  export default {
    tools: {
      rspack: {
        plugins: [new ${name}()]
      }
    }
  };
`)
                            ].join('\n'));
                        }
                        throw Error(`${picocolors_index_js_default().dim('[rsbuild:plugin]')} Expect the setup function of Rsbuild plugin to be a function, but got ${picocolors_index_js_default().yellow(type)}.`);
                    }
                    if (before) {
                        let index = plugins.findIndex((item)=>item.instance.name === before);
                        -1 === index ? (index_js_namespaceObject.logger.warn(`Plugin "${before}" does not exist.`), plugins.push({
                            environment,
                            instance: newPlugin
                        })) : plugins.splice(index, 0, {
                            environment,
                            instance: newPlugin
                        });
                    } else plugins.push({
                        environment,
                        instance: newPlugin
                    });
                }
            },
            removePlugins: (pluginNames, options = {})=>{
                plugins = plugins.filter((plugin)=>!(pluginNames.includes(plugin.instance.name) && (!options.environment || plugin.environment === options.environment)));
            },
            isPluginExists: (pluginName, options = {})=>plugins.some((plugin)=>plugin.instance.name === pluginName && isEnvironmentMatch(plugin.environment, options.environment))
        }), context2 = await createContext(resolvedOptions, config), getPluginAPI = function({ context, pluginManager }) {
            let { hooks } = context, publicContext = function(context) {
                let exposedKeys = [
                    'action',
                    'version',
                    'rootPath',
                    'distPath',
                    'devServer',
                    'cachePath',
                    'callerName',
                    'bundlerType'
                ];
                return new Proxy(context, {
                    get (target, prop) {
                        if (exposedKeys.includes(prop)) return target[prop];
                    },
                    set: (_, prop)=>(index_js_namespaceObject.logger.error(`Context is readonly, you can not assign to the "context.${prop}" prop.`), !0)
                });
            }(context);
            function getNormalizedConfig(options) {
                if (context.normalizedConfig) {
                    if (options?.environment) {
                        let config = context.normalizedConfig.environments[options.environment];
                        if (!config) throw Error(`${picocolors_index_js_default().dim('[rsbuild]')} Cannot find normalized config by environment: ${options.environment}.`);
                        return config;
                    }
                    return context.normalizedConfig;
                }
                throw Error(`${picocolors_index_js_default().dim('[rsbuild]')} Cannot access normalized config until ${picocolors_index_js_default().yellow('modifyRsbuildConfig')} is called.`);
            }
            let getRsbuildConfig = (type = 'current')=>{
                switch(type){
                    case 'original':
                        return context.originalConfig;
                    case 'current':
                        return context.config;
                    case 'normalized':
                        return getNormalizedConfig();
                }
                throw Error(`${picocolors_index_js_default().dim('[rsbuild]')} ${picocolors_index_js_default().yellow('getRsbuildConfig')} get an invalid type param.`);
            }, exposed = [], expose = (id, api)=>{
                exposed.push({
                    id,
                    api
                });
            }, useExposed = (id)=>{
                let matched = exposed.find((item)=>item.id === id);
                if (matched) return matched.api;
            }, transformId = 0, transformer = {}, processAssetsFns = [], resolveFns = [];
            hooks.modifyBundlerChain.tap((chain, { target, environment })=>{
                let pluginName = 'RsbuildCorePlugin';
                chain.plugin(pluginName).use(class {
                    name = pluginName;
                    apply(compiler) {
                        for (let { handler, environment: pluginEnvironment } of (compiler.__rsbuildTransformer = transformer, resolveFns))(!pluginEnvironment || isEnvironmentMatch(pluginEnvironment, environment.name)) && compiler.hooks.compilation.tap(pluginName, (compilation, { normalModuleFactory })=>{
                            normalModuleFactory.hooks.resolve.tapPromise(pluginName, async (resolveData)=>handler({
                                    compiler,
                                    compilation,
                                    environment,
                                    resolveData
                                }));
                        });
                        compiler.hooks.thisCompilation.tap(pluginName, (compilation)=>{
                            compilation.hooks.childCompiler.tap(pluginName, (childCompiler)=>{
                                childCompiler.__rsbuildTransformer = transformer;
                            });
                            let { sources } = compiler.webpack;
                            for (let { descriptor, handler, environment: pluginEnvironment } of processAssetsFns)(!descriptor.targets || descriptor.targets.includes(target)) && (!descriptor.environments || descriptor.environments.includes(environment.name)) && (!pluginEnvironment || isEnvironmentMatch(pluginEnvironment, environment.name)) && compilation.hooks.processAssets.tapPromise({
                                name: pluginName,
                                stage: mapProcessAssetsStage(compiler, descriptor.stage)
                            }, async (assets)=>handler({
                                    assets,
                                    compiler,
                                    compilation,
                                    environment,
                                    sources
                                }));
                        });
                    }
                });
            });
            let onExitListened = !1, onExit = (cb)=>{
                if (!onExitListened) {
                    var onExit;
                    onExit = (exitCode)=>{
                        hooks.onExit.callBatch({
                            exitCode
                        });
                    }, exitHook_callbacks.add(onExit), isRegistered || (isRegistered = !0, external_node_process_default().on('SIGINT', ()=>{
                        exit(external_node_os_namespaceObject.constants.signals.SIGINT + 128, 'SIGINT');
                    }), external_node_process_default().once('SIGTERM', ()=>{
                        exit(external_node_os_namespaceObject.constants.signals.SIGTERM + 128, 'SIGTERM');
                    }), external_node_process_default().once('exit', (exitCode)=>{
                        exit(exitCode, 'exit');
                    })), onExitListened = !0;
                }
                hooks.onExit.tap(cb);
            };
            return (environment)=>{
                let environment1, environment2, environment3;
                return {
                    context: publicContext,
                    expose,
                    logger: index_js_namespaceObject.logger,
                    transform: (environment1 = environment, (descriptor, handler)=>{
                        let id = `rsbuild-transform-${transformId++}`;
                        transformer[id] = handler, hooks.modifyBundlerChain.tapEnvironment({
                            environment: environment1,
                            handler: (chain, { target, environment })=>{
                                if (descriptor.targets && !descriptor.targets.includes(target) || descriptor.environments && !descriptor.environments.includes(environment.name)) return;
                                let rule = chain.module.rule(id);
                                descriptor.test && rule.test(descriptor.test), descriptor.resourceQuery && rule.resourceQuery(descriptor.resourceQuery), descriptor.layer && rule.layer(descriptor.layer), descriptor.issuerLayer && rule.issuerLayer(descriptor.issuerLayer), descriptor.issuer && rule.issuer(descriptor.issuer), descriptor.with && rule.with(descriptor.with), descriptor.mimetype && rule.mimetype(descriptor.mimetype), descriptor.order && 'default' !== descriptor.order ? rule.enforce(descriptor.order) : descriptor.enforce && rule.enforce(descriptor.enforce);
                                let loaderName = descriptor.raw ? 'transformRawLoader.mjs' : 'transformLoader.mjs', loaderPath = (0, external_node_path_.join)(LOADER_PATH, loaderName);
                                rule.use(id).loader(loaderPath).options({
                                    id,
                                    getEnvironment: ()=>environment
                                });
                            }
                        });
                    }),
                    useExposed,
                    processAssets: (environment2 = environment, (descriptor, handler)=>{
                        processAssetsFns.push({
                            environment: environment2,
                            descriptor,
                            handler
                        });
                    }),
                    resolve: (environment3 = environment, (handler)=>{
                        resolveFns.push({
                            environment: environment3,
                            handler
                        });
                    }),
                    getRsbuildConfig,
                    getNormalizedConfig,
                    isPluginExists: pluginManager.isPluginExists,
                    onExit,
                    onAfterBuild: hooks.onAfterBuild.tap,
                    onCloseBuild: hooks.onCloseBuild.tap,
                    onBeforeBuild: hooks.onBeforeBuild.tap,
                    onCloseDevServer: hooks.onCloseDevServer.tap,
                    onBeforeDevCompile: hooks.onBeforeDevCompile.tap,
                    onAfterDevCompile: hooks.onAfterDevCompile.tap,
                    onDevCompileDone: hooks.onAfterDevCompile.tap,
                    onAfterCreateCompiler: hooks.onAfterCreateCompiler.tap,
                    onAfterStartDevServer: hooks.onAfterStartDevServer.tap,
                    onBeforeCreateCompiler: hooks.onBeforeCreateCompiler.tap,
                    onBeforeStartDevServer: hooks.onBeforeStartDevServer.tap,
                    onAfterStartProdServer: hooks.onAfterStartProdServer.tap,
                    onBeforeStartProdServer: hooks.onBeforeStartProdServer.tap,
                    modifyRsbuildConfig: hooks.modifyRsbuildConfig.tap,
                    modifyHTML: (handler)=>{
                        hooks.modifyHTML.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    modifyHTMLTags: (handler)=>{
                        hooks.modifyHTMLTags.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    modifyBundlerChain: (handler)=>{
                        hooks.modifyBundlerChain.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    modifyRspackConfig: (handler)=>{
                        hooks.modifyRspackConfig.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    modifyWebpackChain: (handler)=>{
                        hooks.modifyWebpackChain.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    modifyWebpackConfig: (handler)=>{
                        hooks.modifyWebpackConfig.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    modifyEnvironmentConfig: (handler)=>{
                        hooks.modifyEnvironmentConfig.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    onAfterEnvironmentCompile: (handler)=>{
                        hooks.onAfterEnvironmentCompile.tapEnvironment({
                            environment,
                            handler
                        });
                    },
                    onBeforeEnvironmentCompile: (handler)=>{
                        hooks.onBeforeEnvironmentCompile.tapEnvironment({
                            environment,
                            handler
                        });
                    }
                };
            };
        }({
            context: context2,
            pluginManager: pluginManager1
        });
        context2.getPluginAPI = getPluginAPI;
        let globalPluginAPI = getPluginAPI();
        index_js_namespaceObject.logger.debug('registering default plugins'), pluginManager = pluginManager1, context = context2, pluginManager.addPlugins([
            {
                name: 'rsbuild:basic',
                setup (api) {
                    api.modifyBundlerChain((chain, { isDev, target, bundler, environment, CHAIN_ID })=>{
                        let { config } = environment;
                        chain.name(environment.name);
                        let devtool = ((config)=>{
                            let { sourceMap } = config.output, isProd = 'production' === config.mode;
                            return !1 !== sourceMap && (!0 === sourceMap ? isProd ? 'source-map' : 'cheap-module-source-map' : void 0 === sourceMap.js ? !isProd && 'cheap-module-source-map' : sourceMap.js);
                        })(config);
                        chain.devtool(devtool);
                        let { sourceMap } = config.output;
                        !devtool && 'object' == typeof sourceMap && sourceMap.css && chain.plugin('source-map-css').use(bundler.SourceMapDevToolPlugin, [
                            {
                                test: /\.css$/,
                                filename: '[file].map[query]'
                            }
                        ]), chain.context(api.context.rootPath), chain.mode(environment.config.mode), chain.infrastructureLogging({
                            level: 'error'
                        }), chain.watchOptions({
                            aggregateTimeout: 0
                        }), chain.performance.hints(!1), chain.module.parser.merge({
                            javascript: {
                                exportsPresence: 'error',
                                typeReexportsPresence: 'tolerant'
                            }
                        }), isDev && config.dev.hmr && 'web' === target && chain.plugin(CHAIN_ID.PLUGIN.HMR).use(bundler.HotModuleReplacementPlugin), isDev && chain.output.devtoolModuleFilenameTemplate((info)=>toPosixPath(info.absoluteResourcePath)), 'rspack' === api.context.bundlerType && chain.experiments({
                            ...chain.get('experiments'),
                            lazyBarrel: !0,
                            inlineEnum: !0,
                            typeReexportsPresence: !0,
                            rspackFuture: {
                                bundlerInfo: {
                                    force: !1
                                }
                            }
                        }), process.env.RSPACK_CONFIG_VALIDATE ||= 'loose-silent';
                    });
                }
            },
            {
                name: 'rsbuild:entry',
                setup (api) {
                    api.modifyBundlerChain((chain, { environment, isServer })=>{
                        let { config, entry } = environment, { preEntry } = config.source, injectCoreJsEntry = 'entry' === config.output.polyfill && !isServer;
                        for (let entryName of Object.keys(entry)){
                            let entryPoint = chain.entry(entryName), addEntry = (item)=>{
                                if ('object' == typeof item && 'html' in item) {
                                    let { html: _html, ...rest } = item;
                                    entryPoint.add(rest);
                                } else entryPoint.add(item);
                            };
                            preEntry.forEach(addEntry), injectCoreJsEntry && addEntry(createVirtualModule('import "core-js";')), helpers_castArray(entry[entryName]).forEach(addEntry);
                        }
                    }), api.onBeforeCreateCompiler(({ bundlerConfigs })=>{
                        if (bundlerConfigs.every((config)=>!config.entry)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:config]')} Could not find any entry module, please make sure that ${picocolors_index_js_default().yellow('src/index.(ts|js|tsx|jsx|mts|cts|mjs|cjs)')} exists, or customize entry through the ${picocolors_index_js_default().yellow('source.entry')} configuration.`);
                    });
                }
            },
            {
                name: 'rsbuild:cache',
                setup (api) {
                    let cacheEnabled = !1;
                    api.modifyBundlerChain(async (chain, { environment, env })=>{
                        let { config } = environment, { bundlerType } = api.context, buildCache = config.performance.buildCache ?? 'webpack' === bundlerType;
                        if (!1 === buildCache) return;
                        cacheEnabled = !0;
                        let { context } = api, cacheConfig = 'boolean' == typeof buildCache ? {} : buildCache, cacheDirectory = function({ cacheDirectory }, context) {
                            return cacheDirectory ? (0, external_node_path_.isAbsolute)(cacheDirectory) ? cacheDirectory : (0, external_node_path_.join)(context.rootPath, cacheDirectory) : (0, external_node_path_.join)(context.cachePath, context.bundlerType);
                        }(cacheConfig, context), buildDependencies = await getBuildDependencies(context, config, environment, cacheConfig.buildDependencies ? {
                            userBuildDependencies: cacheConfig.buildDependencies
                        } : {});
                        'webpack' === bundlerType && await validateWebpackCache(cacheDirectory, buildDependencies);
                        let cacheVersion = Array.isArray(cacheConfig.cacheDigest) && cacheConfig.cacheDigest.length ? `${environment.name}-${env}-${await helpers_hash(JSON.stringify(cacheConfig.cacheDigest))}` : `${environment.name}-${env}`;
                        'rspack' === bundlerType ? (chain.cache(!0), chain.experiments({
                            ...chain.get('experiments'),
                            cache: {
                                type: 'persistent',
                                version: cacheVersion,
                                storage: {
                                    type: 'filesystem',
                                    directory: cacheDirectory
                                },
                                buildDependencies: Object.values(buildDependencies).flat()
                            }
                        })) : chain.cache({
                            name: cacheVersion,
                            type: 'filesystem',
                            cacheDirectory,
                            buildDependencies
                        });
                    }), api.onAfterCreateCompiler(()=>{
                        cacheEnabled && 'rspack' === api.context.bundlerType && index_js_namespaceObject.logger.debug('Rspack persistent cache enabled');
                    });
                }
            },
            {
                name: 'rsbuild:target',
                setup (api) {
                    api.modifyBundlerChain({
                        order: 'pre',
                        handler: (chain, { target, environment })=>{
                            if ('node' === target) return void chain.target('node');
                            let { browserslist } = environment, isDefaultBrowserslist = browserslist.join(',') === DEFAULT_WEB_BROWSERSLIST.join(',');
                            if ('web-worker' === target) return void chain.target(isDefaultBrowserslist ? [
                                'webworker',
                                'es2017'
                            ] : [
                                'webworker',
                                'es5'
                            ]);
                            let esQuery = isDefaultBrowserslist ? 'es2017' : `browserslist:${browserslist.join(',')}`;
                            chain.target([
                                'web',
                                esQuery
                            ]);
                        }
                    });
                }
            },
            {
                name: 'rsbuild:output',
                setup (api) {
                    api.modifyBundlerChain((chain, { CHAIN_ID, isDev, isProd, isServer, environment, rspack })=>{
                        var jsPath, isServer1, jsAsync;
                        let { distPath, config } = environment, publicPath = function({ isDev, config, context }) {
                            let { dev, output, server } = config, publicPath = DEFAULT_ASSET_PREFIX;
                            if (isDev) {
                                if ('string' == typeof dev.assetPrefix) publicPath = dev.assetPrefix;
                                else if (dev.assetPrefix) {
                                    let protocol = context.devServer?.https ? 'https' : 'http', hostname = context.devServer?.hostname || DEFAULT_DEV_HOST;
                                    publicPath = hostname === DEFAULT_DEV_HOST ? `${protocol}://localhost:<port>/` : `${protocol}://${hostname}:<port>/`, server.base && '/' !== server.base && (publicPath = urlJoin(publicPath, server.base));
                                }
                            } else 'string' == typeof output.assetPrefix && (publicPath = output.assetPrefix);
                            let defaultPort = server.port ?? 3000;
                            return formatPublicPath(replacePortPlaceholder(publicPath, isDev ? context.devServer?.port ?? defaultPort : defaultPort));
                        }({
                            config,
                            isDev,
                            context: api.context
                        }), jsPath1 = config.output.distPath.js, jsAsyncPath = (jsPath = jsPath1, isServer1 = isServer, void 0 !== (jsAsync = config.output.distPath.jsAsync) ? jsAsync : isServer1 ? jsPath : jsPath ? `${jsPath}/async` : 'async'), jsFilename = getFilename(config, 'js', isProd, isServer), isJsFilenameFn = 'function' == typeof jsFilename;
                        if (chain.output.path(distPath).filename(isJsFilenameFn ? (...args)=>{
                            let name = jsFilename(...args);
                            return external_node_path_.posix.join(jsPath1, name);
                        } : external_node_path_.posix.join(jsPath1, jsFilename)).chunkFilename(isJsFilenameFn ? (...args)=>{
                            let name = jsFilename(...args);
                            return external_node_path_.posix.join(jsAsyncPath, name);
                        } : external_node_path_.posix.join(jsAsyncPath, jsFilename)).publicPath(publicPath).pathinfo(!1).hashFunction('xxhash64'), isServer && chain.output.library({
                            type: 'commonjs2',
                            ...chain.output.get('library') || {}
                        }), config.output.copy && 'rspack' === api.context.bundlerType) {
                            let { copy } = config.output, options = Array.isArray(copy) ? {
                                patterns: copy
                            } : copy;
                            chain.plugin(CHAIN_ID.PLUGIN.COPY).use(rspack.CopyRspackPlugin, [
                                options
                            ]);
                        }
                    });
                }
            },
            {
                name: 'rsbuild:resolve',
                setup (api) {
                    api.modifyBundlerChain({
                        order: 'pre',
                        handler: (chain, { environment, CHAIN_ID })=>{
                            let { config, tsconfigPath } = environment;
                            chain.resolve.extensions.merge([
                                ...config.resolve.extensions
                            ]), tsconfigPath && !tsconfigPath.endsWith('jsconfig.json') && chain.resolve.extensionAlias.set('.js', [
                                '.js',
                                '.ts',
                                '.tsx'
                            ]).set('.jsx', [
                                '.jsx',
                                '.tsx'
                            ]), function({ chain, config, rootPath }) {
                                let mergedAlias = reduceConfigs({
                                    initial: {},
                                    config: config.resolve.alias
                                });
                                if (config.source.alias && (index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:config]')} The ${picocolors_index_js_default().yellow('"source.alias"')} config is deprecated, use ${picocolors_index_js_default().yellow('"resolve.alias"')} instead.`), mergedAlias = reduceConfigs({
                                    initial: mergedAlias,
                                    config: config.source.alias
                                })), config.resolve.dedupe) for (let pkgName of config.resolve.dedupe){
                                    let pkgPath;
                                    if (mergedAlias[pkgName]) {
                                        index_js_namespaceObject.logger.debug(`${picocolors_index_js_default().dim('[rsbuild:resolve]')} The package ${picocolors_index_js_default().yellow(pkgName)} is already in the alias config, dedupe option for ${picocolors_index_js_default().yellow(pkgName)} will be ignored.`);
                                        continue;
                                    }
                                    try {
                                        pkgPath = (0, external_node_path_.dirname)(resolve_require.resolve(`${pkgName}/package.json`, {
                                            paths: [
                                                rootPath
                                            ]
                                        }));
                                    } catch  {}
                                    if (!pkgPath) try {
                                        pkgPath = resolve_require.resolve(pkgName, {
                                            paths: [
                                                rootPath
                                            ]
                                        });
                                        let trailing = [
                                            'node_modules',
                                            ...pkgName.split('/')
                                        ].join(external_node_path_.sep);
                                        for(; !pkgPath.endsWith(trailing) && pkgPath.includes('node_modules');)pkgPath = (0, external_node_path_.dirname)(pkgPath);
                                    } catch  {
                                        index_js_namespaceObject.logger.debug(`${picocolors_index_js_default().dim('[rsbuild:resolve]')} The package ${picocolors_index_js_default().yellow(pkgName)} is not resolved in the project, dedupe option for ${picocolors_index_js_default().yellow(pkgName)} will be ignored.`);
                                        continue;
                                    }
                                    mergedAlias[pkgName] = pkgPath;
                                }
                                for (let name of Object.keys(mergedAlias)){
                                    let formattedValues = helpers_castArray(mergedAlias[name]).map((value)=>'string' == typeof value && value.startsWith('.') ? ensureAbsolutePath(rootPath, value) : value);
                                    chain.resolve.alias.set(name, 1 === formattedValues.length ? formattedValues[0] : formattedValues);
                                }
                            }({
                                chain,
                                config,
                                rootPath: api.context.rootPath
                            }), chain.module.rule(CHAIN_ID.RULE.MJS).test(/\.m?js/).resolve.set('fullySpecified', !1), config.source.aliasStrategy && index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:config]')} The ${picocolors_index_js_default().yellow('"source.aliasStrategy"')} config is deprecated, use ${picocolors_index_js_default().yellow('"resolve.aliasStrategy"')} instead.`);
                            let aliasStrategy = config.source.aliasStrategy ?? config.resolve.aliasStrategy;
                            tsconfigPath && 'rspack' === api.context.bundlerType && 'prefer-tsconfig' === aliasStrategy && chain.resolve.tsConfig({
                                configFile: tsconfigPath,
                                references: 'auto'
                            });
                        }
                    });
                }
            },
            {
                name: 'rsbuild:file-size',
                setup (api) {
                    api.onAfterBuild(async ({ stats, environments, isFirstCompile })=>{
                        if (!stats || stats.hasErrors() || !isFirstCompile) return;
                        let logs = [];
                        await Promise.all(Object.values(environments).map(async (environment, index)=>{
                            let { printFileSize } = environment.config.performance;
                            if (!1 === printFileSize) return;
                            let multiStats = 'stats' in stats ? stats.stats : [
                                stats
                            ], defaultConfig = {
                                total: !0,
                                detail: !0,
                                compressed: 'node' !== environment.config.output.target
                            }, mergedConfig = !0 === printFileSize ? defaultConfig : {
                                ...defaultConfig,
                                ...printFileSize
                            }, statsLogs = await printFileSizes(mergedConfig, multiStats[index], api.context.rootPath, environment.distPath, environment.name);
                            logs.push(...statsLogs);
                        })).catch((err)=>{
                            index_js_namespaceObject.logger.warn('Failed to print file size.'), index_js_namespaceObject.logger.warn(err);
                        }), index_js_namespaceObject.logger.log(logs.join('\n'));
                    });
                }
            },
            {
                name: 'rsbuild:clean-output',
                setup (api) {
                    let cleanAll = async (params)=>{
                        for (let pathInfo of [
                            ...Object.values(params.environments).reduce((result, curr)=>(result.find((item)=>item.distPath === curr.distPath) || result.push(curr), result), []).map((environment)=>((environment, isDev)=>{
                                    let { rootPath } = api.context, { config, distPath } = environment, { enable, keep } = normalizeCleanDistPath(config.output.cleanDistPath);
                                    return 'auto' === enable ? isDev && !config.dev.writeToDisk ? void 0 : isStrictSubdir(rootPath, distPath) ? {
                                        path: distPath,
                                        keep
                                    } : (index_js_namespaceObject.logger.warn('The dist path is not a subdir of root path, Rsbuild will not empty it.'), index_js_namespaceObject.logger.warn(`Please set ${picocolors_index_js_default().yellow('`output.cleanDistPath`')} config manually.`), index_js_namespaceObject.logger.warn(`Current root path: ${picocolors_index_js_default().dim(rootPath)}`), void index_js_namespaceObject.logger.warn(`Current dist path: ${picocolors_index_js_default().dim(distPath)}`)) : !0 === enable ? {
                                        path: distPath,
                                        keep
                                    } : void 0;
                                })(environment, params.isDev)),
                            (()=>{
                                let { rootPath, distPath } = api.context, config = api.getNormalizedConfig(), targetPath = (0, external_node_path_.join)(distPath, RSBUILD_OUTPUTS_PATH), { enable } = normalizeCleanDistPath(config.output.cleanDistPath);
                                if (!0 === enable || 'auto' === enable && isStrictSubdir(rootPath, targetPath)) return {
                                    path: targetPath
                                };
                            })()
                        ].filter((pathInfo)=>!!pathInfo))await emptyDir(pathInfo.path, pathInfo.keep);
                    };
                    api.onBeforeBuild(async ({ isFirstCompile, environments })=>{
                        isFirstCompile && await cleanAll({
                            environments
                        });
                    }), api.onBeforeStartDevServer(async ({ environments })=>{
                        await cleanAll({
                            environments,
                            isDev: !0
                        });
                    });
                }
            },
            {
                name: 'rsbuild:asset',
                setup (api) {
                    api.modifyBundlerChain((chain, { isProd, environment })=>{
                        let { config } = environment, getMergedFilename = (assetType)=>{
                            let distDir = config.output.distPath[assetType], filename = getFilename(config, assetType, isProd);
                            return 'function' == typeof filename ? (...args)=>{
                                let name = filename(...args);
                                return external_node_path_default().posix.join(distDir, name);
                            } : external_node_path_default().posix.join(distDir, filename);
                        }, createAssetRule = (assetType, exts, emit)=>{
                            let regExp = function(exts) {
                                let matcher = exts.map((ext)=>ext.trim()).map((ext)=>ext.startsWith('.') ? ext.slice(1) : ext).join('|');
                                return RegExp(1 === exts.length ? `\\.${matcher}$` : `\\.(?:${matcher})$`, 'i');
                            }(exts), { dataUriLimit } = config.output, maxSize = 'number' == typeof dataUriLimit ? dataUriLimit : dataUriLimit[assetType];
                            chainStaticAssetRule({
                                emit,
                                rule: chain.module.rule(assetType).test(regExp),
                                maxSize,
                                filename: getMergedFilename(assetType),
                                assetType
                            });
                        }, { emitAssets } = config.output;
                        createAssetRule(configChain_CHAIN_ID.RULE.IMAGE, IMAGE_EXTENSIONS, emitAssets), createAssetRule(configChain_CHAIN_ID.RULE.SVG, [
                            'svg'
                        ], emitAssets), createAssetRule(configChain_CHAIN_ID.RULE.MEDIA, [
                            ...VIDEO_EXTENSIONS,
                            ...AUDIO_EXTENSIONS
                        ], emitAssets), createAssetRule(configChain_CHAIN_ID.RULE.FONT, FONT_EXTENSIONS, emitAssets);
                        let assetsFilename = getMergedFilename('assets');
                        chain.output.assetModuleFilename(assetsFilename), emitAssets || chain.module.generator.merge({
                            'asset/resource': {
                                emit: !1
                            }
                        });
                        let { assetsInclude } = config.source;
                        if (assetsInclude) {
                            let { dataUriLimit } = config.output;
                            chainStaticAssetRule({
                                emit: emitAssets,
                                rule: chain.module.rule(configChain_CHAIN_ID.RULE.ADDITIONAL_ASSETS).test(assetsInclude),
                                maxSize: 'number' == typeof dataUriLimit ? dataUriLimit : dataUriLimit.assets,
                                filename: assetsFilename,
                                assetType: 'additional-assets'
                            });
                        }
                    });
                }
            },
            (context1 = context, {
                name: 'rsbuild:html',
                setup (api) {
                    api.modifyBundlerChain(async (chain, { HtmlPlugin, CHAIN_ID, environment })=>{
                        let { config, htmlPaths } = environment;
                        if (0 === Object.keys(htmlPaths).length) return;
                        let assetPrefix = getPublicPathFromChain(chain, !1), entries = chain.entryPoints.entries() || {}, entryNames = Object.keys(entries).filter((entryName)=>!!htmlPaths[entryName]), extraDataMap = new Map(), finalOptions = await Promise.all(entryNames.map(async (entryName)=>{
                            var entryName1, entryName2, config1, assetPrefix1, entryName3, entryName4;
                            let entryValue = entries[entryName].values(), chunks = function(entryName, entryValue) {
                                let chunks = [
                                    entryName
                                ];
                                for (let item of entryValue){
                                    if (!isPlainObject(item)) continue;
                                    let { dependOn } = item;
                                    dependOn && ('string' == typeof dependOn ? chunks.unshift(dependOn) : chunks.unshift(...dependOn));
                                }
                                return chunks;
                            }(entryName, entryValue), inject = (entryName1 = entryName, reduceConfigsMergeContext({
                                initial: 'head',
                                config: config.html.inject,
                                ctx: {
                                    entryName: entryName1
                                }
                            })), filename = htmlPaths[entryName], { templatePath, templateContent } = await getTemplate(entryName, config, api.context.rootPath), templateParameters = (entryName2 = entryName, config1 = config, assetPrefix1 = assetPrefix, (compilation, assets, assetTags, pluginOptions)=>{
                                let { mountId, templateParameters } = config1.html, rspackConfig = compilation.options, htmlPlugin = {
                                    tags: assetTags,
                                    files: assets,
                                    options: pluginOptions
                                };
                                return reduceConfigsWithContext({
                                    initial: {
                                        mountId,
                                        entryName: entryName2,
                                        assetPrefix: assetPrefix1,
                                        compilation,
                                        htmlPlugin,
                                        rspackConfig,
                                        webpackConfig: rspackConfig,
                                        htmlWebpackPlugin: htmlPlugin
                                    },
                                    config: templateParameters,
                                    ctx: {
                                        entryName: entryName2
                                    }
                                });
                            }), pluginOptions = {
                                meta: function(entryName, config, templateContent) {
                                    let metaTags = reduceConfigsMergeContext({
                                        initial: {},
                                        config: config.html.meta,
                                        ctx: {
                                            entryName
                                        }
                                    });
                                    return templateContent && metaTags.charset && /<meta[^>]+charset=["'][^>]*>/i.test(templateContent) && delete metaTags.charset, metaTags;
                                }(entryName, config, templateContent),
                                chunks,
                                inject,
                                filename,
                                entryName,
                                templateParameters,
                                scriptLoading: config.html.scriptLoading
                            };
                            templatePath && (pluginOptions.template = templatePath), chunks.length > 1 && (pluginOptions.chunksSortMode = 'manual');
                            let extraData = {
                                entryName,
                                context: context1,
                                environment,
                                faviconDistPath: config.output.distPath.favicon
                            };
                            extraDataMap.set(entryName, extraData), templateContent && (extraData.templateContent = templateContent);
                            let tagConfig = ((config)=>{
                                let tags = helpers_castArray(config.html.tags).filter(Boolean);
                                if (tags.length) return {
                                    append: !0,
                                    hash: !1,
                                    publicPath: !0,
                                    tags
                                };
                            })(environment.config);
                            tagConfig && (extraData.tagConfig = tagConfig), entryName3 = entryName, pluginOptions.title = reduceConfigsMergeContext({
                                initial: '',
                                config: config.html.title,
                                ctx: {
                                    entryName: entryName3
                                }
                            });
                            let favicon = (entryName4 = entryName, reduceConfigsMergeContext({
                                initial: '',
                                config: config.html.favicon,
                                ctx: {
                                    entryName: entryName4
                                }
                            }));
                            favicon && (extraData.favicon = favicon);
                            let finalOptions = reduceConfigsWithContext({
                                initial: pluginOptions,
                                config: 'boolean' == typeof config.tools.htmlPlugin ? {} : config.tools.htmlPlugin,
                                ctx: {
                                    entryName,
                                    entryValue
                                }
                            });
                            return finalOptions.template || finalOptions.templateContent || (pluginOptions.template = '', pluginOptions.templateContent = templateContent), finalOptions;
                        }));
                        if (entryNames.forEach((entryName, index)=>{
                            chain.plugin(`${CHAIN_ID.PLUGIN.HTML}-${entryName}`).use(HtmlPlugin, [
                                {
                                    ...finalOptions[index],
                                    [entryNameSymbol]: entryName
                                }
                            ]);
                        }), chain.plugin('rsbuild-html-plugin').use(RsbuildHtmlPlugin, [
                            (entryName)=>extraDataMap.get(entryName)
                        ]), config.html) {
                            let { crossorigin } = config.html;
                            crossorigin && chain.output.crossOriginLoading(!0 === crossorigin ? 'anonymous' : crossorigin);
                        }
                    }), api.modifyHTMLTags({
                        order: 'post',
                        handler: ({ headTags, bodyTags }, { environment })=>{
                            let { config } = environment, { crossorigin } = config.html, allTags = [
                                ...headTags,
                                ...bodyTags
                            ];
                            if (crossorigin) {
                                let formattedCrossorigin = !0 === crossorigin ? 'anonymous' : crossorigin;
                                for (let tag of allTags)("script" === tag.tag && tag.attrs?.src || 'link' === tag.tag && tag.attrs?.rel === 'stylesheet') && (tag.attrs.crossorigin ??= formattedCrossorigin);
                            }
                            return {
                                headTags,
                                bodyTags
                            };
                        }
                    });
                }
            }),
            {
                name: 'rsbuild:app-icon',
                setup (api) {
                    let htmlTagsMap = new Map(), iconFormatMap = new Map();
                    api.processAssets({
                        stage: 'additional'
                    }, async ({ compilation, environment, sources })=>{
                        let { config } = environment, { appIcon } = config.html;
                        if (!appIcon) return;
                        let { lookup } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/mrmime/index.js")), distDir = config.output.distPath.image, manifestFile = appIcon.filename ?? 'manifest.webmanifest', publicPath = getPublicPathFromCompiler(compilation), icons = appIcon.icons.map((icon)=>((icon, distDir, publicPath, lookup)=>{
                                let { src, size } = icon, cached = iconFormatMap.get(src);
                                if (cached) return cached;
                                let sizes = `${size}x${size}`;
                                if (isURL(src)) {
                                    let formatted = {
                                        ...icon,
                                        src,
                                        sizes,
                                        isURL: !0,
                                        mimeType: lookup(src)
                                    };
                                    return iconFormatMap.set(src, formatted), formatted;
                                }
                                let absolutePath = external_node_path_default().isAbsolute(src) ? src : external_node_path_default().join(api.context.rootPath, src), relativePath = external_node_path_default().posix.join(distDir, external_node_path_default().basename(absolutePath)), formatted = {
                                    ...icon,
                                    sizes,
                                    src: ensureAssetPrefix(relativePath, publicPath),
                                    isURL: !1,
                                    absolutePath,
                                    relativePath,
                                    mimeType: lookup(absolutePath)
                                };
                                return iconFormatMap.set(src, formatted), formatted;
                            })(icon, distDir, publicPath, lookup)), tags = [];
                        for (let icon of icons){
                            if ('web-app-manifest' === icon.target && !appIcon.name) {
                                addCompilationError(compilation, `${picocolors_index_js_default().dim('[rsbuild:app-icon]')} ${picocolors_index_js_default().yellow('"appIcon.name"')} is required when ${picocolors_index_js_default().yellow('"target"')} is ${picocolors_index_js_default().yellow('"web-app-manifest"')}.`);
                                continue;
                            }
                            if (!icon.isURL) {
                                if (!compilation.inputFileSystem) {
                                    addCompilationError(compilation, `${picocolors_index_js_default().dim('[rsbuild:app-icon]')} Failed to read the icon file as ${picocolors_index_js_default().yellow('"compilation.inputFileSystem"')} is not available.`);
                                    continue;
                                }
                                if (!await fileExistsByCompilation(compilation, icon.absolutePath)) {
                                    addCompilationError(compilation, `${picocolors_index_js_default().dim('[rsbuild:app-icon]')} Failed to find the icon file at ${picocolors_index_js_default().yellow(icon.absolutePath)}.`);
                                    continue;
                                }
                                let source = await (0, external_node_util_namespaceObject.promisify)(compilation.inputFileSystem.readFile)(icon.absolutePath);
                                if (!source) {
                                    addCompilationError(compilation, `${picocolors_index_js_default().dim('[rsbuild:app-icon]')} Failed to read the icon file at ${picocolors_index_js_default().yellow(icon.absolutePath)}.`);
                                    continue;
                                }
                                compilation.emitAsset(icon.relativePath, new sources.RawSource(source));
                            }
                            ('apple-touch-icon' === icon.target || !icon.target && icon.size < 200) && tags.push({
                                tag: 'link',
                                attrs: {
                                    rel: 'apple-touch-icon',
                                    sizes: icon.sizes,
                                    href: icon.src
                                }
                            });
                        }
                        if (appIcon.name) {
                            let manifestIcons = icons.filter((icon)=>'web-app-manifest' === icon.target || !icon.target).map((icon)=>{
                                let result = {
                                    src: icon.src,
                                    sizes: icon.sizes
                                };
                                return icon.mimeType ? {
                                    ...result,
                                    type: icon.mimeType
                                } : result;
                            }), manifest = {
                                name: appIcon.name,
                                icons: manifestIcons
                            };
                            compilation.emitAsset(manifestFile, new sources.RawSource(JSON.stringify(manifest))), tags.push({
                                tag: 'link',
                                attrs: {
                                    rel: 'manifest',
                                    href: ensureAssetPrefix(manifestFile, publicPath)
                                }
                            });
                        }
                        tags.length && htmlTagsMap.set(environment.name, tags);
                    }), api.modifyHTMLTags(({ headTags, bodyTags }, { environment })=>{
                        let tags = htmlTagsMap.get(environment.name);
                        return tags && headTags.unshift(...tags), {
                            headTags,
                            bodyTags
                        };
                    });
                    let clean = ()=>{
                        htmlTagsMap.clear(), iconFormatMap.clear();
                    };
                    api.onCloseDevServer(clean), api.onCloseBuild(clean);
                }
            },
            {
                name: 'rsbuild:wasm',
                setup (api) {
                    api.modifyBundlerChain((chain, { CHAIN_ID, environment, isProd })=>{
                        let { config } = environment, distPath = config.output.distPath.wasm, filename = external_node_path_.posix.join(distPath, 'webpack' === api.context.bundlerType ? '[hash].module.wasm' : getFilename(config, 'wasm', isProd));
                        chain.experiments({
                            ...chain.get('experiments'),
                            asyncWebAssembly: !0
                        }), chain.output.webassemblyModuleFilename(filename), chain.module.rule(CHAIN_ID.RULE.WASM).test(/\.wasm$/).dependency('url').type('asset/resource').set('generator', {
                            filename
                        });
                    });
                }
            },
            {
                name: 'rsbuild:moment',
                setup (api) {
                    api.modifyBundlerChain((chain, { environment, bundler })=>{
                        let { config } = environment;
                        config.performance.removeMomentLocale && chain.plugin('remove-moment-locale').use(bundler.IgnorePlugin, [
                            {
                                resourceRegExp: /^\.\/locale$/,
                                contextRegExp: /moment$/
                            }
                        ]);
                    });
                }
            },
            {
                name: 'rsbuild:node-addons',
                setup (api) {
                    api.transform({
                        test: /\.node$/,
                        targets: [
                            'node'
                        ],
                        raw: !0
                    }, ({ code, emitFile, resourcePath })=>{
                        let name = ((resourcePath)=>{
                            let basename = '';
                            if (resourcePath) {
                                let parsed = external_node_path_default().parse(resourcePath);
                                parsed.dir && (basename = parsed.name);
                            }
                            return basename ? `${basename}.node` : null;
                        })(resourcePath);
                        if (null === name) throw Error(`${picocolors_index_js_default().dim('[rsbuild:node-addons]')} Failed to load Node.js addon: ${picocolors_index_js_default().yellow(resourcePath)}`);
                        return emitFile(name, code), `
try {
const path = require("path");
process.dlopen(module, path.join(__dirname, "${name}"));
} catch (error) {
throw new Error('Failed to load Node.js addon: "${name}"\\n' + error);
}
`;
                    });
                }
            },
            {
                name: 'rsbuild:define',
                setup (api) {
                    api.modifyBundlerChain((chain, { CHAIN_ID, bundler, environment })=>{
                        let { config } = environment, baseUrl = JSON.stringify(config.server.base), assetPrefix = JSON.stringify(getPublicPathFromChain(chain, !1)), mergedDefine = {
                            ...{
                                'import.meta.env.MODE': JSON.stringify(config.mode),
                                'import.meta.env.DEV': 'development' === config.mode,
                                'import.meta.env.PROD': 'production' === config.mode,
                                'import.meta.env.BASE_URL': baseUrl,
                                'import.meta.env.ASSET_PREFIX': assetPrefix,
                                'process.env.BASE_URL': baseUrl,
                                'process.env.ASSET_PREFIX': assetPrefix
                            },
                            ...config.source.define
                        };
                        !function(define) {
                            let value = define['process.env'];
                            if (!value) return;
                            let check = (value)=>{
                                let pathKey = Object.keys(value).find((key)=>'path' === key.toLowerCase() && value[key] === process.env[key]);
                                pathKey && index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:config]')} The ${picocolors_index_js_default().yellow('"source.define"')} option includes an object with the key ${picocolors_index_js_default().yellow(JSON.stringify(pathKey))} under ${picocolors_index_js_default().yellow('"process.env"')}, indicating potential exposure of all environment variables. This can lead to security risks and should be avoided.`);
                            };
                            if ('object' == typeof value) return check(value);
                            if ('string' == typeof value) try {
                                check(JSON.parse(value));
                            } catch  {}
                        }(mergedDefine), chain.plugin(CHAIN_ID.PLUGIN.DEFINE).use(bundler.DefinePlugin, [
                            mergedDefine
                        ]);
                    });
                }
            },
            {
                name: 'rsbuild:css',
                setup (api) {
                    let postcssrcCache = new Map();
                    api.modifyBundlerChain({
                        order: 'pre',
                        handler: async (chain, { target, isProd, CHAIN_ID, environment })=>{
                            let config, isProd1, rule = chain.module.rule(CHAIN_ID.RULE.CSS), inlineRule = chain.module.rule(CHAIN_ID.RULE.CSS_INLINE), { config: config1 } = environment;
                            rule.test(CSS_REGEX).type("javascript/auto").dependency({
                                not: 'url'
                            }).resourceQuery({
                                not: [
                                    RAW_QUERY_REGEX,
                                    INLINE_QUERY_REGEX
                                ]
                            }), inlineRule.test(CSS_REGEX).type("javascript/auto").resourceQuery(INLINE_QUERY_REGEX), chain.module.rule(CHAIN_ID.RULE.CSS_RAW).test(CSS_REGEX).type('asset/source').resourceQuery(RAW_QUERY_REGEX);
                            let emitCss = config1.output.emitCss ?? 'web' === target;
                            if (emitCss) if (config1.output.injectStyles) {
                                let styleLoaderOptions = reduceConfigs({
                                    initial: {},
                                    config: config1.tools.styleLoader
                                });
                                rule.use(CHAIN_ID.USE.STYLE).loader(getCompiledPath('style-loader')).options(styleLoaderOptions);
                            } else rule.use(CHAIN_ID.USE.MINI_CSS_EXTRACT).loader(getCssExtractPlugin().loader).options(config1.tools.cssExtract.loaderOptions);
                            else rule.use(CHAIN_ID.USE.IGNORE_CSS).loader(external_node_path_default().join(LOADER_PATH, 'ignoreCssLoader.mjs'));
                            let importLoaders = 0, updateRules = (callback)=>{
                                callback(rule, 'normal'), callback(inlineRule, 'inline');
                            }, cssLoaderPath = getCompiledPath('css-loader');
                            if (updateRules((rule)=>{
                                rule.use(CHAIN_ID.USE.CSS).loader(cssLoaderPath);
                            }), emitCss) {
                                if ('rspack' === api.context.bundlerType && !1 !== config1.tools.lightningcssLoader) {
                                    importLoaders++;
                                    let { minifyCss } = parseMinifyOptions(config1);
                                    updateRules((rule, type)=>{
                                        let inlineStyle = 'inline' === type || config1.output.injectStyles, lightningcssOptions = getLightningCSSLoaderOptions(config1, environment.browserslist, inlineStyle && minifyCss);
                                        rule.use(CHAIN_ID.USE.LIGHTNINGCSS).loader('builtin:lightningcss-loader').options(lightningcssOptions);
                                    });
                                }
                                let postcssLoaderOptions = await getPostcssLoaderOptions({
                                    config: config1,
                                    root: api.context.rootPath,
                                    postcssrcCache
                                });
                                if ('function' == typeof postcssLoaderOptions.postcssOptions || postcssLoaderOptions.postcssOptions?.plugins?.length) {
                                    importLoaders++;
                                    let postcssLoaderPath = getCompiledPath('postcss-loader');
                                    updateRules((rule)=>{
                                        rule.use(CHAIN_ID.USE.POSTCSS).loader(postcssLoaderPath).options(postcssLoaderOptions);
                                    });
                                }
                            }
                            let localIdentName = (config = config1, isProd1 = isProd, config.output.cssModules.localIdentName || (isProd1 ? '[local]-[hash:base64:6]' : '[path][name]__[local]-[hash:base64:6]')), cssLoaderOptions = (({ config, importLoaders, localIdentName, emitCss })=>{
                                let { cssModules } = config.output;
                                return ((options, exportOnlyLocals)=>{
                                    if (options.modules && exportOnlyLocals) {
                                        let { modules } = options;
                                        return modules = !0 === modules ? {
                                            exportOnlyLocals: !0
                                        } : 'string' == typeof modules ? {
                                            mode: modules,
                                            exportOnlyLocals: !0
                                        } : {
                                            ...modules,
                                            exportOnlyLocals: !0
                                        }, {
                                            ...options,
                                            modules
                                        };
                                    }
                                    return options;
                                })(reduceConfigs({
                                    initial: {
                                        importLoaders,
                                        modules: {
                                            ...cssModules,
                                            localIdentName
                                        },
                                        sourceMap: getCSSSourceMap(config)
                                    },
                                    config: config.tools.cssLoader,
                                    mergeFn: cjs_default()
                                }), !emitCss);
                            })({
                                config: config1,
                                importLoaders,
                                localIdentName,
                                emitCss
                            });
                            updateRules((rule, type)=>{
                                rule.use(CHAIN_ID.USE.CSS).options('inline' === type ? {
                                    ...cssLoaderOptions,
                                    exportType: 'string',
                                    modules: !1
                                } : cssLoaderOptions), rule.sideEffects(!0), rule.resolve.preferRelative(!0);
                            });
                            let isStringExport = 'string' === cssLoaderOptions.exportType;
                            if (isStringExport && rule.uses.has(CHAIN_ID.USE.MINI_CSS_EXTRACT) && rule.uses.delete(CHAIN_ID.USE.MINI_CSS_EXTRACT), emitCss && !config1.output.injectStyles && !isStringExport) {
                                let extractPluginOptions = config1.tools.cssExtract.pluginOptions, cssPath = config1.output.distPath.css, cssFilename = getFilename(config1, 'css', isProd), isCssFilenameFn = 'function' == typeof cssFilename, cssAsyncPath = config1.output.distPath.cssAsync ?? (cssPath ? `${cssPath}/async` : 'async');
                                chain.plugin(CHAIN_ID.PLUGIN.MINI_CSS_EXTRACT).use(getCssExtractPlugin(), [
                                    {
                                        filename: isCssFilenameFn ? (...args)=>{
                                            let name = cssFilename(...args);
                                            return external_node_path_.posix.join(cssPath, name);
                                        } : external_node_path_.posix.join(cssPath, cssFilename),
                                        chunkFilename: isCssFilenameFn ? (...args)=>{
                                            let name = cssFilename(...args);
                                            return external_node_path_.posix.join(cssAsyncPath, name);
                                        } : external_node_path_.posix.join(cssAsyncPath, cssFilename),
                                        ...extractPluginOptions
                                    }
                                ]);
                            }
                        }
                    });
                }
            },
            {
                name: 'rsbuild:minimize',
                setup (api) {
                    let isRspack = 'rspack' === api.context.bundlerType;
                    api.modifyBundlerChain((chain, { environment, CHAIN_ID, rspack })=>{
                        let { config } = environment, { minifyJs, minifyCss, jsOptions, cssOptions } = parseMinifyOptions(config);
                        if (chain.optimization.minimize(minifyJs || minifyCss), minifyJs && isRspack && chain.optimization.minimizer(CHAIN_ID.MINIMIZER.JS).use(rspack.SwcJsMinimizerRspackPlugin, [
                            ((config, jsOptions)=>{
                                let options = {};
                                options.minimizerOptions ||= {}, options.minimizerOptions.format ||= {};
                                let { removeConsole } = config.performance;
                                if (!0 === removeConsole) options.minimizerOptions.compress = {
                                    drop_console: !0
                                };
                                else if (Array.isArray(removeConsole)) {
                                    let pureFuncs = removeConsole.map((method)=>`console.${method}`);
                                    options.minimizerOptions.compress = {
                                        pure_funcs: pureFuncs
                                    };
                                }
                                if (config.output.legalComments) switch(config.output.legalComments){
                                    case 'inline':
                                        options.minimizerOptions.format.comments = 'some', options.extractComments = !1;
                                        break;
                                    case 'linked':
                                        options.extractComments = !0;
                                        break;
                                    case 'none':
                                        options.minimizerOptions.format.comments = !1, options.extractComments = !1;
                                }
                                return (options.minimizerOptions.format.asciiOnly = 'ascii' === config.output.charset, jsOptions) ? cjs_default()(options, jsOptions) : options;
                            })(config, jsOptions)
                        ]).end(), minifyCss && isRspack) {
                            let loaderOptions = getLightningCSSLoaderOptions(config, environment.browserslist, !0), defaultOptions = {
                                minimizerOptions: {
                                    targets: isPlainObject(loaderOptions.targets) ? environment.browserslist : loaderOptions.targets,
                                    ...pick(loaderOptions, [
                                        'draft',
                                        'include',
                                        'exclude',
                                        'nonStandard',
                                        'pseudoClasses',
                                        'unusedSymbols',
                                        'errorRecovery'
                                    ])
                                }
                            }, mergedOptions = cssOptions ? cjs_default()(defaultOptions, cssOptions) : defaultOptions;
                            chain.optimization.minimizer(CHAIN_ID.MINIMIZER.CSS).use(rspack.LightningCssMinimizerRspackPlugin, [
                                mergedOptions
                            ]).end();
                        }
                    });
                }
            },
            {
                name: 'rsbuild:progress',
                setup (api) {
                    'webpack' !== api.context.bundlerType && api.modifyBundlerChain((chain, { CHAIN_ID, environment, rspack })=>{
                        let { config } = environment, options = config.dev.progressBar;
                        if (!options) return;
                        let prefix = !0 !== options && void 0 !== options.id ? options.id : environment.name;
                        chain.plugin(CHAIN_ID.PLUGIN.PROGRESS).use(rspack.ProgressPlugin, [
                            {
                                prefix,
                                ...!0 === options ? {} : options
                            }
                        ]);
                    });
                }
            },
            {
                name: PLUGIN_SWC_NAME,
                setup (api) {
                    api.modifyBundlerChain({
                        order: 'pre',
                        handler: (chain, { CHAIN_ID, isDev, target, environment })=>{
                            var target1;
                            let { config, browserslist } = environment, cacheRoot = external_node_path_default().join(api.context.cachePath, '.swc'), rule = chain.module.rule(CHAIN_ID.RULE.JS).test(SCRIPT_REGEX).type("javascript/auto").dependency({
                                not: 'url'
                            }).resourceQuery({
                                not: RAW_QUERY_REGEX
                            });
                            chain.module.rule(CHAIN_ID.RULE.JS_RAW).test(SCRIPT_REGEX).type('asset/source').resourceQuery(RAW_QUERY_REGEX);
                            let dataUriRule = chain.module.rule(CHAIN_ID.RULE.JS_DATA_URI).mimetype({
                                or: [
                                    "text/javascript",
                                    "application/javascript"
                                ]
                            });
                            if (!function({ rule, isDev, config, rsbuildTarget }) {
                                for (let condition of (rule.include.add({
                                    not: NODE_MODULES_REGEX
                                }), rule.include.add(/\.(?:ts|tsx|jsx|mts|cts)$/), 'web' === rsbuildTarget && isDev && rule.include.add(/[\\/]@rsbuild[\\/]core[\\/]dist[\\/]/), config.source.include || []))rule.include.add(condition);
                                for (let condition of config.source.exclude || [])rule.exclude.add(condition);
                            }({
                                rule,
                                isDev,
                                config,
                                rsbuildTarget: target
                            }), 'webpack' === api.context.bundlerType) return;
                            let swcConfig = function({ browserslist, cacheRoot, config }) {
                                return {
                                    jsc: {
                                        externalHelpers: !0,
                                        parser: {
                                            tsx: !1,
                                            syntax: "typescript",
                                            decorators: !0
                                        },
                                        experimental: {
                                            cacheRoot,
                                            keepImportAttributes: !0
                                        },
                                        output: {
                                            charset: config.output.charset
                                        }
                                    },
                                    isModule: 'unknown',
                                    env: {
                                        targets: browserslist
                                    },
                                    rspackExperiments: {
                                        collectTypeScriptInfo: {
                                            typeExports: !0,
                                            exportedEnum: !0
                                        }
                                    }
                                };
                            }({
                                browserslist,
                                cacheRoot,
                                config
                            });
                            if (function(swcConfig, pluginImport) {
                                let finalPluginImport = ((options)=>{
                                    if (!options) return [];
                                    let imports = [];
                                    for (let item of helpers_castArray(options))isFunction(item) ? imports = item(imports) ?? imports : imports.push(item);
                                    return imports;
                                })(pluginImport);
                                finalPluginImport?.length && (swcConfig.rspackExperiments ??= {}, swcConfig.rspackExperiments.import ??= [], swcConfig.rspackExperiments.import.push(...finalPluginImport));
                            }(swcConfig, config.source.transformImport), function(swcConfig, config) {
                                swcConfig.jsc ||= {}, swcConfig.jsc.transform ||= {};
                                let { version } = config.source.decorators;
                                switch(version){
                                    case 'legacy':
                                        swcConfig.jsc.transform.legacyDecorator = !0, swcConfig.jsc.transform.decoratorMetadata = !0, swcConfig.jsc.transform.useDefineForClassFields = !1;
                                        break;
                                    case '2022-03':
                                        swcConfig.jsc.transform.legacyDecorator = !1, swcConfig.jsc.transform.decoratorVersion = '2022-03';
                                        break;
                                    default:
                                        throw Error(`${picocolors_index_js_default().dim('[rsbuild:swc]')} Unknown decorators version: ${picocolors_index_js_default().yellow(version)}`);
                                }
                            }(swcConfig, config), helpers_castArray(target1 = target).includes('web') || target1.includes('web-worker')) {
                                let polyfillMode = config.output.polyfill;
                                if ('off' === polyfillMode) swcConfig.env.mode = void 0;
                                else {
                                    swcConfig.env.mode = polyfillMode;
                                    let coreJsDir = function(swcConfig, polyfillMode) {
                                        let coreJsPath = swc_require.resolve('core-js/package.json'), version = ((corejsPkgPath)=>{
                                            try {
                                                let rawJson = external_node_fs_default().readFileSync(corejsPkgPath, 'utf-8'), { version } = JSON.parse(rawJson), [major, minor] = version.split('.');
                                                return `${major}.${minor}`;
                                            } catch  {
                                                return '3';
                                            }
                                        })(coreJsPath), coreJsDir = external_node_path_default().dirname(coreJsPath);
                                        return swcConfig.env.coreJs = version, 'usage' === polyfillMode && (swcConfig.env.shippedProposals = !0), coreJsDir;
                                    }(swcConfig, polyfillMode);
                                    for (let item of [
                                        rule,
                                        dataUriRule
                                    ])item.resolve.alias.set('core-js', coreJsDir);
                                }
                            }
                            let mergedSwcConfig = reduceConfigs({
                                initial: swcConfig,
                                config: config.tools.swc,
                                mergeFn: cjs_default()
                            });
                            rule.use(CHAIN_ID.USE.SWC).loader(builtinSwcLoaderName).options(mergedSwcConfig), dataUriRule.resolve.set('fullySpecified', !1).end().use(CHAIN_ID.USE.SWC).loader(builtinSwcLoaderName).options(cloneDeep(mergedSwcConfig));
                        }
                    });
                }
            },
            {
                name: 'rsbuild:esm',
                setup (api) {
                    api.modifyBundlerChain((chain, { environment, isServer })=>{
                        let { config } = environment;
                        if (config.output.module) {
                            if (!isServer) throw Error('[rsbuild:config] `output.module` is only supported for Node.js targets.');
                            chain.output.module(!0).chunkFormat('module').chunkLoading('import').workerChunkLoading('import').library({
                                ...chain.output.get('library'),
                                type: 'module'
                            }), chain.experiments({
                                ...chain.get('experiments'),
                                outputModule: !0
                            });
                        }
                    });
                }
            },
            {
                name: 'rsbuild:externals',
                setup (api) {
                    api.modifyBundlerChain((chain, { environment })=>{
                        let { externals } = environment.config.output;
                        externals && chain.externals(externals);
                    }), api.onBeforeCreateCompiler(({ bundlerConfigs })=>{
                        for (let config of bundlerConfigs)(Array.isArray(config.target) ? config.target.includes('webworker') : 'webworker' === config.target) && config.externals && delete config.externals;
                    });
                }
            },
            {
                name: 'rsbuild:split-chunks',
                setup (api) {
                    api.modifyBundlerChain(async (chain, { environment, isServer, isWebWorker })=>{
                        if (isServer || isWebWorker) {
                            chain.optimization.splitChunks(!1), isWebWorker && chain.module.parser.merge({
                                javascript: {
                                    dynamicImportMode: 'eager'
                                }
                            });
                            return;
                        }
                        let { config } = environment, defaultConfig = {
                            chunks: config.moduleFederation?.options?.exposes ? 'async' : 'all',
                            cacheGroups: {}
                        };
                        'webpack' === api.context.bundlerType && (defaultConfig.enforceSizeThreshold = 50000);
                        let { chunkSplit } = config.performance, forceSplittingGroups = {};
                        chunkSplit.forceSplitting && (forceSplittingGroups = function(forceSplitting, strategy) {
                            let cacheGroups = {};
                            for (let [key, regexp] of Array.isArray(forceSplitting) ? forceSplitting.map((regexp, index)=>[
                                    `force-split-${index}`,
                                    regexp
                                ]) : Object.entries(forceSplitting))cacheGroups[key] = {
                                test: regexp,
                                name: key,
                                chunks: 'all',
                                priority: +('single-vendor' === strategy),
                                enforce: !0
                            };
                            return cacheGroups;
                        }(chunkSplit.forceSplitting, chunkSplit.strategy));
                        let override = 'custom' === chunkSplit.strategy ? chunkSplit.splitChunks ?? chunkSplit.override : chunkSplit.override, splitChunksOptions = await SPLIT_STRATEGY_DISPATCHER[chunkSplit.strategy || 'split-by-experience']({
                            defaultConfig,
                            override: override || {},
                            forceSplittingGroups,
                            userConfig: chunkSplit,
                            rootPath: api.context.rootPath,
                            polyfill: config.output.polyfill
                        });
                        chain.optimization.splitChunks(splitChunksOptions);
                    });
                }
            },
            {
                name: 'rsbuild:inline-chunk',
                setup (api) {
                    let inlinedAssets = new Set();
                    api.processAssets({
                        stage: 'summarize'
                    }, ({ compiler, compilation })=>{
                        if (0 === inlinedAssets.size) return;
                        let { devtool } = compiler.options;
                        for (let name of inlinedAssets)'hidden-source-map' === devtool ? compilation.deleteAsset(name) : delete compilation.assets[name];
                        inlinedAssets.clear();
                    }), api.modifyHTMLTags(({ headTags, bodyTags }, { compiler, compilation, environment })=>{
                        let { htmlPaths, config } = environment;
                        if (0 === Object.keys(htmlPaths).length) return {
                            headTags,
                            bodyTags
                        };
                        let { scriptTests, styleTests } = getInlineTests(config);
                        if (!scriptTests.length && !styleTests.length) return {
                            headTags,
                            bodyTags
                        };
                        let publicPath = getPublicPathFromCompiler(compiler), updateTag = (tag)=>((publicPath, tag, compilation, scriptTests, styleTests, config)=>{
                                if ("script" === tag.tag) return ((publicPath, tag, compilation, scriptTests, config)=>{
                                    let { assets } = compilation;
                                    if (!(tag.attrs?.src && 'string' == typeof tag.attrs.src)) return tag;
                                    let { src, ...otherAttrs } = tag.attrs, scriptName = publicPath ? src.replace(publicPath, '') : src, asset = assets[scriptName];
                                    if (null == asset || !matchTests(scriptName, asset, scriptTests)) return tag;
                                    let ret = {
                                        tag: "script",
                                        children: updateSourceMappingURL({
                                            source: asset.source().toString(),
                                            compilation,
                                            publicPath,
                                            type: 'js',
                                            config
                                        }),
                                        attrs: {
                                            ...otherAttrs
                                        }
                                    };
                                    return inlinedAssets.add(scriptName), ret;
                                })(publicPath, tag, compilation, scriptTests, config);
                                if ('link' === tag.tag && tag.attrs && 'stylesheet' === tag.attrs.rel) {
                                    var publicPath1 = publicPath, tag1 = tag, compilation1 = compilation, styleTests1 = styleTests, config1 = config;
                                    let { assets } = compilation1;
                                    if (!(tag1.attrs?.href && 'string' == typeof tag1.attrs.href)) return tag1;
                                    let linkName = publicPath1 ? tag1.attrs.href.replace(publicPath1, '') : tag1.attrs.href, asset = assets[linkName];
                                    if (null == asset || !matchTests(linkName, asset, styleTests1)) return tag1;
                                    let ret = {
                                        tag: 'style',
                                        children: updateSourceMappingURL({
                                            source: asset.source().toString(),
                                            compilation: compilation1,
                                            publicPath: publicPath1,
                                            type: 'css',
                                            config: config1
                                        })
                                    };
                                    return inlinedAssets.add(linkName), ret;
                                }
                                return tag;
                            })(publicPath, tag, compilation, scriptTests, styleTests, environment.config);
                        return {
                            headTags: headTags.map(updateTag),
                            bodyTags: bodyTags.map(updateTag)
                        };
                    });
                }
            },
            {
                name: 'rsbuild:rsdoctor',
                setup (api) {
                    api.onBeforeCreateCompiler(async ({ bundlerConfigs })=>{
                        let packagePath, module;
                        if ('true' !== process.env.RSDOCTOR) return;
                        let isRspack = 'rspack' === api.context.bundlerType, pluginName = isRspack ? 'RsdoctorRspackPlugin' : 'RsdoctorWebpackPlugin', isRsdoctorPlugin = (plugin)=>plugin?.isRsdoctorPlugin === !0 || plugin?.constructor?.name === pluginName;
                        for (let config of bundlerConfigs)if (config.plugins?.some((plugin)=>isRsdoctorPlugin(plugin))) return;
                        let packageName = isRspack ? '@rsdoctor/rspack-plugin' : '@rsdoctor/webpack-plugin';
                        try {
                            packagePath = rsdoctor_require.resolve(packageName, {
                                paths: [
                                    api.context.rootPath
                                ]
                            });
                        } catch  {
                            index_js_namespaceObject.logger.warn(`\`process.env.RSDOCTOR\` enabled, please install ${picocolors_index_js_default().bold(picocolors_index_js_default().yellow(packageName))} package.`);
                            return;
                        }
                        try {
                            let moduleURL = 'win32' === process.platform ? (0, external_node_url_.pathToFileURL)(packagePath).href : packagePath;
                            module = await import(moduleURL);
                        } catch  {
                            index_js_namespaceObject.logger.error(`\`process.env.RSDOCTOR\` enabled, but failed to load ${picocolors_index_js_default().bold(picocolors_index_js_default().yellow(packageName))} module.`);
                            return;
                        }
                        if (module && module[pluginName]) {
                            for (let config of bundlerConfigs)config.plugins ||= [], config.plugins.push(new module[pluginName]());
                            index_js_namespaceObject.logger.info(`${picocolors_index_js_default().bold(picocolors_index_js_default().yellow(packageName))} enabled.`);
                        }
                    });
                }
            },
            {
                name: 'rsbuild:resource-hints',
                setup (api) {
                    api.modifyHTMLTags(({ headTags, bodyTags }, { environment })=>{
                        let { config } = environment, { dnsPrefetch, preconnect } = config.performance;
                        if (dnsPrefetch) {
                            let attrs = dnsPrefetch.map((option)=>({
                                    href: option
                                }));
                            attrs.length && headTags.unshift(...resourceHints_generateLinks(attrs, 'dns-prefetch'));
                        }
                        if (preconnect) {
                            let attrs = preconnect.map((option)=>'string' == typeof option ? {
                                    href: option
                                } : option);
                            attrs.length && headTags.unshift(...resourceHints_generateLinks(attrs, 'preconnect'));
                        }
                        return {
                            headTags,
                            bodyTags
                        };
                    }), api.modifyBundlerChain((chain, { CHAIN_ID, environment })=>{
                        let { config, htmlPaths } = environment;
                        if (0 === Object.keys(htmlPaths).length) return;
                        let { performance: { preload, prefetch } } = config, HTMLCount = chain.entryPoints.values().length, excludes = ((config)=>{
                            let { scriptTests, styleTests } = getInlineTests(config);
                            return [
                                ...scriptTests,
                                ...styleTests
                            ].filter((item)=>(0, types_namespaceObject.isRegExp)(item));
                        })(config);
                        if (prefetch) {
                            let options = !0 === prefetch ? {} : prefetch;
                            excludes.length && (options.exclude = options.exclude ? [
                                ...helpers_castArray(options.exclude),
                                ...excludes
                            ] : excludes), chain.plugin(CHAIN_ID.PLUGIN.HTML_PREFETCH).use(HtmlResourceHintsPlugin, [
                                options,
                                'prefetch',
                                HTMLCount
                            ]);
                        }
                        if (preload) {
                            let options = !0 === preload ? {} : preload;
                            excludes.length && (options.exclude = options.exclude ? [
                                ...helpers_castArray(options.exclude),
                                ...excludes
                            ] : excludes), chain.plugin(CHAIN_ID.PLUGIN.HTML_PRELOAD).use(HtmlResourceHintsPlugin, [
                                options,
                                'preload',
                                HTMLCount
                            ]);
                        }
                    });
                }
            },
            {
                name: 'rsbuild:performance',
                setup (api) {
                    api.modifyRsbuildConfig({
                        order: 'post',
                        handler: (rsbuildConfig)=>{
                            let applyBundleAnalyzeConfig = (config)=>{
                                config.performance?.bundleAnalyze ? config.performance.bundleAnalyze = {
                                    generateStatsFile: !0,
                                    ...config.performance.bundleAnalyze || {}
                                } : (config.performance ??= {}, config.performance.bundleAnalyze = {
                                    analyzerMode: 'disabled',
                                    generateStatsFile: !0
                                });
                            };
                            if (rsbuildConfig.performance?.profile) applyBundleAnalyzeConfig(rsbuildConfig);
                            else if (rsbuildConfig.environments) for (let config of Object.values(rsbuildConfig.environments))config.performance?.profile && applyBundleAnalyzeConfig(config);
                        }
                    }), api.modifyBundlerChain((chain, { environment })=>{
                        let { config } = environment, { profile } = config.performance;
                        profile && chain.profile(profile);
                    });
                }
            },
            {
                name: 'rsbuild:bundle-analyzer',
                setup (api) {
                    api.modifyRsbuildConfig({
                        order: 'post',
                        handler: (config)=>{
                            if (isUseAnalyzer(config) || Object.values(config.environments || []).some((config)=>isUseAnalyzer(config))) return config.dev ||= {}, config.dev.writeToDisk = !0, config;
                        }
                    }), api.modifyBundlerChain(async (chain, { CHAIN_ID, environment })=>{
                        let { config } = environment;
                        if (!isUseAnalyzer(config)) return;
                        let { default: BundleAnalyzer } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/webpack-bundle-analyzer/index.js"));
                        chain.plugin(CHAIN_ID.PLUGIN.BUNDLE_ANALYZER).use(BundleAnalyzer.BundleAnalyzerPlugin, [
                            {
                                analyzerMode: 'static',
                                openAnalyzer: !1,
                                reportFilename: `report-${environment.name}.html`,
                                ...config.performance.bundleAnalyze || {}
                            }
                        ]);
                    });
                }
            },
            {
                name: 'rsbuild:server',
                setup (api) {
                    let onStartServer = ({ port, routes })=>{
                        let config = api.getNormalizedConfig();
                        config.server.open && server_open_open({
                            https: api.context.devServer?.https,
                            port,
                            routes,
                            config
                        });
                    };
                    api.onAfterStartDevServer(onStartServer), api.onAfterStartProdServer(onStartServer), api.onBeforeBuild(async ({ isFirstCompile, environments })=>{
                        if (isFirstCompile) for (let publicDir of normalizePublicDirs(api.getNormalizedConfig().server.publicDir)){
                            let { name, copyOnBuild } = publicDir;
                            if (!1 === copyOnBuild || !name) continue;
                            let normalizedPath = (0, external_node_path_.isAbsolute)(name) ? name : (0, external_node_path_.join)(api.context.rootPath, name);
                            if (!external_node_fs_default().existsSync(normalizedPath)) continue;
                            let distPaths = dedupeNestedPaths(Object.values(environments).filter(({ config })=>!0 === copyOnBuild || 'auto' === copyOnBuild && 'node' !== config.output.target).map(({ distPath })=>distPath));
                            try {
                                await Promise.all(distPaths.map(async (distPath)=>(isDeno && external_node_fs_default().existsSync(distPath) && await external_node_fs_default().promises.rm(distPath, {
                                        recursive: !0,
                                        force: !0
                                    }), external_node_fs_default().promises.cp(normalizedPath, distPath, {
                                        recursive: !0,
                                        dereference: !0
                                    }))));
                            } catch (err) {
                                throw err instanceof Error && (err.message = `Failed to copy public directory '${normalizedPath}' to output directory:\n${err.message}`), err;
                            }
                        }
                    });
                }
            },
            {
                name: 'rsbuild:manifest',
                setup (api) {
                    let manifestFilenames = new Map();
                    api.modifyBundlerChain(async (chain, { CHAIN_ID, environment, isDev })=>{
                        let htmlPaths, manifestOptions, environment1, { output: { manifest }, dev: { writeToDisk } } = environment.config;
                        if (!1 === manifest) return;
                        let manifestOptions1 = function(manifest) {
                            if ('string' == typeof manifest) return {
                                filename: manifest
                            };
                            let defaultOptions = {
                                filename: 'manifest.json'
                            };
                            return 'boolean' == typeof manifest ? defaultOptions : {
                                ...defaultOptions,
                                ...manifest
                            };
                        }(manifest), { RspackManifestPlugin } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "../../compiled/rspack-manifest-plugin/index.js")), { htmlPaths: htmlPaths1 } = environment, filter = manifestOptions1.filter ?? ((file)=>!file.name.endsWith('.LICENSE.txt'));
                        manifestFilenames.set(environment.name, manifestOptions1.filename), chain.plugin(CHAIN_ID.PLUGIN.MANIFEST).use(RspackManifestPlugin, [
                            {
                                fileName: manifestOptions1.filename,
                                filter,
                                writeToFileEmit: isDev && !0 !== writeToDisk,
                                generate: (htmlPaths = htmlPaths1, manifestOptions = manifestOptions1, environment1 = environment, (_seed, files)=>{
                                    let chunkEntries = new Map(), licenseMap = new Map(), allFiles = files.map((file)=>{
                                        if (file.chunk) for (let name of recursiveChunkEntryNames(file.chunk))chunkEntries.set(name, [
                                            file,
                                            ...chunkEntries.get(name) || []
                                        ]);
                                        if (file.path.endsWith('.LICENSE.txt')) {
                                            let sourceFilePath = file.path.split('.LICENSE.txt')[0];
                                            licenseMap.set(sourceFilePath, file.path);
                                        }
                                        return file.path;
                                    }), entries = {};
                                    for (let [name, chunkFiles] of chunkEntries){
                                        let assets = new Set(), initialJS = [], asyncJS = [], initialCSS = [], asyncCSS = [];
                                        for (let file of chunkFiles){
                                            file.isInitial ? file.path.endsWith('.css') ? initialCSS.push(file.path) : initialJS.push(file.path) : file.path.endsWith('.css') ? asyncCSS.push(file.path) : asyncJS.push(file.path);
                                            let relatedLICENSE = licenseMap.get(file.path);
                                            if (relatedLICENSE && assets.add(relatedLICENSE), file.chunk) for (let auxiliaryFile of file.chunk.auxiliaryFiles)assets.add(auxiliaryFile);
                                        }
                                        let entryManifest = {};
                                        assets.size && (entryManifest.assets = Array.from(assets));
                                        let htmlPath = files.find((f)=>f.name === htmlPaths[name])?.path;
                                        htmlPath && (entryManifest.html = [
                                            htmlPath
                                        ]), initialJS.length && (entryManifest.initial = {
                                            js: initialJS
                                        }), initialCSS.length && (entryManifest.initial = {
                                            ...entryManifest.initial || {},
                                            css: initialCSS
                                        }), asyncJS.length && (entryManifest.async = {
                                            js: asyncJS
                                        }), asyncCSS.length && (entryManifest.async = {
                                            ...entryManifest.async || {},
                                            css: asyncCSS
                                        }), entries[name] = entryManifest;
                                    }
                                    let manifestData = {
                                        allFiles,
                                        entries
                                    };
                                    if (manifestOptions.generate) {
                                        let generatedManifest = manifestOptions.generate({
                                            files,
                                            manifestData
                                        });
                                        if (isObject(generatedManifest)) return environment1.manifest = generatedManifest, generatedManifest;
                                        throw Error(`${picocolors_index_js_default().dim('[rsbuild:manifest]')} \`manifest.generate\` function must return a valid manifest object.`);
                                    }
                                    return environment1.manifest = manifestData, manifestData;
                                })
                            }
                        ]);
                    }), api.onAfterCreateCompiler(()=>{
                        if (manifestFilenames.size <= 1) return void manifestFilenames.clear();
                        let environmentNames = Array.from(manifestFilenames.keys()), filenames = Array.from(manifestFilenames.values());
                        new Set(filenames).size !== filenames.length && index_js_namespaceObject.logger.warn(`${picocolors_index_js_default().dim('[rsbuild:manifest]')} The ${picocolors_index_js_default().yellow('"manifest.filename"')} option must be unique when there are multiple environments (${environmentNames.join(', ')}), otherwise the manifest file will be overwritten.`), manifestFilenames.clear();
                    });
                }
            },
            {
                name: 'rsbuild:module-federation',
                setup (api) {
                    'webpack' !== api.context.bundlerType && (api.modifyRsbuildConfig((config)=>{
                        let { moduleFederation } = config;
                        if (moduleFederation?.options && moduleFederation.options.exposes) {
                            let userConfig = api.getRsbuildConfig('original');
                            config.dev ||= {}, config.server ||= {}, userConfig.server?.cors === void 0 && (config.server.cors = !0), config.server?.port && !config.dev.client?.port && (config.dev.client ||= {}, config.dev.client.port = config.server.port), userConfig.dev?.assetPrefix === void 0 && config.dev.assetPrefix === config.server?.base && (config.dev.assetPrefix = !0);
                        }
                    }), api.modifyEnvironmentConfig((config)=>{
                        config.moduleFederation?.options && (config.performance?.chunkSplit?.strategy === 'split-by-experience' && (config.performance.chunkSplit = {
                            ...config.performance.chunkSplit,
                            strategy: 'custom'
                        }), config.source.include = [
                            ...config.source.include || [],
                            /@module-federation[\\/]/
                        ]);
                    }), api.modifyBundlerChain((chain, { CHAIN_ID, target, environment })=>{
                        let { config } = environment;
                        if (!config.moduleFederation?.options || 'web' !== target) return;
                        let { options } = config.moduleFederation;
                        chain.plugin(CHAIN_ID.PLUGIN.MODULE_FEDERATION).use(rspack_rspack.container.ModuleFederationPlugin, [
                            options
                        ]), options.name && (options.exposes && chain.plugin('mf-patch-split-chunks').use(PatchSplitChunksPlugin, [
                            options.name
                        ]), chain.output.get('uniqueName') || chain.output.set('uniqueName', options.name));
                    }));
                }
            },
            {
                name: 'rsbuild:rspack-profile',
                setup (api) {
                    let traceOutput;
                    if ('webpack' === api.context.bundlerType) return;
                    let { RSPACK_PROFILE } = process.env;
                    if (!RSPACK_PROFILE) return;
                    let onStart = async ()=>{
                        traceOutput = await applyProfile(api.context.rootPath, RSPACK_PROFILE, process.env.RSPACK_TRACE_LAYER, process.env.RSPACK_TRACE_OUTPUT);
                    };
                    api.onBeforeBuild(async ({ isFirstCompile })=>{
                        isFirstCompile && await onStart();
                    }), api.onBeforeStartDevServer(onStart), api.onExit(()=>{
                        traceOutput && (rspack_rspack.experiments.globalTrace.cleanup(), index_js_namespaceObject.logger.info(`profile file saved to ${picocolors_index_js_default().cyan(traceOutput)}`));
                    });
                }
            },
            {
                name: 'rsbuild:lazy-compilation',
                apply: 'serve',
                setup (api) {
                    api.modifyBundlerChain((chain, { environment, target })=>{
                        if ('web' !== target || 'webpack' === api.context.bundlerType) return;
                        let { config } = environment, options = config.dev?.lazyCompilation;
                        if (options) {
                            if (!0 === options && Object.keys(chain.entryPoints.entries() || {}).length <= 1) return void chain.lazyCompilation({
                                entries: !1,
                                imports: !0
                            });
                            if ('object' == typeof options && 'string' == typeof options.serverUrl && api.context.devServer) return void chain.lazyCompilation({
                                ...options,
                                serverUrl: replacePortPlaceholder(options.serverUrl, api.context.devServer.port)
                            });
                            chain.lazyCompilation(options);
                        }
                    });
                }
            },
            {
                name: 'rsbuild:sri',
                setup (api) {
                    api.modifyBundlerChain((chain, { environment, CHAIN_ID, rspack })=>{
                        if ('webpack' === api.context.bundlerType) return;
                        let { config, htmlPaths } = environment;
                        if (0 === Object.keys(htmlPaths).length) return;
                        let { sri } = config.security;
                        if (!('auto' === sri.enable ? 'production' === config.mode : sri.enable)) return;
                        let crossorigin = chain.output.get('crossOriginLoading');
                        (!1 === crossorigin || void 0 === crossorigin) && chain.output.crossOriginLoading('anonymous');
                        let { algorithm = 'sha384' } = sri;
                        chain.plugin(CHAIN_ID.PLUGIN.SUBRESOURCE_INTEGRITY).use(rspack.experiments.SubresourceIntegrityPlugin, [
                            {
                                enabled: !0,
                                hashFuncNames: [
                                    algorithm
                                ],
                                htmlPlugin: external_node_path_default().join(COMPILED_PATH, 'html-rspack-plugin/index.js')
                            }
                        ]);
                    });
                }
            },
            {
                name: 'rsbuild:nonce',
                setup (api) {
                    api.onAfterCreateCompiler(({ compiler, environments })=>{
                        let nonces = Object.values(environments).map((environment)=>{
                            let { nonce } = environment.config.security;
                            return nonce;
                        });
                        if (!nonces.some((nonce)=>!!nonce)) return;
                        let environmentList = Object.values(environments);
                        applyToCompiler(compiler, (compiler, index)=>{
                            let nonce = nonces[index], environment = environmentList.find((item)=>item.index === index);
                            if (!Object.keys(environment?.htmlPaths ?? {}).length || !nonce) return;
                            let injectCode = createVirtualModule(`__webpack_nonce__ = "${nonce}";`);
                            new compiler.webpack.EntryPlugin(compiler.context, injectCode, {
                                name: void 0
                            }).apply(compiler);
                        });
                    }), api.modifyHTMLTags({
                        order: 'post',
                        handler: ({ headTags, bodyTags }, { environment })=>{
                            let { config } = environment, { nonce } = config.security, allTags = [
                                ...headTags,
                                ...bodyTags
                            ];
                            if (nonce) for (let tag of allTags)("script" === tag.tag || 'style' === tag.tag || 'link' === tag.tag && tag.attrs?.rel === 'preload' && tag.attrs?.as === "script") && (tag.attrs ??= {}, tag.attrs.nonce = nonce);
                            return {
                                headTags,
                                bodyTags
                            };
                        }
                    });
                }
            }
        ]), index_js_namespaceObject.logger.debug('default plugins registered');
        let provider = config.provider || rspackProvider, providerInstance = await provider({
            context: context2,
            pluginManager: pluginManager1,
            rsbuildOptions: resolvedOptions,
            helpers: provider_helpers_namespaceObject
        }), preview = async (options = {})=>{
            context2.action = 'preview', process.env.NODE_ENV || setNodeEnv('production');
            let config = await initRsbuildConfig({
                context: context2,
                pluginManager: pluginManager1
            }), { distPath } = context2, { checkDistDir = !0 } = options;
            if (checkDistDir) {
                if (!(0, external_node_fs_namespaceObject.existsSync)(distPath)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:preview]')} The output directory ${picocolors_index_js_default().yellow(distPath)} does not exist, please build the project before previewing.`);
                if (function(path) {
                    let files = external_node_fs_default().readdirSync(path);
                    return 0 === files.length || 1 === files.length && '.git' === files[0];
                }(distPath)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:preview]')} The output directory ${picocolors_index_js_default().yellow(distPath)} is empty, please build the project before previewing.`);
            }
            return startProdServer(context2, config, options);
        }, build = async (...args)=>{
            context2.action = 'build', process.env.NODE_ENV || setNodeEnv('production');
            let buildInstance = await providerInstance.build(...args);
            return {
                ...buildInstance,
                close: async ()=>{
                    await context2.hooks.onCloseBuild.callBatch(), await buildInstance.close();
                }
            };
        }, initAction = ()=>{
            context2.action || (context2.action = 'development' === config.mode ? 'dev' : 'build');
        }, rsbuild = {
            build,
            preview,
            startDevServer: (...args)=>(context2.action = 'dev', process.env.NODE_ENV || setNodeEnv('development'), providerInstance.startDevServer(...args)),
            createCompiler: (...args)=>(initAction(), providerInstance.createCompiler(...args)),
            createDevServer: (...args)=>(context2.action = 'dev', process.env.NODE_ENV || setNodeEnv('development'), providerInstance.createDevServer(...args)),
            inspectConfig: async (...args)=>(initAction(), providerInstance.inspectConfig(...args)),
            ...pick(pluginManager1, [
                'addPlugins',
                'getPlugins',
                'removePlugins',
                'isPluginExists'
            ]),
            ...pick(globalPluginAPI, [
                'context',
                'expose',
                'getRsbuildConfig',
                'getNormalizedConfig',
                'modifyEnvironmentConfig',
                'modifyRsbuildConfig',
                'onAfterBuild',
                'onAfterCreateCompiler',
                'onAfterDevCompile',
                'onAfterStartDevServer',
                'onAfterStartProdServer',
                'onBeforeBuild',
                'onBeforeCreateCompiler',
                'onBeforeDevCompile',
                'onBeforeStartDevServer',
                'onBeforeStartProdServer',
                'onCloseBuild',
                'onCloseDevServer',
                'onDevCompileDone',
                'onExit'
            ]),
            ...pick(providerInstance, [
                'initConfigs'
            ])
        };
        envs && (rsbuild.onCloseBuild(envs.cleanup), rsbuild.onCloseDevServer(envs.cleanup));
        let getFlattenedPlugins = async (pluginOptions)=>{
            let plugins = pluginOptions;
            do plugins = (await Promise.all(plugins)).flat(1 / 0);
            while (plugins.some((v)=>(0, types_namespaceObject.isPromise)(v)));
            return plugins;
        };
        if (config.plugins) {
            let plugins = await getFlattenedPlugins(config.plugins);
            rsbuild.addPlugins(plugins);
        }
        return config.environments && await Promise.all(Object.entries(config.environments).map(async ([name, environmentConfig])=>{
            if (!environmentConfig.plugins || context2.specifiedEnvironments && !context2.specifiedEnvironments.includes(name)) return;
            let plugins = await getFlattenedPlugins(environmentConfig.plugins);
            rsbuild.addPlugins(plugins, {
                environment: name
            });
        })), rsbuild;
    }
    function defineConfig(config) {
        return config;
    }
    async function loadConfig_loadConfig({ cwd = process.cwd(), path, envMode, meta, loader = 'jiti' } = {}) {
        let configExport, configFilePath = ((root, customConfig)=>{
            if (customConfig) {
                let customConfigPath = (0, external_node_path_.isAbsolute)(customConfig) ? customConfig : (0, external_node_path_.join)(root, customConfig);
                if (external_node_fs_default().existsSync(customConfigPath)) return customConfigPath;
                index_js_namespaceObject.logger.warn(`Cannot find config file: ${picocolors_index_js_default().dim(customConfigPath)}\n`);
            }
            for (let file of [
                'rsbuild.config.mjs',
                'rsbuild.config.ts',
                'rsbuild.config.js',
                'rsbuild.config.cjs',
                'rsbuild.config.mts',
                'rsbuild.config.cts'
            ]){
                let configFile = (0, external_node_path_.join)(root, file);
                if (external_node_fs_default().existsSync(configFile)) return configFile;
            }
            return null;
        })(cwd, path);
        if (!configFilePath) return index_js_namespaceObject.logger.debug('no config file found.'), {
            content: {},
            filePath: configFilePath
        };
        let applyMetaInfo = (config)=>(config._privateMeta = {
                configFilePath
            }, config);
        if ('native' === loader || /\.(?:js|mjs|cjs)$/.test(configFilePath)) try {
            let configFileURL = (0, external_node_url_.pathToFileURL)(configFilePath).href, exportModule = await import(`${configFileURL}?t=${Date.now()}`);
            configExport = exportModule.default ? exportModule.default : exportModule;
        } catch (err) {
            if ('native' === loader) throw index_js_namespaceObject.logger.error(`Failed to load file with native loader: ${picocolors_index_js_default().dim(configFilePath)}`), err;
            index_js_namespaceObject.logger.debug(`failed to load file with dynamic import: ${picocolors_index_js_default().dim(configFilePath)}`);
        }
        try {
            if (void 0 === configExport) {
                let { createJiti } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "jiti")), jiti = createJiti(constants_filename, {
                    moduleCache: !1,
                    interopDefault: !0,
                    nativeModules: [
                        '@rspack/core',
                        "typescript"
                    ]
                });
                configExport = await jiti.import(configFilePath, {
                    default: !0
                });
            }
        } catch (err) {
            throw index_js_namespaceObject.logger.error(`Failed to load file with jiti: ${picocolors_index_js_default().dim(configFilePath)}`), err;
        }
        if ('function' == typeof configExport) {
            let command = process.argv[2], nodeEnv = process.env.NODE_ENV || '', result = await configExport({
                env: nodeEnv,
                command,
                envMode: envMode || nodeEnv,
                meta
            });
            if (void 0 === result) throw Error(`${picocolors_index_js_default().dim('[rsbuild:loadConfig]')} The config function must return a config object.`);
            return {
                content: applyMetaInfo(result),
                filePath: configFilePath
            };
        }
        if (!isObject(configExport)) throw Error(`${picocolors_index_js_default().dim('[rsbuild:loadConfig]')} The config must be an object or a function that returns an object, get ${picocolors_index_js_default().yellow(configExport)}`);
        return index_js_namespaceObject.logger.debug('configuration loaded from:', configFilePath), {
            content: applyMetaInfo(configExport),
            filePath: configFilePath
        };
    }
    let commonOpts = {}, init_loadConfig = async (root)=>{
        let { content: config, filePath } = await loadConfig_loadConfig({
            cwd: root,
            path: commonOpts.config,
            envMode: commonOpts.envMode,
            loader: commonOpts.configLoader
        });
        return config.dev ||= {}, config.source ||= {}, config.server ||= {}, commonOpts.base && (config.server.base = commonOpts.base), commonOpts.root && (config.root = root), commonOpts.mode && (config.mode = commonOpts.mode), commonOpts.logLevel && (config.logLevel = commonOpts.logLevel), commonOpts.open && !config.server?.open && (config.server.open = commonOpts.open), commonOpts.host && (config.server.host = commonOpts.host), commonOpts.port && (config.server.port = commonOpts.port), void 0 === config.dev.cliShortcuts && (config.dev.cliShortcuts = !0), filePath && (config.dev.watchFiles = [
            ...config.dev.watchFiles ? helpers_castArray(config.dev.watchFiles) : [],
            {
                paths: filePath,
                type: 'reload-server'
            }
        ]), config;
    };
    async function init_init({ cliOptions, isRestart, isBuildWatch = !1 }) {
        cliOptions && (commonOpts = cliOptions), commonOpts.environment = commonOpts.environment?.flatMap((env)=>env.split(','));
        try {
            var cwd, envDir;
            let cwd1 = process.cwd(), root = commonOpts.root ? ensureAbsolutePath(cwd1, commonOpts.root) : cwd1, rsbuild = await createRsbuild({
                cwd: root,
                rsbuildConfig: ()=>init_loadConfig(root),
                environment: commonOpts.environment,
                loadEnv: !1 !== commonOpts.env && {
                    cwd: (cwd = root, (envDir = commonOpts.envDir) ? external_node_path_default().isAbsolute(envDir) ? envDir : external_node_path_default().join(cwd, envDir) : cwd),
                    mode: commonOpts.envMode
                }
            });
            return rsbuild.onBeforeCreateCompiler(()=>{
                if ('dev' !== rsbuild.context.action && !isBuildWatch) return;
                let files = [], config = rsbuild.getNormalizedConfig();
                if (config.dev.watchFiles) for (let watchConfig of config.dev.watchFiles){
                    if ('reload-server' !== watchConfig.type) continue;
                    let paths = helpers_castArray(watchConfig.paths);
                    watchConfig.options ? watchFilesForRestart({
                        files: paths,
                        rsbuild,
                        isBuildWatch,
                        watchOptions: watchConfig.options
                    }) : files.push(...paths);
                }
                watchFilesForRestart({
                    files,
                    rsbuild,
                    isBuildWatch
                });
            }), rsbuild;
        } catch (err) {
            if (isRestart) index_js_namespaceObject.logger.error(err);
            else throw err;
        }
    }
    let cleaners = [], onBeforeRestartServer = (cleaner)=>{
        cleaners.push(cleaner);
    }, beforeRestart = async ({ filePath, clear = !0, id })=>{
        if (clear && isTTY() && !process.env.DEBUG && process.stdout.write('\x1B[H\x1B[2J'), filePath) {
            let filename = external_node_path_default().basename(filePath);
            index_js_namespaceObject.logger.info(`restarting ${id} as ${picocolors_index_js_default().yellow(filename)} changed\n`);
        } else index_js_namespaceObject.logger.info(`restarting ${id}...\n`);
        for (let cleaner of cleaners)await cleaner();
        cleaners = [];
    }, restartDevServer = async ({ filePath, clear = !0 } = {})=>{
        await beforeRestart({
            filePath,
            clear,
            id: 'server'
        });
        let rsbuild = await init_init({
            isRestart: !0
        });
        return !!rsbuild && (await rsbuild.startDevServer(), !0);
    }, restartBuild = async ({ filePath, clear = !0 } = {})=>{
        await beforeRestart({
            filePath,
            clear,
            id: 'build'
        });
        let rsbuild = await init_init({
            isRestart: !0,
            isBuildWatch: !0
        });
        return !!rsbuild && (onBeforeRestartServer((await rsbuild.build({
            watch: !0
        })).close), !0);
    };
    async function watchFilesForRestart({ files, rsbuild, isBuildWatch, watchOptions }) {
        if (!files.length) return;
        let root = rsbuild.context.rootPath, watcher = await createChokidar(files, root, {
            ignoreInitial: !0,
            ignorePermissionErrors: !0,
            ...watchOptions
        }), restarting = !1, onChange = async (filePath)=>{
            restarting || (restarting = !0, (isBuildWatch ? await restartBuild({
                filePath
            }) : await restartDevServer({
                filePath
            })) ? await watcher.close() : index_js_namespaceObject.logger.error(isBuildWatch ? 'Restart build failed.' : 'Restart server failed.'), restarting = !1);
        };
        watcher.on('add', onChange), watcher.on('change', onChange), watcher.on('unlink', onChange);
    }
    let applyServerOptions = (command)=>{
        command.option('-o, --open [url]', 'Open the page in browser on startup').option('--port <port>', 'Set the port number for the server').option('--host <host>', 'Set the host that the server listens to');
    }, { argv: cli_argv } = process;
    function runCLI() {
        if (process.title = 'rsbuild-node', !process.env.NODE_ENV) {
            let command = cli_argv[2];
            process.env.NODE_ENV = [
                'build',
                'preview'
            ].includes(command) ? 'production' : 'development';
        }
        let logLevelIndex = process.argv.findIndex((item)=>'--log-level' === item || '--logLevel' === item);
        if (-1 !== logLevelIndex) {
            let level = process.argv[logLevelIndex + 1];
            level && [
                'warn',
                'error',
                'silent'
            ].includes(level) && (index_js_namespaceObject.logger.level = level);
        }
        !function() {
            if (cli_argv.some((item)=>'--help' === item || '-h' === item)) return;
            let { npm_execpath, npm_lifecycle_event, NODE_RUN_SCRIPT_NAME } = process.env, isBun = npm_execpath?.includes('.bun');
            index_js_namespaceObject.logger.greet(`${'npx' === npm_lifecycle_event || isBun || NODE_RUN_SCRIPT_NAME ? '\n' : ''}  Rsbuild v1.5.0\n`);
        }();
        try {
            !function() {
                let cli = ((name = "")=>new CAC(name))('rsbuild');
                cli.help(), cli.version("1.5.0"), cli.option('--base <base>', 'Set the base path of the server').option('-c, --config <config>', 'Set the configuration file (relative or absolute path)').option('--config-loader <loader>', 'Set the config file loader (jiti | native)', {
                    default: 'jiti'
                }).option('--env-dir <dir>', 'Set the directory for loading `.env` files').option('--env-mode <mode>', 'Set the env mode to load the `.env.[mode]` file').option('--environment <name>', 'Set the environment name(s) to build', {
                    type: [
                        String
                    ],
                    default: []
                }).option('--log-level <level>', 'Set the log level (info | warn | error | silent)').option('-m, --mode <mode>', 'Set the build mode (development | production | none)').option('-r, --root <root>', 'Set the project root directory (absolute path or relative to cwd)').option('--no-env', 'Disable loading of `.env` files');
                let devCommand = cli.command('dev', 'Start the dev server').alias(''), buildCommand = cli.command('build', 'Build the app for production'), previewCommand = cli.command('preview', 'Preview the production build locally'), inspectCommand = cli.command('inspect', 'Inspect the Rspack and Rsbuild configs');
                applyServerOptions(devCommand), applyServerOptions(previewCommand), devCommand.action(async (options)=>{
                    try {
                        let rsbuild = await init_init({
                            cliOptions: options
                        });
                        await rsbuild?.startDevServer();
                    } catch (err) {
                        index_js_namespaceObject.logger.error('Failed to start dev server.'), index_js_namespaceObject.logger.error(err), process.exit(1);
                    }
                }), buildCommand.option('-w, --watch', 'Enable watch mode to automatically rebuild on file changes').action(async (options)=>{
                    try {
                        let rsbuild = await init_init({
                            cliOptions: options,
                            isBuildWatch: options.watch
                        }), buildInstance = await rsbuild?.build({
                            watch: options.watch
                        });
                        buildInstance && (options.watch ? onBeforeRestartServer(buildInstance.close) : await buildInstance.close());
                    } catch (err) {
                        err instanceof Error && err.message === RSPACK_BUILD_ERROR || index_js_namespaceObject.logger.error('Failed to build.'), index_js_namespaceObject.logger.error(err), process.exit(1);
                    }
                }), previewCommand.action(async (options)=>{
                    try {
                        let rsbuild = await init_init({
                            cliOptions: options
                        });
                        await rsbuild?.preview();
                    } catch (err) {
                        index_js_namespaceObject.logger.error('Failed to start preview server.'), index_js_namespaceObject.logger.error(err), process.exit(1);
                    }
                }), inspectCommand.option('--output <output>', 'Set the output path for inspection results').option('--verbose', 'Show complete function definitions in output').action(async (options)=>{
                    try {
                        let rsbuild = await init_init({
                            cliOptions: options
                        });
                        await rsbuild?.inspectConfig({
                            verbose: options.verbose,
                            outputPath: options.output,
                            writeToDisk: !0
                        });
                    } catch (err) {
                        index_js_namespaceObject.logger.error('Failed to inspect config.'), index_js_namespaceObject.logger.error(err), process.exit(1);
                    }
                }), cli.parse();
            }();
        } catch (err) {
            index_js_namespaceObject.logger.error('Failed to start Rsbuild CLI.'), index_js_namespaceObject.logger.error(err);
        }
    }
    let src_version = "1.5.0";
})(), exports.PLUGIN_CSS_NAME = __webpack_exports__.PLUGIN_CSS_NAME, exports.PLUGIN_SWC_NAME = __webpack_exports__.PLUGIN_SWC_NAME, exports.createRsbuild = __webpack_exports__.createRsbuild, exports.defaultAllowedOrigins = __webpack_exports__.defaultAllowedOrigins, exports.defineConfig = __webpack_exports__.defineConfig, exports.ensureAssetPrefix = __webpack_exports__.ensureAssetPrefix, exports.loadConfig = __webpack_exports__.loadConfig, exports.loadEnv = __webpack_exports__.loadEnv, exports.logger = __webpack_exports__.logger, exports.mergeRsbuildConfig = __webpack_exports__.mergeRsbuildConfig, exports.rspack = __webpack_exports__.rspack, exports.runCLI = __webpack_exports__.runCLI, exports.version = __webpack_exports__.version, __webpack_exports__)-1 === [
    "PLUGIN_CSS_NAME",
    "PLUGIN_SWC_NAME",
    "createRsbuild",
    "defaultAllowedOrigins",
    "defineConfig",
    "ensureAssetPrefix",
    "loadConfig",
    "loadEnv",
    "logger",
    "mergeRsbuildConfig",
    "rspack",
    "runCLI",
    "version"
].indexOf(__webpack_i__) && (exports[__webpack_i__] = __webpack_exports__[__webpack_i__]);
Object.defineProperty(exports, '__esModule', {
    value: !0
});
