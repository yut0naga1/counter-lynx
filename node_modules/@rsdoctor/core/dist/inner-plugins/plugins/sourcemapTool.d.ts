import { RsdoctorPluginInstance } from '../../types';
import { Linter, Plugin } from '@rsdoctor/types';
export declare const UNASSIGNED = "[unassigned]";
/**
 * Options for handling source map assets.
 * @property compilation - The current compilation object.
 * @property pluginInstance - The Rsdoctor plugin instance.
 * @property sourceMapFilenameRegex - Regex to extract file paths from source map sources.
 * @property namespace - Optional namespace for resolving sources.
 */
interface SourceMapAssetOptions {
    compilation: Plugin.BaseCompilation;
    pluginInstance: RsdoctorPluginInstance<Plugin.BaseCompiler, Linter.ExtendRuleData<any, string>[]>;
    sourceMapFilenameRegex: RegExp;
    namespace?: string;
}
/**
 * Returns a function that resolves a source path to an absolute path, with caching for performance.
 * Handles both normal and webpack:// sources, optionally using a namespace.
 * @param context - The base directory for resolution.
 * @param namespace - Optional namespace for webpack sources.
 * @param cache - Optional cache map to store resolved paths.
 */
export declare function bindContextCache(context: string, namespace?: string, cache?: Map<string, string>): (source: string, sourceMapFilenameRegex: RegExp) => string;
/**
 * Collects and processes source map information for a given asset.
 * Groups mappings by line, sorts them, and reconstructs the original source code segments.
 * @param map - The raw source map object.
 * @param assetLinesCodeList - The code lines of the asset.
 * @param _compilation - The current compilation object.
 * @param _this - The Rsdoctor plugin instance.
 * @param sourceMapFilenameRegex - Regex to extract file paths from source map sources.
 * @param namespace - Optional namespace for resolving sources.
 */
export declare function collectSourceMaps(map: any, assetLinesCodeList: string[], _compilation: Plugin.BaseCompilation, _this: RsdoctorPluginInstance<Plugin.BaseCompiler, Linter.ExtendRuleData[]>, sourceMapFilenameRegex?: RegExp, namespace?: string): Promise<void>;
/**
 * Handles source map collection after assets are emitted (Rspack only).
 * Iterates over all assets, parses them, and collects source maps.
 * @param compilation - The current compilation object.
 * @param _this - The Rsdoctor plugin instance.
 * @param sourceMapFilenameRegex - Regex to extract file paths from source map sources.
 */
export declare function handleAfterEmitAssets(compilation: Plugin.BaseCompilation, _this: RsdoctorPluginInstance<Plugin.BaseCompiler, Linter.ExtendRuleData<any, string>[]>, sourceMapFilenameRegex?: RegExp, namespace?: string): Promise<void>;
/**
 * Handles source map collection for Webpack assets (non-Rspack).
 * Iterates over all assets, parses them, and collects source maps.
 * @param options - SourceMapAssetOptions containing compilation, plugin instance, regex, and namespace.
 */
export declare function handleEmitAssets(options: SourceMapAssetOptions): Promise<void>;
export {};
//# sourceMappingURL=sourcemapTool.d.ts.map