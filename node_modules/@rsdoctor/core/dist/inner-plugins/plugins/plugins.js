"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    InternalPluginsPlugin: ()=>InternalPluginsPlugin
});
const types_namespaceObject = require("@rsdoctor/types");
const index_js_namespaceObject = require("../../build-utils/build/index.js");
const external_utils_index_js_namespaceObject = require("../utils/index.js");
const external_base_js_namespaceObject = require("./base.js");
const logger_namespaceObject = require("@rsdoctor/utils/logger");
class InternalPluginsPlugin extends external_base_js_namespaceObject.InternalBasePlugin {
    apply(compiler) {
        (0, logger_namespaceObject.time)('InternalPluginsPlugin.apply');
        try {
            compiler.hooks.afterPlugins.tap(this.tapPostOptions, this.afterPlugins.bind(this, compiler));
            compiler.hooks.compilation.tap(this.tapPostOptions, this.compilation);
        } finally{
            (0, logger_namespaceObject.timeEnd)('InternalPluginsPlugin.apply');
        }
    }
    constructor(...args){
        super(...args), this.name = 'plugins', this.afterPlugins = (compiler)=>{
            (0, logger_namespaceObject.time)('InternalPluginsPlugin.afterPlugins');
            try {
                if (compiler.isChild()) return;
                index_js_namespaceObject.Utils.interceptCompilerHooks(compiler, (name, hook)=>(0, external_utils_index_js_namespaceObject.interceptPluginHook)(this.sdk, name, hook));
                this.sdk.addClientRoutes([
                    types_namespaceObject.Manifest.RsdoctorManifestClientRoutes.WebpackPlugins
                ]);
            } finally{
                (0, logger_namespaceObject.timeEnd)('InternalPluginsPlugin.afterPlugins');
            }
        }, this.compilation = (compilation)=>{
            (0, logger_namespaceObject.time)('InternalPluginsPlugin.compilation');
            try {
                if (compilation.compiler.isChild()) return;
                index_js_namespaceObject.Utils.interceptCompilationHooks(compilation, (name, hook)=>(0, external_utils_index_js_namespaceObject.interceptPluginHook)(this.sdk, name, hook));
            } finally{
                (0, logger_namespaceObject.timeEnd)('InternalPluginsPlugin.compilation');
            }
        };
    }
}
exports.InternalPluginsPlugin = __webpack_exports__.InternalPluginsPlugin;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "InternalPluginsPlugin"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
