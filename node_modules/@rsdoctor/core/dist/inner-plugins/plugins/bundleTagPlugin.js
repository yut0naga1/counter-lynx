"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    InternalBundleTagPlugin: ()=>InternalBundleTagPlugin
});
const external_path_namespaceObject = require("path");
const external_base_js_namespaceObject = require("./base.js");
const logger_namespaceObject = require("@rsdoctor/utils/logger");
class InternalBundleTagPlugin extends external_base_js_namespaceObject.InternalBasePlugin {
    apply(compiler) {
        (0, logger_namespaceObject.time)('InternalBundleTagPlugin.apply');
        try {
            var _this_options_supports;
            const supportBannerPlugin = null == (_this_options_supports = this.options.supports) ? void 0 : _this_options_supports.banner;
            compiler.hooks.compilation.tap('RsdoctorTagBannerPlugin', (compilation)=>{
                compilation.hooks.processAssets.tapPromise({
                    name: 'RsdoctorTagBannerPlugin',
                    stage: -2000
                }, async ()=>{
                    var _compiler_options_optimization;
                    if (!compilation.options.plugins.map((p)=>p && p.constructor.name).includes('BannerPlugin') && true !== supportBannerPlugin || false === supportBannerPlugin || 'rspack' in compiler) return;
                    logger_namespaceObject.logger.info(logger_namespaceObject.chalk.magenta("Rsdoctor's `supports.banner` option is enabled, this is for debugging only. Do not use it for production."));
                    const minimizers = (null == (_compiler_options_optimization = compiler.options.optimization) ? void 0 : _compiler_options_optimization.minimizer) || [];
                    const terserPlugin = minimizers.find((plugin)=>{
                        var _plugin_constructor;
                        return (null == plugin ? void 0 : null == (_plugin_constructor = plugin.constructor) ? void 0 : _plugin_constructor.name) === 'TerserPlugin';
                    });
                    const swcPlugin = minimizers.find((plugin)=>{
                        var _plugin_constructor;
                        return (null == plugin ? void 0 : null == (_plugin_constructor = plugin.constructor) ? void 0 : _plugin_constructor.name) === 'SwcJsMinimizerRspackPlugin';
                    });
                    const hasTerserPlugin = !!terserPlugin;
                    const hasSwcJsMinimizer = !!swcPlugin;
                    if (hasTerserPlugin || hasSwcJsMinimizer) {
                        var _terserPlugin_options_minimizer_options_compress, _terserPlugin_options_minimizer_options, _terserPlugin_options_minimizer, _terserPlugin_options, _swcPlugin__args__minimizerOptions_compress, _swcPlugin__args__minimizerOptions, _swcPlugin__args_, _swcPlugin__args;
                        const terserDropConsole = null == terserPlugin ? void 0 : null == (_terserPlugin_options = terserPlugin.options) ? void 0 : null == (_terserPlugin_options_minimizer = _terserPlugin_options.minimizer) ? void 0 : null == (_terserPlugin_options_minimizer_options = _terserPlugin_options_minimizer.options) ? void 0 : null == (_terserPlugin_options_minimizer_options_compress = _terserPlugin_options_minimizer_options.compress) ? void 0 : _terserPlugin_options_minimizer_options_compress.drop_console;
                        const swcDropConsole = null == swcPlugin ? void 0 : null == (_swcPlugin__args = swcPlugin._args) ? void 0 : null == (_swcPlugin__args_ = _swcPlugin__args[0]) ? void 0 : null == (_swcPlugin__args__minimizerOptions = _swcPlugin__args_.minimizerOptions) ? void 0 : null == (_swcPlugin__args__minimizerOptions_compress = _swcPlugin__args__minimizerOptions.compress) ? void 0 : _swcPlugin__args__minimizerOptions_compress.drop_console;
                        if (true === terserDropConsole || true === swcDropConsole) logger_namespaceObject.logger.warn(logger_namespaceObject.chalk.yellow('Warning: BannerPlugin detected in project. Please disable drop_console option in TerserPlugin or SwcJsMinimizerRspackPlugin to enable Rsdoctor analysis for BannerPlugin.'));
                    }
                    const chunks = compilation.chunks;
                    for (let chunk of chunks)for (const file of chunk.files){
                        if (!file || '.js' !== (0, external_path_namespaceObject.extname)(file)) continue;
                        const { ConcatSource } = compiler.webpack.sources;
                        compilation.updateAsset(file, (old)=>{
                            const concatSource = new ConcatSource();
                            let header = "\n console.log('RSDOCTOR_START::');\n";
                            let footer = "\n console.log('RSDOCTOR_END::');\n";
                            concatSource.add(header);
                            concatSource.add(old);
                            concatSource.add(footer);
                            return concatSource;
                        }, ()=>{});
                    }
                });
            });
        } finally{
            (0, logger_namespaceObject.timeEnd)('InternalBundleTagPlugin.apply');
        }
    }
    constructor(...args){
        super(...args), this.name = 'bundleTag';
    }
}
exports.InternalBundleTagPlugin = __webpack_exports__.InternalBundleTagPlugin;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "InternalBundleTagPlugin"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
