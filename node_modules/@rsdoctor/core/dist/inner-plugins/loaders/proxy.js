"use strict";
var __webpack_exports__ = {};
const index_js_namespaceObject = require("../../build-utils/build/index.js");
const external_utils_index_js_namespaceObject = require("../utils/index.js");
const loaderModule = function(...args) {
    if ((0, external_utils_index_js_namespaceObject.shouldSkipLoader)(this)) return void this.callback(null, ...args);
    this.cacheable(false);
    const mod = (0, external_utils_index_js_namespaceObject.getOriginLoaderModule)(this);
    if (mod.default) {
        if (false === mod.raw && Buffer.isBuffer(args[0])) args[0] = args[0].toString();
        let start;
        let startHRTime;
        const trap = index_js_namespaceObject.Utils.createLoaderContextTrap.call(this, (err, res, sourceMap)=>{
            (0, external_utils_index_js_namespaceObject.reportLoader)(this, start, startHRTime, false, false, args[0].toString(), err, res, sourceMap);
        });
        start = Date.now();
        startHRTime = process.hrtime();
        try {
            const result = mod.default.apply(trap, args);
            if (result) {
                if (!(result instanceof Promise)) (0, external_utils_index_js_namespaceObject.reportLoader)(this, start, startHRTime, false, true, args[0].toString(), null, result);
            }
            return result;
        } catch (error) {
            (0, external_utils_index_js_namespaceObject.reportLoader)(this, start, startHRTime, false, true, args[0].toString(), error, null);
            throw error;
        }
    }
    this.callback(null, ...args);
};
loaderModule.pitch = function() {
    if ((0, external_utils_index_js_namespaceObject.shouldSkipLoader)(this)) return;
    this.cacheable(false);
    const mod = (0, external_utils_index_js_namespaceObject.getOriginLoaderModule)(this);
    if (mod.pitch && 'function' == typeof mod.pitch) {
        let start;
        let startHRTime;
        const trap = index_js_namespaceObject.Utils.createLoaderContextTrap.call(this, (err, res)=>{
            (0, external_utils_index_js_namespaceObject.reportLoader)(this, start, startHRTime, true, false, err ? 'Loader Pitch Async Error' : '', err, res);
        });
        start = Date.now();
        startHRTime = process.hrtime();
        try {
            const res = mod.pitch.apply(trap, arguments);
            if (res) {
                if (!(res instanceof Promise)) (0, external_utils_index_js_namespaceObject.reportLoader)(this, start, startHRTime, true, true, '', null, res);
            }
            return res;
        } catch (error) {
            (0, external_utils_index_js_namespaceObject.reportLoader)(this, start, startHRTime, true, true, 'Loader Pitch Sync Error', error, null);
            throw error;
        }
    }
};
loaderModule.raw = true;
for(var __webpack_i__ in __webpack_exports__)exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
module.exports = loaderModule;
