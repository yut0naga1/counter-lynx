import { Linter, Plugin, SDK } from '@rsdoctor/types';
import type { RuleSetCondition as RspackRuleSetCondition, RuleSetRule as RspackRuleSetRule } from '@rspack/core';
import { RuleSetCondition as WebpackRuleSetCondition, RuleSetConditionAbsolute as WebpackRuleSetConditionAbsolute, RuleSetRule as WebpackRuleSetRule } from 'webpack';
import { RsdoctorWebpackPluginOptions, RsdoctorPluginOptionsNormalized, IReportCodeType, RsdoctorRspackPluginOptions, RsdoctorRspackPluginOptionsNormalized } from '../../types';
export declare function normalizeUserConfig<Rules extends Linter.ExtendRuleData[]>(config?: RsdoctorWebpackPluginOptions<Rules>): RsdoctorPluginOptionsNormalized<Rules>;
export declare function makeRuleSetSerializable(item: RspackRuleSetCondition | WebpackRuleSetConditionAbsolute | WebpackRuleSetCondition | void): void;
export declare function makeRulesSerializable(rules: Plugin.RuleSetRule[] | RspackRuleSetRule['oneOf'] | WebpackRuleSetRule['oneOf']): void;
export declare const normalizeReportType: (reportCodeType: IReportCodeType, mode: keyof typeof SDK.IMode) => SDK.ToDataType;
export declare function normalizeRspackUserOptions<Rules extends Linter.ExtendRuleData[]>(options: RsdoctorRspackPluginOptions<Rules>): RsdoctorRspackPluginOptionsNormalized<Rules>;
//# sourceMappingURL=config.d.ts.map