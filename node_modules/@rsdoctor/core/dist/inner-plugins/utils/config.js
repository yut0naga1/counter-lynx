"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    normalizeUserConfig: ()=>normalizeUserConfig,
    makeRuleSetSerializable: ()=>makeRuleSetSerializable,
    makeRulesSerializable: ()=>makeRulesSerializable,
    normalizeReportType: ()=>normalizeReportType,
    normalizeRspackUserOptions: ()=>normalizeRspackUserOptions
});
const types_namespaceObject = require("@rsdoctor/types");
const external_assert_namespaceObject = require("assert");
var external_assert_default = /*#__PURE__*/ __webpack_require__.n(external_assert_namespaceObject);
const logger_namespaceObject = require("@rsdoctor/utils/logger");
function defaultBoolean(v, dft) {
    return 'boolean' == typeof v ? v : dft;
}
function getDefaultOutput() {
    return {
        reportCodeType: {
            noModuleSource: false,
            noAssetsAndModuleSource: false,
            noCode: false
        },
        reportDir: '',
        compressData: true
    };
}
function getDefaultSupports() {
    return {
        parseBundle: true,
        banner: void 0,
        gzip: true
    };
}
function normalizeFeatures(features, mode) {
    if (Array.isArray(features)) return {
        loader: features.includes('loader'),
        plugins: features.includes('plugins'),
        resolver: features.includes('resolver'),
        bundle: features.includes('bundle'),
        treeShaking: features.includes('treeShaking'),
        lite: features.includes('lite') || mode === types_namespaceObject.SDK.IMode[types_namespaceObject.SDK.IMode.lite]
    };
    return {
        loader: defaultBoolean(features.loader, true),
        plugins: defaultBoolean(features.plugins, true),
        resolver: defaultBoolean(features.resolver, false),
        bundle: defaultBoolean(features.bundle, true),
        treeShaking: defaultBoolean(features.treeShaking, false),
        lite: defaultBoolean(features.lite, false) || mode === types_namespaceObject.SDK.IMode[types_namespaceObject.SDK.IMode.lite]
    };
}
function normalizeLinter(linter) {
    return {
        rules: {},
        extends: [],
        level: 'Error',
        ...linter
    };
}
function normalizeUserConfig(config = {}) {
    const { linter = {}, features = {}, loaderInterceptorOptions = {}, disableClientServer = false, sdkInstance, innerClientPath = '', output = getDefaultOutput(), supports = getDefaultSupports(), port, printLog = {
        serverUrls: true
    }, mode = 'normal', brief = {
        reportHtmlDir: void 0,
        reportHtmlName: void 0,
        writeDataJson: false
    } } = config;
    external_assert_default()('object' == typeof linter);
    external_assert_default()('object' == typeof features || Array.isArray(features));
    external_assert_default()('object' == typeof loaderInterceptorOptions);
    external_assert_default()('boolean' == typeof disableClientServer);
    const _features = normalizeFeatures(features, mode);
    const _linter = normalizeLinter(linter);
    let _mode = mode;
    if (_features.lite && _mode !== types_namespaceObject.SDK.IMode[types_namespaceObject.SDK.IMode.brief]) _mode = types_namespaceObject.SDK.IMode[types_namespaceObject.SDK.IMode.lite];
    const reportCodeType = output.reportCodeType ? normalizeReportType(output.reportCodeType, _mode) : normalizeReportType(getDefaultOutput().reportCodeType, _mode);
    const res = {
        linter: _linter,
        features: _features,
        loaderInterceptorOptions: {
            skipLoaders: Array.isArray(loaderInterceptorOptions.skipLoaders) ? loaderInterceptorOptions.skipLoaders : []
        },
        disableClientServer,
        sdkInstance,
        output: {
            reportCodeType,
            reportDir: output.reportDir || '',
            compressData: void 0 !== output.compressData ? output.compressData : true
        },
        innerClientPath,
        supports,
        port,
        printLog,
        mode,
        brief
    };
    if (false === res.output.compressData && (!output.reportCodeType || !output.reportCodeType.noAssetsAndModuleSource)) logger_namespaceObject.logger.info(logger_namespaceObject.chalk.yellow("[RSDOCTOR]: When you use compressData: false, it is recommended to set output.reportCodeType to { noAssetsAndModuleSource: true }."));
    return res;
}
function makeRuleSetSerializable(item) {
    if (!item) return;
    if (item instanceof RegExp) item.toJSON = item.toString;
    else if (Array.isArray(item)) item.forEach((i)=>makeRuleSetSerializable(i));
    else if ('object' == typeof item) {
        makeRuleSetSerializable(item.and);
        makeRuleSetSerializable(item.or);
        makeRuleSetSerializable(item.not);
    }
}
function makeRulesSerializable(rules) {
    if (!Array.isArray(rules)) return;
    if (!rules.length) return;
    rules.forEach((rule)=>{
        if (!rule) return;
        makeRuleSetSerializable(rule.test);
        makeRuleSetSerializable(rule.resourceQuery);
        makeRuleSetSerializable(rule.resource);
        makeRuleSetSerializable(rule.resourceFragment);
        makeRuleSetSerializable(rule.scheme);
        makeRuleSetSerializable(rule.issuer);
        if ('issuerLayer' in rule) makeRuleSetSerializable(rule.issuerLayer);
        makeRuleSetSerializable(rule.include);
        makeRuleSetSerializable(rule.exclude);
        if (rule.oneOf) makeRulesSerializable(rule.oneOf);
        if ('rules' in rule && rule.rules) makeRulesSerializable(rule.rules);
    });
}
const normalizeReportType = (reportCodeType, mode)=>{
    if (reportCodeType.noCode) return types_namespaceObject.SDK.ToDataType.NoCode;
    if (mode === types_namespaceObject.SDK.IMode[types_namespaceObject.SDK.IMode.brief]) return types_namespaceObject.SDK.ToDataType.NoCode;
    if (mode === types_namespaceObject.SDK.IMode[types_namespaceObject.SDK.IMode.lite]) return types_namespaceObject.SDK.ToDataType.NoSourceAndAssets;
    if (reportCodeType.noAssetsAndModuleSource) return types_namespaceObject.SDK.ToDataType.NoSourceAndAssets;
    if (reportCodeType.noModuleSource) return types_namespaceObject.SDK.ToDataType.NoSource;
    return types_namespaceObject.SDK.ToDataType.Normal;
};
function normalizeRspackUserOptions(options) {
    var _options_experiments, _options_experiments1;
    const config = normalizeUserConfig(options);
    config.experiments ??= {
        enableNativePlugin: {
            moduleGraph: false,
            chunkGraph: false
        }
    };
    if ('boolean' == typeof (null == (_options_experiments = options.experiments) ? void 0 : _options_experiments.enableNativePlugin) && (null == (_options_experiments1 = options.experiments) ? void 0 : _options_experiments1.enableNativePlugin) === true) config.experiments.enableNativePlugin = {
        moduleGraph: true,
        chunkGraph: true
    };
    else config.experiments.enableNativePlugin = {
        moduleGraph: false,
        chunkGraph: false
    };
    return config;
}
exports.makeRuleSetSerializable = __webpack_exports__.makeRuleSetSerializable;
exports.makeRulesSerializable = __webpack_exports__.makeRulesSerializable;
exports.normalizeReportType = __webpack_exports__.normalizeReportType;
exports.normalizeRspackUserOptions = __webpack_exports__.normalizeRspackUserOptions;
exports.normalizeUserConfig = __webpack_exports__.normalizeUserConfig;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "makeRuleSetSerializable",
    "makeRulesSerializable",
    "normalizeReportType",
    "normalizeRspackUserOptions",
    "normalizeUserConfig"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
