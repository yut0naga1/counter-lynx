"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    removeNoImportStyle: ()=>removeNoImportStyle,
    getImportKind: ()=>getImportKind,
    isImportDependency: ()=>isImportDependency
});
const types_namespaceObject = require("@rsdoctor/types");
const common_namespaceObject = require("@rsdoctor/utils/common");
function isImportDependency({ type }) {
    return 'harmony side effect evaluation' === type || 'cjs require' === type || 'cjs full require' === type || 'cjs export require' === type || 'provided' === type || 'esm import' === type;
}
function getImportKind(dep) {
    const { type } = dep;
    if (!type) return types_namespaceObject.SDK.DependencyKind.Unknown;
    if (type.includes('harmony')) return types_namespaceObject.SDK.DependencyKind.ImportStatement;
    if (type.includes('cjs')) return types_namespaceObject.SDK.DependencyKind.RequireCall;
    if (type.includes('import()')) return types_namespaceObject.SDK.DependencyKind.DynamicImport;
    if (type.includes('amd')) return types_namespaceObject.SDK.DependencyKind.AMDRequire;
    return types_namespaceObject.SDK.DependencyKind.Unknown;
}
function removeNoImportStyle(graph) {
    graph.getModules().filter((module)=>common_namespaceObject.File.isStyleExt(module.path)).filter((item)=>0 === item.getImported().length).forEach((item)=>graph.removeModule(item));
}
exports.getImportKind = __webpack_exports__.getImportKind;
exports.isImportDependency = __webpack_exports__.isImportDependency;
exports.removeNoImportStyle = __webpack_exports__.removeNoImportStyle;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getImportKind",
    "isImportDependency",
    "removeNoImportStyle"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
