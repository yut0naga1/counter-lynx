"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    patchNativeModuleGraph: ()=>patchNativeModuleGraph,
    patchNativeModuleIds: ()=>patchNativeModuleIds,
    patchNativeModuleSources: ()=>patchNativeModuleSources
});
const graph_namespaceObject = require("@rsdoctor/graph");
const types_namespaceObject = require("@rsdoctor/types");
const createDependencyKind = (type)=>{
    if (type.includes('harmony')) return types_namespaceObject.SDK.DependencyKind.ImportStatement;
    if (type.includes('cjs')) return types_namespaceObject.SDK.DependencyKind.RequireCall;
    if (type.includes('import()')) return types_namespaceObject.SDK.DependencyKind.DynamicImport;
    if (type.includes('amd')) return types_namespaceObject.SDK.DependencyKind.AMDRequire;
    return types_namespaceObject.SDK.DependencyKind.Unknown;
};
function patchNativeModuleGraph(mg, cg, rawModuleGraph) {
    const { modules: rawModules, dependencies: rawDependencies, chunkModules: rawChunkModules } = rawModuleGraph;
    const modules = rawModules.map((module)=>{
        const res = new graph_namespaceObject.Module(module.identifier, module.path, module.isEntry, 'concatenated' === module.kind ? types_namespaceObject.SDK.ModuleKind.Concatenation : types_namespaceObject.SDK.ModuleKind.Normal, void 0, module.layer);
        res.setId(module.ukey);
        return res;
    });
    mg.setModules(modules);
    for (const rawModule of rawModules){
        const module = mg.getModuleById(rawModule.ukey);
        if (module) module.setImported(rawModule.imported.map((ukey)=>mg.getModuleById(ukey)).filter(Boolean));
    }
    for (const rawModule of rawModules){
        const module = mg.getModuleById(rawModule.ukey);
        module.setModules(rawModule.modules.map((ukey)=>mg.getModuleById(ukey)).filter(Boolean));
    }
    for (const rawModule of rawModules){
        const module = mg.getModuleById(rawModule.ukey);
        if (module) module.setConcatenationModules(rawModule.belongModules.map((ukey)=>mg.getModuleById(ukey)).filter(Boolean));
    }
    for (const rawModule of rawModules){
        const module = mg.getModuleById(rawModule.ukey);
        if (module) module.setChunks(rawModule.chunks.map((ukey)=>cg.getChunkById(ukey.toString())).filter(Boolean));
    }
    for (const rawChunkModule of rawChunkModules){
        const chunk = cg.getChunkById(rawChunkModule.chunk.toString());
        if (chunk) chunk.setModules(rawChunkModule.modules.map((ukey)=>mg.getModuleById(ukey)).filter(Boolean));
    }
    const deppendencies = rawDependencies.map((dep)=>{
        const res = new graph_namespaceObject.Dependency(dep.request, mg.getModuleById(dep.module), mg.getModuleById(dep.dependency), createDependencyKind(dep.kind));
        res.setId(dep.ukey);
        return res;
    });
    mg.setDependencies(deppendencies);
    for (const rawModule of rawModules){
        const module = mg.getModuleById(rawModule.ukey);
        module.setDependencies(rawModule.dependencies.map((ukey)=>mg.getDependencyById(ukey)).filter(Boolean));
    }
}
function patchNativeModuleIds(mg, rawModuleIdsPatch) {
    const { moduleIds: rawModuleIds } = rawModuleIdsPatch;
    for (const rawModuleId of rawModuleIds){
        const module = mg.getModuleById(rawModuleId.module);
        if (module) module.setRenderId(rawModuleId.renderId);
    }
}
function patchNativeModuleSources(mg, rawModuleSourcesPatch) {
    const { moduleOriginalSources: rawModuleOriginalSources } = rawModuleSourcesPatch;
    for (const rawModuleOriginalSource of rawModuleOriginalSources){
        const module = mg.getModuleById(rawModuleOriginalSource.module);
        if (module) {
            module.setSource({
                source: rawModuleOriginalSource.source
            });
            module.setSize({
                sourceSize: rawModuleOriginalSource.size
            });
        }
    }
}
exports.patchNativeModuleGraph = __webpack_exports__.patchNativeModuleGraph;
exports.patchNativeModuleIds = __webpack_exports__.patchNativeModuleIds;
exports.patchNativeModuleSources = __webpack_exports__.patchNativeModuleSources;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "patchNativeModuleGraph",
    "patchNativeModuleIds",
    "patchNativeModuleSources"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
