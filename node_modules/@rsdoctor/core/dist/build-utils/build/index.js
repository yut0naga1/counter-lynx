"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    Chunks: ()=>index_js_namespaceObject,
    Utils: ()=>external_utils_index_js_namespaceObject,
    ModuleGraph: ()=>external_module_graph_index_js_namespaceObject,
    Loader: ()=>external_loader_index_js_namespaceObject,
    Types: ()=>external_types_index_js_namespaceObject
});
const index_js_namespaceObject = require("./chunks/index.js");
const external_utils_index_js_namespaceObject = require("./utils/index.js");
const external_loader_index_js_namespaceObject = require("./loader/index.js");
const external_types_index_js_namespaceObject = require("../../types/index.js");
const external_module_graph_index_js_namespaceObject = require("./module-graph/index.js");
exports.Chunks = __webpack_exports__.Chunks;
exports.Loader = __webpack_exports__.Loader;
exports.ModuleGraph = __webpack_exports__.ModuleGraph;
exports.Types = __webpack_exports__.Types;
exports.Utils = __webpack_exports__.Utils;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "Chunks",
    "Loader",
    "ModuleGraph",
    "Types",
    "Utils"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
