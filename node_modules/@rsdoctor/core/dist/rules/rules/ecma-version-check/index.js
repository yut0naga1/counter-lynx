"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    rule: ()=>rule
});
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const plugin_check_syntax_namespaceObject = require("@rsbuild/plugin-check-syntax");
const external_browserslist_load_config_namespaceObject = require("browserslist-load-config");
const external_rule_js_namespaceObject = require("../../rule.js");
const types_namespaceObject = require("@rsdoctor/types");
const title = 'ecma-version-check';
const rule = (0, external_rule_js_namespaceObject.defineRule)(()=>({
        meta: {
            code: 'E1004',
            title,
            category: 'bundle',
            severity: types_namespaceObject.Linter.Severity.Warn,
            defaultConfig: {
                ecmaVersion: void 0,
                targets: []
            }
        },
        async check ({ chunkGraph, report, ruleConfig, root, configs }) {
            for (const asset of chunkGraph.getAssets()){
                var _configs_, _buildConfig_output;
                if ('.js' !== external_path_default().extname(asset.path)) continue;
                const browserslistConfig = (0, external_browserslist_load_config_namespaceObject.loadConfig)({
                    path: root,
                    env: 'production'
                });
                const { exclude, excludeOutput, targets, ecmaVersion } = ruleConfig;
                const finalTargets = targets || browserslistConfig || [];
                if (!finalTargets.length && !ecmaVersion) return;
                const buildConfig = null == (_configs_ = configs[0]) ? void 0 : _configs_.config;
                const context = (null == buildConfig ? void 0 : buildConfig.context) || root;
                const checkSyntax = new plugin_check_syntax_namespaceObject.CheckSyntax({
                    exclude,
                    excludeOutput,
                    ecmaVersion,
                    rootPath: context,
                    targets: finalTargets
                });
                const outputDir = (null == buildConfig ? void 0 : null == (_buildConfig_output = buildConfig.output) ? void 0 : _buildConfig_output.path) || external_path_default().resolve(root, 'dist');
                const assetPath = external_path_default().resolve(outputDir, asset.path);
                await checkSyntax.check(assetPath, asset.content);
                checkSyntax.errors.forEach((err)=>{
                    report({
                        message: `Find some syntax that does not match "ecmaVersion <= ${checkSyntax.ecmaVersion}"`,
                        detail: {
                            error: err,
                            type: 'link'
                        }
                    });
                });
            }
        }
    }));
exports.rule = __webpack_exports__.rule;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "rule"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
