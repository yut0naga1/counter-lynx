"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getErrorDetail: ()=>getErrorDetail,
    getErrorMsg: ()=>getErrorMsg
});
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const external_filesize_namespaceObject = require("filesize");
function getErrorMsg(packages, root) {
    const pkgName = packages[0].name;
    let message = `Multiple packages of ${pkgName} found:\n`;
    for (const pkg of packages)message += `  ${pkg.version} ${(0, external_filesize_namespaceObject.filesize)(pkg.getSize().parsedSize)} ${external_path_default().relative(root, pkg.root)}\n`;
    return message.slice(0, -1);
}
function getErrorDetail(pkg, pkgGraph) {
    function getImported(pkg, ans) {
        const dependencies = pkgGraph.getDependenciesFromPackage(pkg);
        for (const dep of dependencies)if (dep.refDependency) {
            if (!ans.some((dep)=>dep.dependency === pkg)) {
                if (!dep.package) return ans.concat(dep);
                return getImported(dep.package, ans.concat(dep));
            }
        }
        return ans;
    }
    const packageImportLinks = getImported(pkg, []);
    return {
        target: {
            name: pkg.name,
            version: pkg.version,
            root: pkg.root
        },
        targetSize: {
            sourceSize: pkg.getSize().sourceSize,
            parsedSize: pkg.getSize().parsedSize
        },
        dependencies: packageImportLinks.map((item)=>({
                dependencyId: item.refDependency.id,
                group: item.package ? `${item.package.name}@${item.package.version}` : void 0
            }))
    };
}
exports.getErrorDetail = __webpack_exports__.getErrorDetail;
exports.getErrorMsg = __webpack_exports__.getErrorMsg;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getErrorDetail",
    "getErrorMsg"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
