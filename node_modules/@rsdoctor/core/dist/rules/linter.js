"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    Linter: ()=>Linter,
    LinterType: ()=>types_namespaceObject.Linter
});
const types_namespaceObject = require("@rsdoctor/types");
const external_rule_js_namespaceObject = require("./rule.js");
const index_js_namespaceObject = require("./rules/index.js");
const external_utils_js_namespaceObject = require("./utils.js");
class Linter {
    getRules(ruleMap, extendRules, filterLevel) {
        const outside = extendRules.map((item)=>external_rule_js_namespaceObject.Rule.from(item));
        const rules = index_js_namespaceObject.rules.map((item)=>new external_rule_js_namespaceObject.Rule(item)).concat(outside);
        rules.forEach((rule)=>{
            if (ruleMap[rule.title]) rule.setOption(ruleMap[rule.title]);
        });
        return rules.filter((rule)=>rule.match(filterLevel));
    }
    async validate(context) {
        const lintResult = {
            errors: [],
            replace: []
        };
        await Promise.all(this.rules.map(async (rule)=>{
            const result = await rule.validate(context);
            lintResult.errors.push(...result.errors);
            lintResult.replace.push(...result.replace);
        }));
        return lintResult;
    }
    async afterValidate(context) {
        await Promise.all(this.rules.map((rule)=>rule.afterValidate(context)));
    }
    constructor({ rules, extends: extendRules, level } = {}){
        this.rules = [];
        this.rules = this.getRules(rules ?? {}, extendRules ?? [], (0, external_utils_js_namespaceObject.toSeverity)(level ?? 'Error', types_namespaceObject.Linter.Severity.Error));
    }
}
exports.Linter = __webpack_exports__.Linter;
exports.LinterType = __webpack_exports__.LinterType;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "Linter",
    "LinterType"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
