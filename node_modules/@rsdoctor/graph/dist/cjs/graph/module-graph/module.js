"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    Module: ()=>Module
});
const types_namespaceObject = require("@rsdoctor/types");
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const common_namespaceObject = require("@rsdoctor/utils/common");
const external_dependency_js_namespaceObject = require("./dependency.js");
const external_statement_js_namespaceObject = require("./statement.js");
const external_utils_js_namespaceObject = require("./utils.js");
const external_node_zlib_namespaceObject = require("node:zlib");
let module_id = 1;
class Module {
    static init() {
        module_id = 1;
    }
    get rootModule() {
        return this.modules.find((item)=>item.path === this.path);
    }
    get isPreferSource() {
        if ('boolean' == typeof this._isPreferSource) return this._isPreferSource;
        const result = this.source.source.length > 0 && 'test code' !== this.source.source && Boolean(this.sourceMap);
        this._isPreferSource = result;
        return result;
    }
    addBailoutReason(reason) {
        this.bailoutReason.push(reason);
    }
    getBailoutReason() {
        return this.bailoutReason;
    }
    getChunks() {
        return this.chunks.slice();
    }
    addChunk(chunk) {
        if (!this.chunks.includes(chunk)) {
            this.chunks.push(chunk);
            chunk.addModule(this);
        }
    }
    removeChunk(chunk) {
        this.chunks = this.chunks.filter((item)=>item !== chunk);
    }
    getDependencies() {
        return this.dependencies.slice();
    }
    getDependencyByRequest(request) {
        return this.dependencies.find((item)=>item.request === request);
    }
    getDependencyByModule(module) {
        return this.dependencies.find((item)=>item.originDependency === module || item.dependency === module);
    }
    addDependency(request, module, kind, statements) {
        const dep = new external_dependency_js_namespaceObject.Dependency(request, this, module, kind, statements);
        if (this.dependencies.every((item)=>!item.isSameWithoutStatements(dep))) {
            this.dependencies.push(dep);
            module.addImported(this);
            if (module.rootModule) module.rootModule.addImported(this);
            return dep;
        }
    }
    removeDependency(dep) {
        this.dependencies = this.dependencies.filter((item)=>item === dep);
    }
    removeDependencyByModule(module) {
        const dep = this.getDependencyByModule(module);
        if (dep) this.removeDependency(dep);
    }
    getImported() {
        return this.imported.slice();
    }
    addImported(module) {
        if (!this.imported.includes(module)) this.imported.push(module);
    }
    removeImported(module) {
        this.imported = this.imported.filter((item)=>item === module);
    }
    setProgram(program) {
        this.program = program;
    }
    getProgram() {
        return this.program;
    }
    setSource(input) {
        const { source } = this;
        source.source = input.source ?? source.source;
        source.transformed = input.transformed ?? source.transformed;
        source.parsedSource = input.parsedSource ?? source.parsedSource;
    }
    getSource(type = types_namespaceObject.SDK.ToDataType.Normal) {
        if (type === types_namespaceObject.SDK.ToDataType.NoCode) return {
            source: '',
            transformed: '',
            parsedSource: ''
        };
        if (type === types_namespaceObject.SDK.ToDataType.NoSourceAndAssets || type === types_namespaceObject.SDK.ToDataType.NoSource) return {
            source: '',
            transformed: '',
            parsedSource: this.isPreferSource ? '' : this.source.parsedSource
        };
        if (type === types_namespaceObject.SDK.ToDataType.All) return {
            source: this.source.source,
            transformed: this.source.transformed,
            parsedSource: this.isPreferSource ? '' : this.source.parsedSource
        };
        return {
            source: this.source.source,
            transformed: '',
            parsedSource: this.isPreferSource ? '' : this.source.parsedSource
        };
    }
    setSourceMap(sourceMap) {
        this.sourceMap = sourceMap;
    }
    getSourceMap() {
        return this.sourceMap;
    }
    setSize(input) {
        const { size } = this;
        size.sourceSize = input.sourceSize ?? size.sourceSize;
        size.transformedSize = input.transformedSize ?? size.transformedSize;
        size.parsedSize = input.parsedSize ?? size.parsedSize;
        if ('number' == typeof input.gzipSize) size.gzipSize = input.gzipSize;
        else {
            const code = this.source.parsedSource || this.source.source;
            if (code && 'string' == typeof code && code.length > 0) try {
                size.gzipSize = (0, external_node_zlib_namespaceObject.gzipSync)(code, {
                    level: 9
                }).length;
            } catch (e) {
                size.gzipSize = 0;
            }
        }
    }
    getSize() {
        return {
            ...this.size
        };
    }
    getStatement(transformed) {
        return new external_statement_js_namespaceObject.Statement(this, {
            source: this.getSourceRange(transformed),
            transformed: {
                start: {
                    ...transformed.start
                },
                end: transformed.end ? {
                    ...transformed.end
                } : void 0
            }
        });
    }
    getSourceRange(transformed) {
        const { sourceMap } = this;
        if (!sourceMap) return;
        const source = {
            start: {}
        };
        const startInSource = sourceMap.originalPositionFor({
            line: transformed.start.line ?? 0,
            column: transformed.start.column ?? 0,
            bias: 1
        });
        if (common_namespaceObject.Lodash.isNumber(startInSource.line)) source.start = {
            line: startInSource.line,
            column: startInSource.column ?? void 0
        };
        if (transformed.end) {
            const endInSource = sourceMap.originalPositionFor({
                line: transformed.end.line ?? 0,
                column: transformed.end.column ?? 0
            });
            if (common_namespaceObject.Lodash.isNumber(endInSource.line)) source.end = {
                line: endInSource.line,
                column: endInSource.column ?? void 0
            };
        }
        return source;
    }
    addNormalModule(module) {
        if (!this.modules.includes(module)) {
            this.modules.push(module);
            module.addConcatenationModule(this);
        }
    }
    getNormalModules() {
        return this.modules.slice();
    }
    addConcatenationModule(module) {
        if (!this.concatenationModules.includes(module)) this.concatenationModules.push(module);
    }
    addIssuerPath(issuerPath) {
        var _this_issuerPath;
        if (!(null == (_this_issuerPath = this.issuerPath) ? void 0 : _this_issuerPath.length)) this.issuerPath = issuerPath;
    }
    getIssuerPath() {
        return this.issuerPath;
    }
    getConcatenationModules() {
        return this.concatenationModules.slice();
    }
    toData(contextPath) {
        var _this_issuerPath;
        const { isPreferSource } = this;
        const moduleName = (0, external_utils_js_namespaceObject.getModuleName)(this.webpackId);
        const data = {
            id: this.id,
            renderId: this.renderId,
            webpackId: contextPath && moduleName.indexOf('.') > 0 ? external_path_default().relative(contextPath, moduleName) : this.webpackId,
            path: this.path,
            isPreferSource,
            dependencies: this.dependencies.map((item)=>item.id),
            imported: this.imported.map((item)=>item.id),
            chunks: this.chunks.map((item)=>item.id),
            size: this.getSize(),
            kind: this.kind,
            ...this.layer ? {
                layer: this.layer
            } : {},
            issuerPath: (null == (_this_issuerPath = this.issuerPath) ? void 0 : _this_issuerPath.filter((issuer)=>issuer.moduleId).map((issuer)=>issuer.moduleId)) || [],
            bailoutReason: this.bailoutReason
        };
        if (this.meta.hasSetEsModuleStatement || this.meta.strictHarmonyModule) {
            data.meta = {};
            if (this.meta.hasSetEsModuleStatement) data.meta.hasSetEsModuleStatement = true;
            if (this.meta.strictHarmonyModule) data.meta.strictHarmonyModule = true;
        }
        if (this.isEntry) data.isEntry = this.isEntry;
        if (this.modules.length > 0) data.modules = this.modules.map((item)=>item.id);
        if (this.rootModule) data.rootModule = this.rootModule.id;
        if (this.concatenationModules.length > 0) data.concatenationModules = this.concatenationModules.map((data)=>data.id);
        return data;
    }
    setId(id) {
        this.id = id;
    }
    setRenderId(renderId) {
        this.renderId = renderId;
    }
    setChunks(chunks) {
        this.chunks = chunks;
    }
    setDependencies(dependencies) {
        this.dependencies = dependencies;
    }
    setImported(imported) {
        this.imported = imported;
    }
    setModules(modules) {
        this.modules = modules;
    }
    setConcatenationModules(modules) {
        this.concatenationModules = modules;
    }
    constructor(webpackId, path, isEntry = false, kind = types_namespaceObject.SDK.ModuleKind.Normal, renderId, layer = ''){
        this.issuerPath = [];
        this.bailoutReason = [];
        this.source = {
            source: '',
            transformed: '',
            parsedSource: ''
        };
        this.size = {
            sourceSize: 0,
            transformedSize: 0,
            parsedSize: 0,
            gzipSize: 0
        };
        this.chunks = [];
        this.dependencies = [];
        this.imported = [];
        this.modules = [];
        this.concatenationModules = [];
        this.meta = {
            hasSetEsModuleStatement: false,
            strictHarmonyModule: false
        };
        this.id = module_id++;
        this.webpackId = webpackId;
        this.path = path;
        this.isEntry = isEntry;
        this.kind = kind;
        this.renderId = renderId;
        this.layer = layer;
    }
}
Module.kind = types_namespaceObject.SDK.ModuleKind;
exports.Module = __webpack_exports__.Module;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "Module"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
