"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    Variable: ()=>Variable
});
let id = 1;
class Variable {
    static init() {
        id = 1;
    }
    get isUsed() {
        return this._exported ? this._exported.getSideEffects().length > 0 : false;
    }
    setExportInfo(info) {
        this._exported = info;
        info.variable = this;
    }
    getExportInfo() {
        return this._exported;
    }
    toData() {
        const data = {
            id: this.id,
            name: this.name,
            module: this.module.id,
            identifier: this.identifier.toData(),
            usedInfo: this.usedInfo
        };
        if (this._exported) data.exported = this._exported.id;
        return data;
    }
    constructor(name, module, usedInfo, identifier){
        this.id = id++;
        this.name = name;
        this.module = module;
        this.usedInfo = usedInfo;
        this.identifier = identifier;
    }
}
exports.Variable = __webpack_exports__.Variable;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "Variable"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
