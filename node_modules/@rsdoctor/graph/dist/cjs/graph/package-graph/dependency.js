"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    PackageDependency: ()=>PackageDependency
});
let id = 1;
class PackageDependency {
    get name() {
        return this.dependency.name;
    }
    get version() {
        return this.dependency.version;
    }
    get root() {
        return this.dependency.root;
    }
    isSame(dep) {
        return this.refDependency === dep.refDependency && this.dependency.isSame(dep.dependency);
    }
    toData() {
        return {
            id: this.id,
            dependency: this.dependency.id,
            package: this.package.id,
            refDependency: this.refDependency.id
        };
    }
    constructor(pack, dep, refDependency){
        this.id = id++;
        this.package = pack;
        this.dependency = dep;
        this.refDependency = refDependency;
    }
}
exports.PackageDependency = __webpack_exports__.PackageDependency;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "PackageDependency"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
