import { SDK } from '@rsdoctor/types';
export declare class ModuleGraph implements SDK.ModuleGraphInstance {
    static init(): void;
    static fromData(data: Partial<SDK.ModuleGraphData>): ModuleGraph;
    private _dependenciesIdMap;
    private _moduleWebpackIdMap;
    private _moduleIdMap;
    private _moduleGraphModules;
    private _exportIdMap;
    private _sideEffectIdMap;
    private _varIdMap;
    private _layers;
    clear(): void;
    size(): number;
    fromInstance(data: ModuleGraph): void;
    getSubGraphByModule(module: SDK.ModuleInstance): SDK.ModuleInstance[];
    getModules(): SDK.ModuleInstance[];
    getDependencies(): SDK.DependencyInstance[];
    getEntryModules(): SDK.ModuleInstance[];
    getModuleById(id: number): SDK.ModuleInstance | undefined;
    getDependencyById(id: number): SDK.DependencyInstance | undefined;
    getModuleByWebpackId(id: string): SDK.ModuleInstance | undefined;
    getModuleByFile(file: string): SDK.ModuleInstance | undefined;
    addModule(...modules: SDK.ModuleInstance[]): void;
    addDependency(...deps: SDK.DependencyInstance[]): void;
    removeModule(module: SDK.ModuleInstance): void;
    removeDependency(dep: SDK.DependencyInstance): void;
    addModuleGraphModule(mgm: SDK.ModuleGraphModuleInstance): void;
    getModuleGraphModule(module: SDK.ModuleInstance): SDK.ModuleGraphModuleInstance;
    getModuleGraphModules(): SDK.ModuleGraphModuleInstance[];
    addExportInfo(data: SDK.ExportInstance): void;
    addSideEffect(data: SDK.SideEffectInstance): void;
    addVariable(data: SDK.VariableInstance): void;
    addLayer(layer: string): void;
    getLayers(): Map<string, number>;
    toData(configs?: SDK.ModuleGraphToDataArgs): SDK.ModuleGraphData;
    toCodeData(type?: SDK.ToDataType): SDK.ModuleCodeData;
    setModules(modules: SDK.ModuleInstance[]): void;
    setDependencies(dependencies: SDK.DependencyInstance[]): void;
}
//# sourceMappingURL=graph.d.ts.map