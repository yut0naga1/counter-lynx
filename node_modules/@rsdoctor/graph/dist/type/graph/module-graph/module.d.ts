import { SDK, Plugin } from '@rsdoctor/types';
import type { SourceMapConsumer } from 'source-map';
import type { Program } from 'estree';
import { Dependency } from './dependency';
import { Statement } from './statement';
export declare class Module implements SDK.ModuleInstance {
    static kind: typeof SDK.ModuleKind;
    issuerPath: SDK.ModuleInstance['issuerPath'];
    static init(): void;
    id: number;
    renderId: string | undefined;
    bailoutReason: string[];
    readonly webpackId: string;
    readonly path: string;
    readonly isEntry: boolean;
    readonly kind: SDK.ModuleKind;
    readonly layer?: string;
    private source;
    private size;
    private sourceMap;
    private program;
    private chunks;
    private dependencies;
    private imported;
    private modules;
    private concatenationModules;
    private _isPreferSource?;
    meta: SDK.ModuleBuildMeta;
    constructor(webpackId: string, path: string, isEntry?: boolean, kind?: SDK.ModuleKind, renderId?: string | undefined, layer?: string);
    get rootModule(): SDK.ModuleInstance | undefined;
    get isPreferSource(): boolean;
    addBailoutReason(reason: string): void;
    getBailoutReason(): string[];
    getChunks(): SDK.ChunkInstance[];
    addChunk(chunk: SDK.ChunkInstance): void;
    removeChunk(chunk: SDK.ChunkInstance): void;
    getDependencies(): SDK.DependencyInstance[];
    getDependencyByRequest(request: string): SDK.DependencyInstance | undefined;
    getDependencyByModule(module: SDK.ModuleInstance): SDK.DependencyInstance | undefined;
    addDependency(request: string, module: SDK.ModuleInstance, kind: SDK.DependencyKind, statements?: SDK.StatementInstance[]): Dependency | undefined;
    removeDependency(dep: SDK.DependencyInstance): void;
    removeDependencyByModule(module: SDK.ModuleInstance): void;
    getImported(): SDK.ModuleInstance[];
    addImported(module: SDK.ModuleInstance): void;
    removeImported(module: SDK.ModuleInstance): void;
    setProgram(program: Program): void;
    getProgram(): Program | undefined;
    setSource(input: Partial<SDK.ModuleSource>): void;
    getSource(type?: SDK.ToDataType): {
        source: string;
        transformed: string;
        parsedSource: string;
    };
    setSourceMap(sourceMap: SourceMapConsumer): void;
    getSourceMap(): SourceMapConsumer | undefined;
    setSize(input: Partial<SDK.ModuleSize>): void;
    getSize(): {
        sourceSize: number;
        transformedSize: number;
        parsedSize: number;
        gzipSize: number;
    };
    getStatement(transformed: SDK.SourceRange): Statement;
    getSourceRange(transformed: SDK.SourceRange): SDK.SourceRange | undefined;
    addNormalModule(module: SDK.ModuleInstance): void;
    getNormalModules(): SDK.ModuleInstance[];
    addConcatenationModule(module: SDK.ModuleInstance): void;
    addIssuerPath(issuerPath: Plugin.StatsModule['issuerPath']): void;
    getIssuerPath(): Plugin.StatsModule['issuerPath'];
    getConcatenationModules(): SDK.ModuleInstance[];
    toData(contextPath?: string): SDK.ModuleData;
    setId(id: number): void;
    setRenderId(renderId: string): void;
    setChunks(chunks: SDK.ChunkInstance[]): void;
    setDependencies(dependencies: SDK.DependencyInstance[]): void;
    setImported(imported: SDK.ModuleInstance[]): void;
    setModules(modules: SDK.ModuleInstance[]): void;
    setConcatenationModules(modules: SDK.ModuleInstance[]): void;
}
//# sourceMappingURL=module.d.ts.map