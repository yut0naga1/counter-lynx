let id = 1;
class SideEffect {
    static init() {
        id = 1;
    }
    get variable() {
        var _this_exports__getRecursiveExport, _this_exports_;
        if (void 0 !== this._variable) {
            if (this._variable) return this._variable;
            return;
        }
        const result = null == (_this_exports_ = this.exports[0]) ? void 0 : null == (_this_exports__getRecursiveExport = _this_exports_.getRecursiveExport()) ? void 0 : _this_exports__getRecursiveExport.variable;
        this._variable = result ?? false;
        return result;
    }
    get exports() {
        var _this__exports;
        return (null == (_this__exports = this._exports) ? void 0 : _this__exports.slice()) ?? [];
    }
    setModuleExport(mgm) {
        mgm.getExports().forEach((info)=>this.setExportInfo(info));
    }
    setExportInfo(info) {
        this._exports.push(info);
        info.addSideEffect(this);
    }
    toData() {
        const data = {
            id: this.id,
            name: this.name,
            identifier: this.identifier.toData(),
            module: this.module.id
        };
        if (this.fromDependency) data.fromDependency = this.fromDependency.id;
        if (this.isNameSpace) data.isNameSpace = this.isNameSpace;
        if (this.exports.length > 0) data.exports = this.exports.map((item)=>item.id);
        if (this.variable) data.variable = this.variable.id;
        return data;
    }
    constructor(name, module, identifier, fromRequest, originName){
        this.id = id++;
        this._exports = [];
        this.name = name;
        this.module = module;
        this.identifier = identifier;
        if (fromRequest) this.fromDependency = this.module.getDependencyByRequest(fromRequest);
        if (originName === SideEffect.NamespaceSymbol) this.isNameSpace = true;
        else {
            this.isNameSpace = false;
            this.originName = originName;
        }
    }
}
SideEffect.NamespaceSymbol = Symbol('namespace');
export { SideEffect };
