let id = 1;
class ExportInfo {
    static init() {
        id = 1;
    }
    get isReExport() {
        return Boolean(this.from);
    }
    set variable(data) {
        this._variable = data;
    }
    get variable() {
        var _this_getRecursiveExport;
        if (this._variable) return this._variable;
        if (!this.from || false === this._variable) {
            this._variable = false;
            return;
        }
        const result = null == (_this_getRecursiveExport = this.getRecursiveExport()) ? void 0 : _this_getRecursiveExport.variable;
        if (!result) this._variable = false;
        return result;
    }
    addSideEffect(info) {
        if (this._sideEffects.every((item)=>item.id !== info.id)) {
            this._sideEffects.push(info);
            if (this.from) this.from.addSideEffect(info);
        }
    }
    getSideEffects() {
        return this._sideEffects.slice();
    }
    setFromExport(from) {
        this.from = from;
    }
    getRecursiveExport(depth = 1 / 0) {
        if (0 === depth) throw new Error('`getRecursiveExport` method parameter depth must be greater than 1.');
        if (!this.from) return this;
        let currentDepth = 0;
        let current = this;
        while(current.from && currentDepth < depth){
            currentDepth++;
            current = current.from;
        }
        return current;
    }
    toData() {
        const data = {
            id: this.id,
            name: this.name,
            isReExport: this.isReExport,
            used: this._sideEffects.map((item)=>item.id)
        };
        if (this.from) {
            data.from = this.from.id;
            data.root = this.getRecursiveExport().id;
        }
        if (this.variable) data.variable = this.variable.id;
        return data;
    }
    constructor(name, identifier, variable){
        this.id = id++;
        this._sideEffects = [];
        this.name = name;
        this.identifier = identifier;
        this._variable = variable;
    }
}
export { ExportInfo };
