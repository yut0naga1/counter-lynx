import { relative } from "path";
import { isPackagePath } from "./utils.mjs";
let id = 1;
class Package {
    setDuplicates(data) {
        this.duplicates.push({
            module: data.module,
            chunks: data.chunks
        });
    }
    getModules() {
        return this._modules.slice();
    }
    getDependencies() {
        return this._dependencies.slice();
    }
    getImported() {
        return this._imported.slice();
    }
    addModule(module) {
        if (!this._modules.includes(module)) this._modules.push(module);
    }
    addDependency(dep) {
        if (this._dependencies.every((item)=>!item.isSame(dep))) {
            this._dependencies.push(dep);
            dep.dependency.addImported(this);
        }
    }
    getDependenciesChain(graph) {
        function getImported(pkg, ans) {
            const dependencies = graph.getDependenciesFromPackage(pkg);
            for (const dep of dependencies)if (dep.refDependency) {
                if (!ans.some((dep)=>dep.dependency === pkg)) {
                    if (!dep.package) return ans.concat(dep);
                    return getImported(dep.package, ans.concat(dep));
                }
            }
            return ans;
        }
        return getImported(this, []);
    }
    addImported(pkg) {
        if (!this._imported.includes(pkg)) this._imported.push(pkg);
    }
    contain(file) {
        const ifContain = file.includes(this.root);
        if (!ifContain) return false;
        const subPath = relative(this.root, file);
        return !isPackagePath(subPath);
    }
    isSame(pkg) {
        return this.root === pkg.root && this.version === pkg.version && this.name === pkg.name;
    }
    getSize() {
        return this._modules.reduce((ans, item)=>{
            const size = item.getSize();
            ans.sourceSize += size.sourceSize;
            ans.transformedSize += size.transformedSize;
            ans.parsedSize += size.parsedSize;
            ans.gzipSize += size.gzipSize;
            return ans;
        }, {
            sourceSize: 0,
            transformedSize: 0,
            parsedSize: 0,
            gzipSize: 0
        });
    }
    toData() {
        return {
            id: this.id,
            name: this.name,
            root: this.root,
            version: this.version,
            modules: this.getModules().map((e)=>e.id),
            size: this.getSize(),
            duplicates: this.duplicates
        };
    }
    constructor(name, root, version){
        this.id = id++;
        this._modules = [];
        this._dependencies = [];
        this._imported = [];
        this.name = name;
        this.root = root;
        this.version = version;
        this.duplicates = [];
    }
}
export { Package };
