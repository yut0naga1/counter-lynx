"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    asserts: ()=>asserts
});
const lodash_js_namespaceObject = require("../../common/lodash.js");
function isSyntaxNode(node) {
    return (0, lodash_js_namespaceObject.isObject)(node) && 'type' in node;
}
function assertCreator(type) {
    return (node)=>isSyntaxNode(node) && node.type === type;
}
const asserts = {
    isProgram: assertCreator('Program'),
    isEmptyStatement: assertCreator('EmptyStatement'),
    isBlockStatement: assertCreator('BlockStatement'),
    isStaticBlock: assertCreator('StaticBlock'),
    isExpressionStatement: assertCreator('ExpressionStatement'),
    isIfStatement: assertCreator('IfStatement'),
    isLabeledStatement: assertCreator('LabeledStatement'),
    isBreakStatement: assertCreator('BreakStatement'),
    isContinueStatement: assertCreator('ContinueStatement'),
    isWithStatement: assertCreator('WithStatement'),
    isSwitchStatement: assertCreator('SwitchStatement'),
    isReturnStatement: assertCreator('ReturnStatement'),
    isThrowStatement: assertCreator('ThrowStatement'),
    isTryStatement: assertCreator('TryStatement'),
    isWhileStatement: assertCreator('WhileStatement'),
    isDoWhileStatement: assertCreator('DoWhileStatement'),
    isForStatement: assertCreator('ForStatement'),
    isForInStatement: assertCreator('ForInStatement'),
    isForOfStatement: assertCreator('ForOfStatement'),
    isDebuggerStatement: assertCreator('DebuggerStatement'),
    isFunctionDeclaration: assertCreator('FunctionDeclaration'),
    isVariableDeclaration: assertCreator('VariableDeclaration'),
    isVariableDeclarator: assertCreator('VariableDeclarator'),
    isChainExpression: assertCreator('ChainExpression'),
    isThisExpression: assertCreator('ThisExpression'),
    isArrayExpression: assertCreator('ArrayExpression'),
    isObjectExpression: assertCreator('ObjectExpression'),
    isPrivateIdentifier: assertCreator('PrivateIdentifier'),
    isProperty: assertCreator('Property'),
    isPropertyDefinition: assertCreator('PropertyDefinition'),
    isFunctionExpression: assertCreator('FunctionExpression'),
    isSequenceExpression: assertCreator('SequenceExpression'),
    isUnaryExpression: assertCreator('UnaryExpression'),
    isBinaryExpression: assertCreator('BinaryExpression'),
    isAssignmentExpression: assertCreator('AssignmentExpression'),
    isUpdateExpression: assertCreator('UpdateExpression'),
    isLogicalExpression: assertCreator('LogicalExpression'),
    isConditionalExpression: assertCreator('ConditionalExpression'),
    isNewExpression: assertCreator('NewExpression'),
    isSwitchCase: assertCreator('SwitchCase'),
    isCatchClause: assertCreator('CatchClause'),
    isIdentifier: assertCreator('Identifier'),
    isLiteral: assertCreator('Literal'),
    isSuper: assertCreator('Super'),
    isSpreadElement: assertCreator('SpreadElement'),
    isArrowFunctionExpression: assertCreator('ArrowFunctionExpression'),
    isYieldExpression: assertCreator('YieldExpression'),
    isTemplateLiteral: assertCreator('TemplateLiteral'),
    isTaggedTemplateExpression: assertCreator('TaggedTemplateExpression'),
    isTemplateElement: assertCreator('TemplateElement'),
    isObjectPattern: assertCreator('ObjectPattern'),
    isArrayPattern: assertCreator('ArrayPattern'),
    isRestElement: assertCreator('RestElement'),
    isAssignmentPattern: assertCreator('AssignmentPattern'),
    isClassBody: assertCreator('ClassBody'),
    isClassDeclaration: assertCreator('ClassDeclaration'),
    isClassExpression: assertCreator('ClassExpression'),
    isMetaProperty: assertCreator('MetaProperty'),
    isImportDeclaration: assertCreator('ImportDeclaration'),
    isImportSpecifier: assertCreator('ImportSpecifier'),
    isImportExpression: assertCreator('ImportExpression'),
    isImportDefaultSpecifier: assertCreator('ImportDefaultSpecifier'),
    isImportNamespaceSpecifier: assertCreator('ImportNamespaceSpecifier'),
    isExportNamedDeclaration: assertCreator('ExportNamedDeclaration'),
    isExportSpecifier: assertCreator('ExportSpecifier'),
    isExportDefaultDeclaration: assertCreator('ExportDefaultDeclaration'),
    isExportAllDeclaration: assertCreator('ExportAllDeclaration'),
    isAwaitExpression: assertCreator('AwaitExpression'),
    isMethodDefinition: assertCreator('MethodDefinition'),
    isMemberExpression: assertCreator('MemberExpression'),
    isComment (node) {
        return isSyntaxNode(node) && ('Line' === node.type || 'Block' === node.type);
    },
    isDirective (node) {
        return asserts.isExpressionStatement(node) && 'directive' in node;
    },
    isSimpleCallExpression (node) {
        return isSyntaxNode(node) && 'CallExpression' === node.type;
    },
    isAssignmentProperty (node) {
        return asserts.isProperty(node) && 'init' === node.kind;
    },
    isSimpleLiteral (node) {
        return asserts.isLiteral(node) && !asserts.isRegExpLiteral(node) && !asserts.isBigIntLiteral(node);
    },
    isRegExpLiteral (node) {
        return asserts.isLiteral(node) && 'regex' in node;
    },
    isBigIntLiteral (node) {
        return asserts.isLiteral(node) && 'bigint' in node;
    },
    isExportStatement (node) {
        return asserts.isExportAllDeclaration(node) || asserts.isExportDefaultDeclaration(node) || asserts.isExportNamedDeclaration(node);
    }
};
exports.asserts = __webpack_exports__.asserts;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "asserts"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
