"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    Document: ()=>Document
});
const external_lines_and_columns_namespaceObject = require("lines-and-columns");
const lodash_js_namespaceObject = require("../../common/lodash.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class Document {
    createFinder() {
        const find = new external_lines_and_columns_namespaceObject.LinesAndColumns(this._text);
        this.positionAt = (offset)=>{
            if (offset >= this._text.length) offset = this._text.length - 1;
            if (offset < 0) offset = 0;
            const result = find.locationForIndex(offset);
            if (!result) return;
            return {
                line: result.line + 1,
                column: result.column
            };
        };
        this.offsetAt = (position)=>find.indexForLocation({
                line: position.line - 1,
                column: position.column
            }) ?? void 0;
    }
    getText(range) {
        if (!range) return this._text;
        const start = 'number' == typeof range.start ? range.start : this.offsetAt(range.start);
        const end = 'number' == typeof range.end ? range.end : this.offsetAt(range.end);
        if ((0, lodash_js_namespaceObject.isUndefined)(start)) throw new Error(`Location ${JSON.stringify(start)} is illegal`);
        if ((0, lodash_js_namespaceObject.isUndefined)(end)) throw new Error(`Location ${JSON.stringify(end)} is illegal`);
        return this._text.slice(start, end);
    }
    edit(data) {
        let { _text: content } = this;
        const startOffset = (0, lodash_js_namespaceObject.isNumber)(data.start) ? data.start : this.offsetAt(data.start);
        const endOffset = (0, lodash_js_namespaceObject.isNumber)(data.end) ? data.end : this.offsetAt(data.end);
        if ((0, lodash_js_namespaceObject.isUndefined)(startOffset) || (0, lodash_js_namespaceObject.isUndefined)(endOffset)) return;
        const startTxt = content.substring(0, startOffset);
        const endTxt = content.substring(endOffset, content.length);
        content = startTxt + data.newText + endTxt;
        return content;
    }
    constructor(content){
        _define_property(this, "_text", '');
        _define_property(this, "positionAt", void 0);
        _define_property(this, "offsetAt", void 0);
        this._text;
        this._text = content;
        this.createFinder();
    }
}
exports.Document = __webpack_exports__.Document;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "Document"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
