"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    transform: ()=>transform
});
const external_strip_ansi_namespaceObject = require("strip-ansi");
var external_strip_ansi_default = /*#__PURE__*/ __webpack_require__.n(external_strip_ansi_namespaceObject);
const types_namespaceObject = require("@rsdoctor/types");
const external_error_js_namespaceObject = require("./error.js");
function isEsbuildError(err) {
    return 'pluginName' in err && 'text' in err && 'location' in err;
}
function isBabelError(err) {
    return 'code' in err && 'reasonCode' in err;
}
function isDiagnosticError(err) {
    return 'severity' in err && 'title' in err;
}
function parseBabelErrorMessage(input) {
    var _lines_find;
    const lines = external_strip_ansi_default()(input).split('\n');
    const filePath = lines[0].replace(/^([^:]+):.*/, '$1');
    const message = lines[0].replace(/.*: (.*) \(\d+:\d+\)*/, '$1');
    const lineText = (null == (_lines_find = lines.find((line)=>line.startsWith('> '))) ? void 0 : _lines_find.replace(/> \d+ \| /, '')) ?? '';
    return {
        message,
        filePath,
        lineText
    };
}
function clearMessage(str) {
    return external_strip_ansi_default()(str).replace(/.*: (.*)\n\n[\s\S]*/g, '$1');
}
function clearStack(str) {
    return str.slice(str.indexOf('  at')).replace(/\s*at(.*) \((.*)\)/g, '$1\n$2\n');
}
function transformEsbuildError(err, opt) {
    if (isEsbuildError(err)) {
        var _err_location;
        const errorCode = (null == opt ? void 0 : opt.code) ?? 'ESBUILD_ERROR';
        const speedyError = 'object' == typeof err.detail ? external_error_js_namespaceObject.DevToolError.from(err.detail) : new external_error_js_namespaceObject.DevToolError(errorCode, clearMessage(err.text), {
            ...opt,
            hint: null == (_err_location = err.location) ? void 0 : _err_location.suggestion,
            codeFrame: {
                filePath: err.text.split(':')[0]
            }
        });
        if (err.location) speedyError.setCodeFrame({
            filePath: err.location.file,
            lineText: err.location.lineText,
            length: err.location.length,
            start: {
                line: err.location.line,
                column: err.location.column + 1
            }
        });
        return speedyError;
    }
}
function transformBabelError(err, opt) {
    if (isBabelError(err)) {
        const errorCode = (null == opt ? void 0 : opt.code) ?? err.code ?? 'BABEL';
        const title = err.reasonCode;
        const errorParsed = parseBabelErrorMessage(err.message);
        const speedyError = new external_error_js_namespaceObject.DevToolError(title, errorParsed.message, {
            ...opt,
            code: errorCode,
            stack: err.stack && clearStack(err.stack)
        });
        if (err.loc) speedyError.setCodeFrame({
            ...errorParsed,
            start: {
                line: err.loc.line,
                column: err.loc.column + 1
            }
        });
        return speedyError;
    }
}
function transformNormalError(err, opt) {
    if (err instanceof Error) {
        var _stacks__getFileName, _stacks_;
        const stacks = [];
        const filePath = null == stacks ? void 0 : null == (_stacks_ = stacks[0]) ? void 0 : null == (_stacks__getFileName = _stacks_.getFileName) ? void 0 : _stacks__getFileName.call(_stacks_);
        return new external_error_js_namespaceObject.DevToolError(err.name, clearMessage(err.message), {
            ...opt,
            codeFrame: filePath ? {
                filePath
            } : void 0,
            stack: err.stack && clearStack(err.stack)
        });
    }
}
function transformErrorLike(err, opt) {
    const isErrorLike = err && 'object' == typeof err && err.message;
    if (isErrorLike) {
        var _stacks__getFileName, _stacks_;
        const stacks = [];
        const filePath = null == stacks ? void 0 : null == (_stacks_ = stacks[0]) ? void 0 : null == (_stacks__getFileName = _stacks_.getFileName) ? void 0 : _stacks__getFileName.call(_stacks_);
        return new external_error_js_namespaceObject.DevToolError(err.name || 'UNKNOWN_ERROR', clearMessage(err.message), {
            ...opt,
            codeFrame: filePath ? {
                filePath
            } : void 0,
            stack: err.stack && clearStack(err.stack)
        });
    }
}
function transformDiagnostic(err, opt) {
    if (isDiagnosticError(err)) {
        var _err_suggestions, _err_suggestions1;
        return new external_error_js_namespaceObject.DevToolError(err.title, err.message, {
            ...err,
            ...opt,
            hint: null == (_err_suggestions = err.suggestions) ? void 0 : _err_suggestions.description,
            fixData: null == (_err_suggestions1 = err.suggestions) ? void 0 : _err_suggestions1.fixData,
            codeFrame: err.document ? {
                filePath: err.document.path,
                fileContent: err.document.content,
                start: err.document.range.start,
                end: err.document.range.end
            } : void 0,
            level: types_namespaceObject.Linter.Severity[err.severity]
        });
    }
}
function defaultError(err, opt) {
    return new external_error_js_namespaceObject.DevToolError('UNKNOWN_ERROR', JSON.stringify(err), opt);
}
function transform(err, opt) {
    const transformers = [
        transformEsbuildError,
        transformBabelError,
        transformDiagnostic,
        transformNormalError,
        transformErrorLike
    ];
    for (const fn of transformers){
        const result = fn(err, opt);
        if (result) return result;
    }
    return defaultError(err, opt);
}
exports.transform = __webpack_exports__.transform;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "transform"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
