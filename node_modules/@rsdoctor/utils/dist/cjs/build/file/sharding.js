"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    FileSharding: ()=>FileSharding
});
const external_fs_extra_namespaceObject = require("fs-extra");
var external_fs_extra_default = /*#__PURE__*/ __webpack_require__.n(external_fs_extra_namespaceObject);
const external_fs_namespaceObject = require("fs");
var external_fs_default = /*#__PURE__*/ __webpack_require__.n(external_fs_namespaceObject);
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class FileSharding {
    createVirtualShardingFiles(ext = '', index = 0) {
        const bf = Buffer.from(this.content, this.encoding);
        const res = [];
        const threshold = this.limitBytes;
        let tmpBytes = 0;
        while(bf.byteLength > tmpBytes){
            res.push(bf.subarray(tmpBytes, tmpBytes + threshold));
            tmpBytes += threshold;
        }
        return res.map((e, i)=>({
                filename: `${i + index}${ext}`,
                content: e
            }));
    }
    async writeStringToFolder(folder, ext = '', index) {
        const dist = external_path_default().resolve(folder);
        await external_fs_extra_default().ensureDir(dist);
        const res = this.createVirtualShardingFiles(ext, index);
        await Promise.all(res.map((e)=>new Promise((resolve, reject)=>{
                const stream = external_fs_default().createWriteStream(external_path_default().join(dist, e.filename), this.encoding);
                stream.end(e.content);
                stream.once('close', ()=>resolve(void 0));
                stream.once('error', (err)=>reject(err));
            })));
        return res;
    }
    constructor(content, limitBytes = 10485760, encoding = 'utf-8'){
        _define_property(this, "content", void 0);
        _define_property(this, "limitBytes", void 0);
        _define_property(this, "encoding", void 0);
        this.content = content;
        this.limitBytes = limitBytes;
        this.encoding = encoding;
    }
}
exports.FileSharding = __webpack_exports__.FileSharding;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "FileSharding"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
