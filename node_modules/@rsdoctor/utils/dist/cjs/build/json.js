"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    stringify: ()=>stringify,
    readPackageJson: ()=>readPackageJson
});
const external_json_stream_stringify_namespaceObject = require("json-stream-stringify");
const external_path_namespaceObject = require("path");
const index_js_namespaceObject = require("../common/index.js");
const external_stream_namespaceObject = require("stream");
const maxFileSize = 419430400;
function stringify(json, replacer, space, cycle) {
    const jsonList = [];
    if (json && 'object' == typeof json) return new Promise((resolve, reject)=>{
        const stream = new external_json_stream_stringify_namespaceObject.JsonStreamStringify(json, replacer, space, cycle);
        let currentLength = 0;
        let currentContent = '';
        const batchProcessor = new external_stream_namespaceObject.Transform({
            readableObjectMode: true,
            transform (chunk, _encoding, callback) {
                const lines = chunk.toString().split('\\n');
                lines.forEach((line)=>{
                    if (currentLength + line.length > maxFileSize) {
                        jsonList.push(currentContent);
                        currentContent = '';
                        currentLength = 0;
                    }
                    if (line.length) {
                        currentContent += line;
                        currentLength += line.length;
                    }
                });
                callback();
            }
        });
        stream.pipe(batchProcessor).on('data', (line)=>{
            if (currentLength + line.length > maxFileSize) {
                jsonList.push(currentContent);
                currentContent = '';
                currentLength = 0;
            }
            if (line.length) {
                currentContent += line;
                currentLength += line.length;
            }
        }).on('end', ()=>{
            if (jsonList.length < 1) jsonList.push(currentContent);
            resolve(jsonList);
        }).on('error', (err)=>reject(err));
    });
    return Promise.resolve(JSON.stringify(json, replacer, space));
}
const readPackageJson = (file, readFile)=>{
    let result;
    let current = file;
    while('/' !== current && !result){
        const parent = (0, external_path_namespaceObject.dirname)(current);
        if (parent === current) break;
        current = parent;
        if (readFile) result = readFile((0, external_path_namespaceObject.join)(current, 'package.json'));
        if (readFile) {
            if (!(null == result ? void 0 : result.name)) result = void 0;
        } else result = index_js_namespaceObject.Package.getPackageMetaFromModulePath(file);
    }
    if (!result) return;
    if (readFile && (!result.name || !result.version)) return readPackageJson((0, external_path_namespaceObject.dirname)(current), readFile);
    return {
        ...result,
        root: current
    };
};
exports.readPackageJson = __webpack_exports__.readPackageJson;
exports.stringify = __webpack_exports__.stringify;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "readPackageJson",
    "stringify"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
