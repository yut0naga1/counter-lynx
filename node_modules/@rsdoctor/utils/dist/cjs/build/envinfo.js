"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getYarnVersion: ()=>getYarnVersion,
    getNpmVersion: ()=>getNpmVersion,
    getMemoryInfo: ()=>getMemoryInfo,
    getNodeVersion: ()=>getNodeVersion,
    getNpmPackageVersion: ()=>getNpmPackageVersion,
    getGlobalNpmPackageVersion: ()=>getGlobalNpmPackageVersion,
    getOSInfo: ()=>getOSInfo,
    getPnpmVersion: ()=>getPnpmVersion,
    getGitBranch: ()=>getGitBranch,
    getGitRepo: ()=>getGitRepo,
    getCPUInfo: ()=>getCPUInfo
});
const external_envinfo_namespaceObject = require("envinfo");
const external_child_process_namespaceObject = require("child_process");
const getCPUInfo = ()=>external_envinfo_namespaceObject.helpers.getCPUInfo().then((res)=>res[1]);
const getOSInfo = ()=>external_envinfo_namespaceObject.helpers.getOSInfo().then((res)=>res[1]);
const getMemoryInfo = ()=>external_envinfo_namespaceObject.helpers.getMemoryInfo().then((res)=>res[1]);
const getNodeVersion = ()=>external_envinfo_namespaceObject.helpers.getNodeInfo().then((res)=>res[1]);
const getYarnVersion = ()=>external_envinfo_namespaceObject.helpers.getYarnInfo().then((res)=>res[1]);
const getNpmVersion = ()=>external_envinfo_namespaceObject.helpers.getnpmInfo().then((res)=>res[1]);
const getPnpmVersion = ()=>external_envinfo_namespaceObject.helpers.getpnpmInfo().then((res)=>res[1]);
function getNpmPackageVersion(pkg) {
    const isArray = Array.isArray(pkg);
    return (0, external_envinfo_namespaceObject.run)({
        npmPackages: isArray ? pkg : [
            pkg
        ]
    }, {
        json: true,
        showNotFound: true
    }).then((res)=>{
        const { npmPackages = {} } = JSON.parse(res) || {};
        return isArray ? pkg.map((e)=>npmPackages[e] || 'Not Found') : npmPackages[pkg];
    });
}
function getGlobalNpmPackageVersion(pkg) {
    const isArray = Array.isArray(pkg);
    return (0, external_envinfo_namespaceObject.run)({
        npmGlobalPackages: isArray ? pkg : [
            pkg
        ]
    }, {
        json: true,
        showNotFound: true
    }).then((res)=>{
        const { npmGlobalPackages = {} } = JSON.parse(res) || {};
        return isArray ? pkg.map((e)=>npmGlobalPackages[e] || 'Not Found') : npmGlobalPackages[pkg];
    });
}
function getGitBranch() {
    return new Promise((resolve, reject)=>{
        (0, external_child_process_namespaceObject.exec)('git branch --show-current', (err, stdout)=>{
            if (err) (0, external_child_process_namespaceObject.exec)('git branch', (err, stdout)=>{
                if (err) reject(err);
                else resolve(stdout.split('\n').map((e)=>e.replace('* ', '')).join('').trim());
            });
            else resolve(stdout.trim());
        });
    });
}
function getGitRepo() {
    return new Promise((resolve, reject)=>{
        (0, external_child_process_namespaceObject.exec)('git config --get remote.origin.url', (err, stdout)=>{
            if (err) reject(err);
            else resolve(stdout.trim());
        });
    });
}
exports.getCPUInfo = __webpack_exports__.getCPUInfo;
exports.getGitBranch = __webpack_exports__.getGitBranch;
exports.getGitRepo = __webpack_exports__.getGitRepo;
exports.getGlobalNpmPackageVersion = __webpack_exports__.getGlobalNpmPackageVersion;
exports.getMemoryInfo = __webpack_exports__.getMemoryInfo;
exports.getNodeVersion = __webpack_exports__.getNodeVersion;
exports.getNpmPackageVersion = __webpack_exports__.getNpmPackageVersion;
exports.getNpmVersion = __webpack_exports__.getNpmVersion;
exports.getOSInfo = __webpack_exports__.getOSInfo;
exports.getPnpmVersion = __webpack_exports__.getPnpmVersion;
exports.getYarnVersion = __webpack_exports__.getYarnVersion;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getCPUInfo",
    "getGitBranch",
    "getGitRepo",
    "getGlobalNpmPackageVersion",
    "getMemoryInfo",
    "getNodeVersion",
    "getNpmPackageVersion",
    "getNpmVersion",
    "getOSInfo",
    "getPnpmVersion",
    "getYarnVersion"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
