"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getPluginData: ()=>getPluginData,
    getPluginHooks: ()=>getPluginHooks,
    getPluginSummary: ()=>getPluginSummary,
    getPluginTapNames: ()=>getPluginTapNames
});
function getPluginHooks(plugin) {
    return Object.keys(plugin);
}
function getPluginTapNames(plugin) {
    const hooks = getPluginHooks(plugin);
    const tapNames = new Set();
    hooks.forEach((hook)=>{
        plugin[hook].forEach((data)=>{
            tapNames.add(data.tapName);
        });
    });
    return [
        ...tapNames
    ];
}
function getPluginSummary(plugin) {
    return {
        hooks: getPluginHooks(plugin),
        tapNames: getPluginTapNames(plugin)
    };
}
function getPluginData(plugin, selectedHooks = [], selectedTapNames = []) {
    const hooks = getPluginHooks(plugin).filter((hook)=>{
        if (selectedHooks.length && -1 === selectedHooks.indexOf(hook)) return false;
        return true;
    });
    if (!hooks.length) return [];
    const tapNames = getPluginTapNames(plugin);
    return tapNames.reduce((total, tapName)=>{
        if (selectedTapNames.length && -1 === selectedTapNames.indexOf(tapName)) return total;
        hooks.forEach((hook)=>{
            const hookData = plugin[hook].filter((e)=>e.tapName === tapName);
            if (0 === hookData.length) return;
            total.push({
                tapName,
                hook,
                data: hookData.map((e)=>({
                        startAt: e.startAt,
                        endAt: e.endAt,
                        costs: e.costs,
                        type: e.type
                    }))
            });
        });
        return total;
    }, []);
}
exports.getPluginData = __webpack_exports__.getPluginData;
exports.getPluginHooks = __webpack_exports__.getPluginHooks;
exports.getPluginSummary = __webpack_exports__.getPluginSummary;
exports.getPluginTapNames = __webpack_exports__.getPluginTapNames;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getPluginData",
    "getPluginHooks",
    "getPluginSummary",
    "getPluginTapNames"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
