"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    isShardingData: ()=>isShardingData,
    fetchShardingData: ()=>fetchShardingData,
    fetchShardingFiles: ()=>fetchShardingFiles
});
const external_algorithm_js_namespaceObject = require("./algorithm.js");
const external_url_js_namespaceObject = require("./url.js");
function isShardingData(data) {
    if (Array.isArray(data) && data.length > 0) {
        if (data.every((e)=>(0, external_url_js_namespaceObject.isRemoteUrl)(e))) return true;
    }
    return false;
}
async function fetchShardingData(shardingFiles, fetchImplement) {
    const res = await Promise.all(shardingFiles.map((url)=>fetchImplement(url)));
    const strings = 0 === res.length ? [] : res.reduce((t, e)=>t + e);
    return 'object' == typeof strings ? strings : JSON.parse((0, external_algorithm_js_namespaceObject.decompressText)(strings));
}
async function fetchShardingFiles(data, fetchImplement, filterKeys) {
    const datas = await Promise.all(Object.keys(data).map(async (_key)=>{
        const key = _key;
        const val = data[key];
        if ((null == filterKeys ? void 0 : filterKeys.length) && filterKeys.indexOf(key) < 0) return {
            [key]: []
        };
        if (isShardingData(val)) return {
            [key]: await fetchShardingData(val, fetchImplement)
        };
        return {
            [key]: val
        };
    }));
    return datas.reduce((t, c)=>Object.assign(t, c));
}
exports.fetchShardingData = __webpack_exports__.fetchShardingData;
exports.fetchShardingFiles = __webpack_exports__.fetchShardingFiles;
exports.isShardingData = __webpack_exports__.isShardingData;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "fetchShardingData",
    "fetchShardingFiles",
    "isShardingData"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
