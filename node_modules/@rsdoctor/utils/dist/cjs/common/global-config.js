"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    writeMcpPort: ()=>writeMcpPort,
    getMcpConfigPath: ()=>getMcpConfigPath
});
const external_fs_namespaceObject = require("fs");
var external_fs_default = /*#__PURE__*/ __webpack_require__.n(external_fs_namespaceObject);
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const external_os_namespaceObject = require("os");
var external_os_default = /*#__PURE__*/ __webpack_require__.n(external_os_namespaceObject);
const external_logger_js_namespaceObject = require("../logger.js");
function writeMcpPort(port, builderName) {
    const homeDir = external_os_default().homedir();
    const rsdoctorDir = external_path_default().join(homeDir, '.cache/rsdoctor');
    const mcpPortFilePath = external_path_default().join(rsdoctorDir, 'mcp.json');
    if (!external_fs_default().existsSync(rsdoctorDir)) external_fs_default().mkdirSync(rsdoctorDir, {
        recursive: true
    });
    let mcpJson = {
        portList: {},
        port: 0
    };
    if (external_fs_default().existsSync(mcpPortFilePath)) try {
        mcpJson = JSON.parse(external_fs_default().readFileSync(mcpPortFilePath, 'utf8'));
    } catch (error) {
        external_logger_js_namespaceObject.logger.debug('Failed to parse mcp.json', error);
    }
    if (!mcpJson.portList) mcpJson.portList = {};
    mcpJson.portList[builderName || 'builder'] = port;
    mcpJson.port = port;
    external_fs_default().writeFileSync(mcpPortFilePath, JSON.stringify(mcpJson, null, 2), 'utf8');
}
function getMcpConfigPath() {
    const homeDir = external_os_default().homedir();
    const rsdoctorDir = external_path_default().join(homeDir, '.cache/rsdoctor');
    const mcpPortFilePath = external_path_default().join(rsdoctorDir, 'mcp.json');
    return mcpPortFilePath;
}
exports.getMcpConfigPath = __webpack_exports__.getMcpConfigPath;
exports.writeMcpPort = __webpack_exports__.writeMcpPort;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getMcpConfigPath",
    "writeMcpPort"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
