"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getModulesByChunks: ()=>getModulesByChunks,
    getModuleIdsByModulesIds: ()=>getModuleIdsByModulesIds,
    filterModulesAndDependenciesByPackageDeps: ()=>filterModulesAndDependenciesByPackageDeps,
    getModuleByDependency: ()=>getModuleByDependency,
    getModuleDetails: ()=>getModuleDetails,
    getModulesByAsset: ()=>getModulesByAsset,
    getModuleIdsByChunk: ()=>getModuleIdsByChunk,
    getModulesByChunk: ()=>getModulesByChunk
});
const external_chunk_js_namespaceObject = require("./chunk.js");
const external_dependency_js_namespaceObject = require("./dependency.js");
const external_logger_js_namespaceObject = require("../../logger.js");
const external_file_js_namespaceObject = require("../file.js");
function getModulesByAsset(asset, chunks, modules, filterModules, checkModules) {
    const ids = (0, external_chunk_js_namespaceObject.getChunkIdsByAsset)(asset);
    const cks = (0, external_chunk_js_namespaceObject.getChunksByChunkIds)(ids, chunks);
    const res = getModulesByChunks(asset.path, cks, modules, filterModules, checkModules);
    return res;
}
function getModuleIdsByChunk(chunk) {
    const { modules = [] } = chunk;
    return modules;
}
function getModuleIdsByModulesIds(moduleIds, modules) {
    return moduleIds.map((id)=>modules.find((m)=>m.id === id)).filter(Boolean);
}
function getModulesByChunk(chunk, modules, filterModules) {
    const ids = getModuleIdsByChunk(chunk);
    return ids.map((id)=>{
        const module = modules.find((e)=>e.id === id);
        if (filterModules && filterModules.length > 0) {
            if (!module) return null;
            const filtered = {};
            for (const key of filterModules)if (void 0 !== module[key]) filtered[key] = module[key];
            return filtered;
        }
        return module;
    }).filter(Boolean);
}
function getTypeChecker(assetPath) {
    if ((0, external_file_js_namespaceObject.isStyleExt)(assetPath)) return external_file_js_namespaceObject.isStyleExt;
    if ((0, external_file_js_namespaceObject.isJsExt)(assetPath)) return external_file_js_namespaceObject.isJsExt;
    return ()=>true;
}
function getModulesByChunks(assetPath, chunks, modules, filterModules, checkModules) {
    const res = [];
    const typeChecker = getTypeChecker(assetPath);
    try {
        chunks.forEach((chunk)=>{
            getModulesByChunk(chunk, modules, filterModules).forEach((md)=>{
                const name = md.path || '';
                if (!typeChecker(name)) return;
                if ((checkModules ? checkModules(md) : true) && !res.filter((_m)=>_m.id === md.id).length) res.push(md);
            });
        });
    } catch (error) {
        external_logger_js_namespaceObject.logger.debug(error);
    }
    return res;
}
function getModuleByDependency(dep, modules) {
    return modules.find((item)=>item.id === dep.module);
}
function filterModulesAndDependenciesByPackageDeps(deps, dependencies, modules) {
    const _dependencies = [];
    const _modules = [];
    for(let i = 0; i < deps.length; i++){
        const dep = (0, external_dependency_js_namespaceObject.getDependencyByPackageData)(deps[i], dependencies);
        if (dep) {
            _dependencies.push(dep);
            const module = getModuleByDependency(dep, modules);
            if (module) _modules.push(module);
        }
    }
    return {
        dependencies: _dependencies,
        modules: _modules
    };
}
function getModuleDetails(moduleId, modules, dependencies) {
    const module = modules.find((e)=>e.id === moduleId);
    return {
        module,
        dependencies: (0, external_dependency_js_namespaceObject.getDependenciesByModule)(module, dependencies)
    };
}
exports.filterModulesAndDependenciesByPackageDeps = __webpack_exports__.filterModulesAndDependenciesByPackageDeps;
exports.getModuleByDependency = __webpack_exports__.getModuleByDependency;
exports.getModuleDetails = __webpack_exports__.getModuleDetails;
exports.getModuleIdsByChunk = __webpack_exports__.getModuleIdsByChunk;
exports.getModuleIdsByModulesIds = __webpack_exports__.getModuleIdsByModulesIds;
exports.getModulesByAsset = __webpack_exports__.getModulesByAsset;
exports.getModulesByChunk = __webpack_exports__.getModulesByChunk;
exports.getModulesByChunks = __webpack_exports__.getModulesByChunks;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "filterModulesAndDependenciesByPackageDeps",
    "getModuleByDependency",
    "getModuleDetails",
    "getModuleIdsByChunk",
    "getModuleIdsByModulesIds",
    "getModulesByAsset",
    "getModulesByChunk",
    "getModulesByChunks"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
