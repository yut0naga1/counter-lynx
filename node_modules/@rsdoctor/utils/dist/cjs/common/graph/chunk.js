"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getChunkByChunkId: ()=>getChunkByChunkId,
    getChunkIdsByAsset: ()=>getChunkIdsByAsset,
    getChunksByAsset: ()=>getChunksByAsset,
    getChunksByChunkIds: ()=>getChunksByChunkIds,
    getChunksByModule: ()=>getChunksByModule,
    getChunksByModuleId: ()=>getChunksByModuleId
});
function getChunkIdsByAsset(asset) {
    if (asset.chunks) return asset.chunks;
    return [];
}
function getChunksByModule(module, chunks) {
    if (module.chunks.length) return getChunksByChunkIds(module.chunks, chunks);
    return [];
}
function getChunkByChunkId(chunkId, chunks) {
    return chunks.find((e)=>e.id === chunkId);
}
function getChunksByChunkIds(chunkIds, chunks, filters) {
    if (!chunkIds.length) return [];
    const result = chunkIds.map((id)=>chunks.find((e)=>e.id === id)).filter(Boolean).map((chunk)=>{
        if (filters && filters.length > 0) {
            const filtered = {};
            for (const key of filters)if (void 0 !== chunk[key]) filtered[key] = chunk[key];
            return filtered;
        }
        return chunk;
    });
    return result;
}
function getChunksByAsset(asset, chunks, filters) {
    return getChunksByChunkIds(getChunkIdsByAsset(asset), chunks, filters);
}
function getChunksByModuleId(id, modules, chunks) {
    const mod = modules.find((e)=>e.id === id);
    if (!mod) return [];
    return getChunksByModule(mod, chunks);
}
exports.getChunkByChunkId = __webpack_exports__.getChunkByChunkId;
exports.getChunkIdsByAsset = __webpack_exports__.getChunkIdsByAsset;
exports.getChunksByAsset = __webpack_exports__.getChunksByAsset;
exports.getChunksByChunkIds = __webpack_exports__.getChunksByChunkIds;
exports.getChunksByModule = __webpack_exports__.getChunksByModule;
exports.getChunksByModuleId = __webpack_exports__.getChunksByModuleId;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getChunkByChunkId",
    "getChunkIdsByAsset",
    "getChunksByAsset",
    "getChunksByChunkIds",
    "getChunksByModule",
    "getChunksByModuleId"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
