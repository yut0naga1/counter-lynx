"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    isResolveFailData: ()=>isResolveFailData,
    isResolveSuccessData: ()=>isResolveSuccessData,
    getResolverFileTree: ()=>getResolverFileTree,
    getResolverCosts: ()=>getResolverCosts,
    getResolverFileDetails: ()=>getResolverFileDetails
});
const external_algorithm_js_namespaceObject = require("./algorithm.js");
function isResolveSuccessData(data) {
    return Boolean(data.result);
}
function isResolveFailData(data) {
    return Boolean(data.error);
}
function getResolverCosts(resolver, resolvers) {
    const blocked = resolvers.filter((e)=>e !== resolver && e.pid === resolver.pid && e.startAt >= resolver.startAt && e.endAt <= resolver.endAt);
    let costs = resolver.endAt - resolver.startAt;
    if (blocked.length) {
        const intervals = blocked.map((e)=>[
                Math.max(e.startAt, resolver.startAt),
                Math.min(e.endAt, resolver.endAt)
            ]);
        (0, external_algorithm_js_namespaceObject.mergeIntervals)(intervals).forEach((e)=>{
            const sub = e[1] - e[0];
            costs -= sub;
        });
    }
    return costs;
}
function getResolverFileTree(resolver) {
    return resolver.map((e)=>({
            issuerPath: e.issuerPath
        }));
}
function getResolverFileDetails(filepath, resolvers, modules, moduleCodeMap) {
    const module = modules.find((item)=>item.path === filepath);
    const matchResolvers = resolvers.filter((e)=>e.issuerPath === filepath);
    const before = module && moduleCodeMap && moduleCodeMap[module.id] ? moduleCodeMap[module.id].source : '';
    const after = matchResolvers.reduce((t, c)=>{
        if (c.request && isResolveSuccessData(c)) return t.replace(new RegExp(`["']${c.request}["']`), `"${c.result}"`);
        return t;
    }, before);
    return {
        filepath,
        before,
        after,
        resolvers: matchResolvers.map((e)=>({
                ...e,
                costs: getResolverCosts(e, resolvers)
            }))
    };
}
exports.getResolverCosts = __webpack_exports__.getResolverCosts;
exports.getResolverFileDetails = __webpack_exports__.getResolverFileDetails;
exports.getResolverFileTree = __webpack_exports__.getResolverFileTree;
exports.isResolveFailData = __webpack_exports__.isResolveFailData;
exports.isResolveSuccessData = __webpack_exports__.isResolveSuccessData;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getResolverCosts",
    "getResolverFileDetails",
    "getResolverFileTree",
    "isResolveFailData",
    "isResolveSuccessData"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
