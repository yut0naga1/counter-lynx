"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    compressText: ()=>compressText,
    decompressText: ()=>decompressText,
    random: ()=>random,
    mergeIntervals: ()=>mergeIntervals
});
const external_zlib_namespaceObject = require("zlib");
const external_buffer_namespaceObject = require("buffer");
const external_logger_js_namespaceObject = require("../logger.js");
function mergeIntervals(intervals) {
    intervals.sort((a, b)=>a[0] - b[0]);
    let previous;
    let current;
    const result = [];
    for(let i = 0; i < intervals.length; i++){
        current = intervals[i];
        if (!previous || current[0] > previous[1]) {
            previous = current;
            result.push(current);
        } else previous[1] = Math.max(previous[1], current[1]);
    }
    return result;
}
function compressText(input) {
    try {
        return (0, external_zlib_namespaceObject.deflateSync)(input).toString('base64');
    } catch (e) {
        external_logger_js_namespaceObject.logger.debug(`compressText error: ${e}`);
        return '';
    }
}
function decompressText(input) {
    return (0, external_zlib_namespaceObject.inflateSync)(external_buffer_namespaceObject.Buffer.from(input, 'base64')).toString();
}
function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}
exports.compressText = __webpack_exports__.compressText;
exports.decompressText = __webpack_exports__.decompressText;
exports.mergeIntervals = __webpack_exports__.mergeIntervals;
exports.random = __webpack_exports__.random;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "compressText",
    "decompressText",
    "mergeIntervals",
    "random"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
