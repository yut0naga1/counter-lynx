"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getPackageRelationAlertDetails: ()=>getPackageRelationAlertDetails
});
const external_path_namespaceObject = require("path");
function getPackageRelationAlertDetails(modules, dependencies, root, packageDependencies, moduleCodeMap) {
    return packageDependencies.slice().reverse().map((dep)=>{
        const dependency = dependencies.find((item)=>item.id === dep.dependencyId);
        if (!dependency) return null;
        const module = modules.find((item)=>item.id === dependency.module);
        if (!module) return null;
        return {
            group: dep.group,
            module,
            dependency,
            relativePath: (0, external_path_namespaceObject.relative)(root, module.path),
            moduleCode: null == moduleCodeMap ? void 0 : moduleCodeMap[module.id]
        };
    }).filter(Boolean);
}
exports.getPackageRelationAlertDetails = __webpack_exports__.getPackageRelationAlertDetails;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getPackageRelationAlertDetails"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
