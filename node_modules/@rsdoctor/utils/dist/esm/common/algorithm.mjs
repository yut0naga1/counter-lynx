import { deflateSync, inflateSync } from "zlib";
import { Buffer } from "buffer";
import { logger } from "../logger.mjs";
function mergeIntervals(intervals) {
    intervals.sort((a, b)=>a[0] - b[0]);
    let previous;
    let current;
    const result = [];
    for(let i = 0; i < intervals.length; i++){
        current = intervals[i];
        if (!previous || current[0] > previous[1]) {
            previous = current;
            result.push(current);
        } else previous[1] = Math.max(previous[1], current[1]);
    }
    return result;
}
function compressText(input) {
    try {
        return deflateSync(input).toString('base64');
    } catch (e) {
        logger.debug(`compressText error: ${e}`);
        return '';
    }
}
function decompressText(input) {
    return inflateSync(Buffer.from(input, 'base64')).toString();
}
function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}
export { compressText, decompressText, mergeIntervals, random };
