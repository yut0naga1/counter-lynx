import { getChunkIdsByAsset, getChunksByChunkIds } from "./chunk.mjs";
import { getDependenciesByModule, getDependencyByPackageData } from "./dependency.mjs";
import { logger } from "../../logger.mjs";
import { isJsExt, isStyleExt } from "../file.mjs";
function getModulesByAsset(asset, chunks, modules, filterModules, checkModules) {
    const ids = getChunkIdsByAsset(asset);
    const cks = getChunksByChunkIds(ids, chunks);
    const res = getModulesByChunks(asset.path, cks, modules, filterModules, checkModules);
    return res;
}
function getModuleIdsByChunk(chunk) {
    const { modules = [] } = chunk;
    return modules;
}
function getModuleIdsByModulesIds(moduleIds, modules) {
    return moduleIds.map((id)=>modules.find((m)=>m.id === id)).filter(Boolean);
}
function getModulesByChunk(chunk, modules, filterModules) {
    const ids = getModuleIdsByChunk(chunk);
    return ids.map((id)=>{
        const module = modules.find((e)=>e.id === id);
        if (filterModules && filterModules.length > 0) {
            if (!module) return null;
            const filtered = {};
            for (const key of filterModules)if (void 0 !== module[key]) filtered[key] = module[key];
            return filtered;
        }
        return module;
    }).filter(Boolean);
}
function getTypeChecker(assetPath) {
    if (isStyleExt(assetPath)) return isStyleExt;
    if (isJsExt(assetPath)) return isJsExt;
    return ()=>true;
}
function getModulesByChunks(assetPath, chunks, modules, filterModules, checkModules) {
    const res = [];
    const typeChecker = getTypeChecker(assetPath);
    try {
        chunks.forEach((chunk)=>{
            getModulesByChunk(chunk, modules, filterModules).forEach((md)=>{
                const name = md.path || '';
                if (!typeChecker(name)) return;
                if ((checkModules ? checkModules(md) : true) && !res.filter((_m)=>_m.id === md.id).length) res.push(md);
            });
        });
    } catch (error) {
        logger.debug(error);
    }
    return res;
}
function getModuleByDependency(dep, modules) {
    return modules.find((item)=>item.id === dep.module);
}
function filterModulesAndDependenciesByPackageDeps(deps, dependencies, modules) {
    const _dependencies = [];
    const _modules = [];
    for(let i = 0; i < deps.length; i++){
        const dep = getDependencyByPackageData(deps[i], dependencies);
        if (dep) {
            _dependencies.push(dep);
            const module = getModuleByDependency(dep, modules);
            if (module) _modules.push(module);
        }
    }
    return {
        dependencies: _dependencies,
        modules: _modules
    };
}
function getModuleDetails(moduleId, modules, dependencies) {
    const module = modules.find((e)=>e.id === moduleId);
    return {
        module,
        dependencies: getDependenciesByModule(module, dependencies)
    };
}
export { filterModulesAndDependenciesByPackageDeps, getModuleByDependency, getModuleDetails, getModuleIdsByChunk, getModuleIdsByModulesIds, getModulesByAsset, getModulesByChunk, getModulesByChunks };
