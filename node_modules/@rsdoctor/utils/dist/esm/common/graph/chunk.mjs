function getChunkIdsByAsset(asset) {
    if (asset.chunks) return asset.chunks;
    return [];
}
function getChunksByModule(module, chunks) {
    if (module.chunks.length) return getChunksByChunkIds(module.chunks, chunks);
    return [];
}
function getChunkByChunkId(chunkId, chunks) {
    return chunks.find((e)=>e.id === chunkId);
}
function getChunksByChunkIds(chunkIds, chunks, filters) {
    if (!chunkIds.length) return [];
    const result = chunkIds.map((id)=>chunks.find((e)=>e.id === id)).filter(Boolean).map((chunk)=>{
        if (filters && filters.length > 0) {
            const filtered = {};
            for (const key of filters)if (void 0 !== chunk[key]) filtered[key] = chunk[key];
            return filtered;
        }
        return chunk;
    });
    return result;
}
function getChunksByAsset(asset, chunks, filters) {
    return getChunksByChunkIds(getChunkIdsByAsset(asset), chunks, filters);
}
function getChunksByModuleId(id, modules, chunks) {
    const mod = modules.find((e)=>e.id === id);
    if (!mod) return [];
    return getChunksByModule(mod, chunks);
}
export { getChunkByChunkId, getChunkIdsByAsset, getChunksByAsset, getChunksByChunkIds, getChunksByModule, getChunksByModuleId };
