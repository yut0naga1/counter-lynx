import { hrtime } from "process";
function toFixedDigits(num, digits = 2) {
    if (0 === digits) return Math.floor(num);
    return +num.toFixed(digits);
}
function getUnit(num, type) {
    let unit;
    unit = 'm' === type ? num > 1 ? 'mins' : 'min' : num > 1 ? 'hours' : 'hour';
    return unit;
}
function formatCosts(costs) {
    costs = Number(costs);
    if (costs >= 1000) {
        const sec = costs / 1000;
        if (sec >= 60) {
            let mins = sec / 60;
            if (mins >= 60) {
                const hours = toFixedDigits(mins / 60, 0);
                const restMins = toFixedDigits(mins % 60, 1);
                const hUnit = getUnit(hours, 'h');
                if (restMins > 0) return `${hours}${hUnit} ${restMins}${getUnit(restMins, 'm')}`;
                return `${hours}${hUnit}`;
            }
            mins = toFixedDigits(mins, 0);
            const mUnit = getUnit(mins, 'm');
            const restSec = toFixedDigits(sec % 60, 0);
            if (restSec > 0) return `${mins}${mUnit} ${restSec}s`;
            return `${mins}${mUnit}`;
        }
        return `${toFixedDigits(sec, 1)}s`;
    }
    if (costs >= 10) return `${+toFixedDigits(costs, 0)}ms`;
    if (costs >= 1) return `${+toFixedDigits(costs, 1)}ms`;
    let r = +toFixedDigits(costs, 2);
    if (0 === r) r = +toFixedDigits(costs, 3);
    return `${r}ms`;
}
function getCurrentTimestamp(start, startHRTime) {
    const endHRTime = hrtime(startHRTime);
    const end = start + 1000 * endHRTime[0] + (process.env.RSTEST ? Math.round(endHRTime[1] / 1000000) : endHRTime[1] / 1000000);
    return end;
}
export { formatCosts, getCurrentTimestamp, getUnit, toFixedDigits };
