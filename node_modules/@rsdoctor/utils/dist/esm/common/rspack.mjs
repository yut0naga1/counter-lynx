const RspackLoaderInternalPropertyName = '__l__';
var rspack_RspackSummaryCostsDataName = /*#__PURE__*/ function(RspackSummaryCostsDataName) {
    RspackSummaryCostsDataName["Bootstrap"] = "bootstrap->rspack:beforeCompile";
    RspackSummaryCostsDataName["Compile"] = "rspack:beforeCompile->afterCompile";
    RspackSummaryCostsDataName["Done"] = "rspack:afterCompile->done";
    RspackSummaryCostsDataName["Minify"] = "rspack:minify(rspack:optimizeChunkAssets)";
    return RspackSummaryCostsDataName;
}({});
function checkSourceMapSupport(configs) {
    var _configs__config, _configs_, _configs__config1, _configs__config2;
    if (!Array.isArray(configs) || !configs[0]) return {
        isRspack: false,
        hasSourceMap: false
    };
    const isRspack = 'rspack' === configs[0].name && (null == (_configs_ = configs[0]) ? void 0 : null == (_configs__config = _configs_.config) ? void 0 : _configs__config.name) !== 'lynx';
    const devtool = null == (_configs__config1 = configs[0].config) ? void 0 : _configs__config1.devtool;
    const plugins = null == (_configs__config2 = configs[0].config) ? void 0 : _configs__config2.plugins;
    const hasLynxSourcemapPlugin = null == plugins ? void 0 : plugins.filter((plugin)=>plugin && plugin.includes('SourceMapDevToolPlugin'));
    const hasSourceMap = 'string' == typeof devtool && devtool.includes('source-map') && !devtool.includes('eval') || !!(null == hasLynxSourcemapPlugin ? void 0 : hasLynxSourcemapPlugin.length);
    return {
        isRspack,
        hasSourceMap
    };
}
export { RspackLoaderInternalPropertyName, rspack_RspackSummaryCostsDataName as RspackSummaryCostsDataName, checkSourceMapSupport };
