import { compact, isEmpty, last } from "./lodash.mjs";
const PACKAGE_PREFIX = /(?:node_modules|~)(?:\/\.pnpm)?/;
const PACKAGE_SLUG = /[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*/;
const VERSION = /@[\w|\-|_|.]+/;
const VERSION_NUMBER = '@([\\d.]+)';
const MODULE_PATH_PACKAGES = new RegExp([
    `(?:${PACKAGE_PREFIX.source}/)`,
    '(?:',
    `(?:@${PACKAGE_SLUG.source}[/|+])?`,
    `(?:${PACKAGE_SLUG.source}\\+)*`,
    `(?:${PACKAGE_SLUG.source})`,
    `(?:${VERSION.source})?`,
    ')',
    '(?:_',
    `(?:@${PACKAGE_SLUG.source}[/|+])?`,
    `(?:${PACKAGE_SLUG.source})`,
    `(?:@${PACKAGE_SLUG.source})?`,
    ')*',
    '/'
].join(''), 'g');
const PACKAGE_PATH_NAME = /(?:(?:node_modules|~)(?:\/\.pnpm)?\/)(?:((?:@[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*[/|+])?(?:(?:[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*\+)*)(?:[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*))(?:@[\w|\-|_|.]+)?)(?:_((?:@[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*[/|+])?(?:[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*))(?:@[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*))*\//gm;
const uniqLast = (data)=>{
    const res = [];
    data.forEach((item, index)=>{
        if (!data.slice(index + 1).includes(item)) res.push(item);
    });
    return res;
};
const getPackageMetaFromModulePath = (modulePath)=>{
    var _path_match_flat_slice, _path_match;
    const paths = modulePath.match(MODULE_PATH_PACKAGES);
    if (!paths) return {
        name: '',
        version: ''
    };
    const names = uniqLast(paths.flatMap((packagePath)=>{
        const found = packagePath.matchAll(PACKAGE_PATH_NAME);
        if (!found) return [];
        const paksArray = compact([
            ...found
        ].flat());
        return paksArray.slice(1).filter(Boolean).map((name)=>name.replace(/\+/g, '/'));
    }));
    if (isEmpty(names)) return {
        name: '',
        version: ''
    };
    const name = last(names);
    const pattern = new RegExp(`(.*)(${last(paths)}).*`);
    const path = modulePath.replace(pattern, '$1$2').replace(/\/$/, '');
    return {
        name,
        version: path && name ? (null == (_path_match = path.match(new RegExp(`${name}${VERSION_NUMBER}`))) ? void 0 : null == (_path_match_flat_slice = _path_match.flat().slice(1)) ? void 0 : _path_match_flat_slice[0]) || '' : ''
    };
};
export { MODULE_PATH_PACKAGES, PACKAGE_PATH_NAME, getPackageMetaFromModulePath };
