import { decompressText } from "./algorithm.mjs";
import { isRemoteUrl } from "./url.mjs";
function isShardingData(data) {
    if (Array.isArray(data) && data.length > 0) {
        if (data.every((e)=>isRemoteUrl(e))) return true;
    }
    return false;
}
async function fetchShardingData(shardingFiles, fetchImplement) {
    const res = await Promise.all(shardingFiles.map((url)=>fetchImplement(url)));
    const strings = 0 === res.length ? [] : res.reduce((t, e)=>t + e);
    return 'object' == typeof strings ? strings : JSON.parse(decompressText(strings));
}
async function fetchShardingFiles(data, fetchImplement, filterKeys) {
    const datas = await Promise.all(Object.keys(data).map(async (_key)=>{
        const key = _key;
        const val = data[key];
        if ((null == filterKeys ? void 0 : filterKeys.length) && filterKeys.indexOf(key) < 0) return {
            [key]: []
        };
        if (isShardingData(val)) return {
            [key]: await fetchShardingData(val, fetchImplement)
        };
        return {
            [key]: val
        };
    }));
    return datas.reduce((t, c)=>Object.assign(t, c));
}
export { fetchShardingData, fetchShardingFiles, isShardingData };
