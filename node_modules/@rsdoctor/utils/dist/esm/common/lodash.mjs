function isUndefined(value) {
    return void 0 === value;
}
function isNumber(value) {
    return 'number' == typeof value && !Number.isNaN(value);
}
function isObject(value) {
    return 'object' == typeof value && null !== value;
}
function isEmpty(value) {
    return null == value || Array.isArray(value) && 0 === value.length || 'object' == typeof value && 0 === Object.keys(value).length;
}
function last(array) {
    return array[array.length - 1];
}
function compact(array) {
    return array.filter((item)=>null != item || !item);
}
function isNil(value) {
    return null == value;
}
const isPlainObject = (obj)=>null !== obj && 'object' == typeof obj && Object.getPrototypeOf(obj) === Object.prototype;
const isString = (v)=>'string' == typeof v || !!v && 'object' == typeof v && !Array.isArray(v) && '[object String]' === ({}).toString.call(v);
function pick(obj, keys) {
    const result = {};
    for(let i = 0; i < keys.length; i++){
        const key = keys[i];
        if (Object.hasOwn(obj, key)) result[key] = obj[key];
    }
    return result;
}
export { compact, isEmpty, isNil, isNumber, isObject, isPlainObject, isString, isUndefined, last, pick };
