function getPluginHooks(plugin) {
    return Object.keys(plugin);
}
function getPluginTapNames(plugin) {
    const hooks = getPluginHooks(plugin);
    const tapNames = new Set();
    hooks.forEach((hook)=>{
        plugin[hook].forEach((data)=>{
            tapNames.add(data.tapName);
        });
    });
    return [
        ...tapNames
    ];
}
function getPluginSummary(plugin) {
    return {
        hooks: getPluginHooks(plugin),
        tapNames: getPluginTapNames(plugin)
    };
}
function getPluginData(plugin, selectedHooks = [], selectedTapNames = []) {
    const hooks = getPluginHooks(plugin).filter((hook)=>{
        if (selectedHooks.length && -1 === selectedHooks.indexOf(hook)) return false;
        return true;
    });
    if (!hooks.length) return [];
    const tapNames = getPluginTapNames(plugin);
    return tapNames.reduce((total, tapName)=>{
        if (selectedTapNames.length && -1 === selectedTapNames.indexOf(tapName)) return total;
        hooks.forEach((hook)=>{
            const hookData = plugin[hook].filter((e)=>e.tapName === tapName);
            if (0 === hookData.length) return;
            total.push({
                tapName,
                hook,
                data: hookData.map((e)=>({
                        startAt: e.startAt,
                        endAt: e.endAt,
                        costs: e.costs,
                        type: e.type
                    }))
            });
        });
        return total;
    }, []);
}
export { getPluginData, getPluginHooks, getPluginSummary, getPluginTapNames };
