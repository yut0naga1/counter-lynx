import { JsonStreamStringify } from "json-stream-stringify";
import { dirname, join } from "path";
import { Package } from "../common/index.mjs";
import { Transform } from "stream";
const maxFileSize = 419430400;
function stringify(json, replacer, space, cycle) {
    const jsonList = [];
    if (json && 'object' == typeof json) return new Promise((resolve, reject)=>{
        const stream = new JsonStreamStringify(json, replacer, space, cycle);
        let currentLength = 0;
        let currentContent = '';
        const batchProcessor = new Transform({
            readableObjectMode: true,
            transform (chunk, _encoding, callback) {
                const lines = chunk.toString().split('\\n');
                lines.forEach((line)=>{
                    if (currentLength + line.length > maxFileSize) {
                        jsonList.push(currentContent);
                        currentContent = '';
                        currentLength = 0;
                    }
                    if (line.length) {
                        currentContent += line;
                        currentLength += line.length;
                    }
                });
                callback();
            }
        });
        stream.pipe(batchProcessor).on('data', (line)=>{
            if (currentLength + line.length > maxFileSize) {
                jsonList.push(currentContent);
                currentContent = '';
                currentLength = 0;
            }
            if (line.length) {
                currentContent += line;
                currentLength += line.length;
            }
        }).on('end', ()=>{
            if (jsonList.length < 1) jsonList.push(currentContent);
            resolve(jsonList);
        }).on('error', (err)=>reject(err));
    });
    return Promise.resolve(JSON.stringify(json, replacer, space));
}
const readPackageJson = (file, readFile)=>{
    let result;
    let current = file;
    while('/' !== current && !result){
        const parent = dirname(current);
        if (parent === current) break;
        current = parent;
        if (readFile) result = readFile(join(current, 'package.json'));
        if (readFile) {
            if (!(null == result ? void 0 : result.name)) result = void 0;
        } else result = Package.getPackageMetaFromModulePath(file);
    }
    if (!result) return;
    if (readFile && (!result.name || !result.version)) return readPackageJson(dirname(current), readFile);
    return {
        ...result,
        root: current
    };
};
export { readPackageJson, stringify };
