import { LinesAndColumns } from "lines-and-columns";
import { isNumber, isUndefined } from "../../common/lodash.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class Document {
    createFinder() {
        const find = new LinesAndColumns(this._text);
        this.positionAt = (offset)=>{
            if (offset >= this._text.length) offset = this._text.length - 1;
            if (offset < 0) offset = 0;
            const result = find.locationForIndex(offset);
            if (!result) return;
            return {
                line: result.line + 1,
                column: result.column
            };
        };
        this.offsetAt = (position)=>find.indexForLocation({
                line: position.line - 1,
                column: position.column
            }) ?? void 0;
    }
    getText(range) {
        if (!range) return this._text;
        const start = 'number' == typeof range.start ? range.start : this.offsetAt(range.start);
        const end = 'number' == typeof range.end ? range.end : this.offsetAt(range.end);
        if (isUndefined(start)) throw new Error(`Location ${JSON.stringify(start)} is illegal`);
        if (isUndefined(end)) throw new Error(`Location ${JSON.stringify(end)} is illegal`);
        return this._text.slice(start, end);
    }
    edit(data) {
        let { _text: content } = this;
        const startOffset = isNumber(data.start) ? data.start : this.offsetAt(data.start);
        const endOffset = isNumber(data.end) ? data.end : this.offsetAt(data.end);
        if (isUndefined(startOffset) || isUndefined(endOffset)) return;
        const startTxt = content.substring(0, startOffset);
        const endTxt = content.substring(endOffset, content.length);
        content = startTxt + data.newText + endTxt;
        return content;
    }
    constructor(content){
        _define_property(this, "_text", '');
        _define_property(this, "positionAt", void 0);
        _define_property(this, "offsetAt", void 0);
        this._text;
        this._text = content;
        this.createFinder();
    }
}
export { Document };
