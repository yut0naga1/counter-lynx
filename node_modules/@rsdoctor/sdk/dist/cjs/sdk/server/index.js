"use strict";
var __webpack_modules__ = {
    "@/sdk/utils/openBrowser": function(module) {
        module.exports = require("../utils/openBrowser.js");
    },
    "./apis": function(module) {
        module.exports = require("./apis/index.js");
    },
    "./router": function(module) {
        module.exports = require("./router.js");
    },
    "./socket": function(module) {
        module.exports = require("./socket/index.js");
    },
    "./utils": function(module) {
        module.exports = require("./utils.js");
    },
    "@rsdoctor/types": function(module) {
        module.exports = require("@rsdoctor/types");
    },
    "@rsdoctor/utils/build": function(module) {
        module.exports = require("@rsdoctor/utils/build");
    },
    "@rsdoctor/utils/common": function(module) {
        module.exports = require("@rsdoctor/utils/common");
    },
    "@rsdoctor/utils/logger": function(module) {
        module.exports = require("@rsdoctor/utils/logger");
    },
    assert: function(module) {
        module.exports = require("assert");
    },
    "body-parser": function(module) {
        module.exports = require("body-parser");
    },
    cors: function(module) {
        module.exports = require("cors");
    },
    path: function(module) {
        module.exports = require("path");
    },
    sirv: function(module) {
        module.exports = require("sirv");
    },
    stream: function(module) {
        module.exports = require("stream");
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    return module.exports;
}
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
(()=>{
    __webpack_require__.r(__webpack_exports__);
    __webpack_require__.d(__webpack_exports__, {
        RsdoctorServer: ()=>RsdoctorServer
    });
    var _rsdoctor_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("@rsdoctor/types");
    var _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("@rsdoctor/utils/build");
    var sirv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("sirv");
    var sirv__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(sirv__WEBPACK_IMPORTED_MODULE_2__);
    var _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("@rsdoctor/utils/common");
    var assert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("assert");
    var assert__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_4__);
    var body_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("body-parser");
    var body_parser__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(body_parser__WEBPACK_IMPORTED_MODULE_5__);
    var cors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("cors");
    var cors__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(cors__WEBPACK_IMPORTED_MODULE_6__);
    var stream__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("stream");
    var _socket__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./socket");
    var _router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./router");
    var _apis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./apis");
    var _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("@rsdoctor/utils/logger");
    var _sdk_utils_openBrowser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("@/sdk/utils/openBrowser");
    var path__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("path");
    var path__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/ __webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_13__);
    var _utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./utils");
    var __WEBPACK_REEXPORT_OBJECT__ = {};
    for(var __WEBPACK_IMPORT_KEY__ in _utils__WEBPACK_IMPORTED_MODULE_14__)if ([
        "RsdoctorServer",
        "default"
    ].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = (function(key) {
        return _utils__WEBPACK_IMPORTED_MODULE_14__[key];
    }).bind(0, __WEBPACK_IMPORT_KEY__);
    __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
    class RsdoctorServer {
        get app() {
            return this._server.app;
        }
        get host() {
            const host = (0, _utils__WEBPACK_IMPORTED_MODULE_14__.getLocalIpAddress)();
            return host;
        }
        get origin() {
            return `http://${this.host}:${this.port}`;
        }
        get socketUrl() {
            return {
                port: this.port,
                socketUrl: `ws://localhost:${this.port}`
            };
        }
        get innerClientPath() {
            return this._innerClientPath;
        }
        async bootstrap() {
            if (!this.disposed) return;
            const port = _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_1__.Server.getPortSync(this.port);
            this.port = port;
            this._server = await _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_1__.Server.createServer(port);
            this._socket = new _socket__WEBPACK_IMPORTED_MODULE_8__.Socket({
                sdk: this.sdk,
                server: this._server.server,
                port: this.port
            });
            await this._socket.bootstrap();
            _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_3__.GlobalConfig.writeMcpPort(this.port, this.sdk.name);
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_11__.logger.debug(`Successfully wrote mcp.json for ${_rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_11__.chalk.cyan(this.sdk.name)} builder`);
            this.disposed = false;
            this.app.use(cors__WEBPACK_IMPORTED_MODULE_6___default()());
            this.app.use(body_parser__WEBPACK_IMPORTED_MODULE_5___default().json({
                limit: '500mb'
            }));
            const clientHtmlPath = this._innerClientPath ? this._innerClientPath : require.resolve('@rsdoctor/client');
            const clientDistPath = path__WEBPACK_IMPORTED_MODULE_13___default().resolve(clientHtmlPath, '..');
            this.app.use(sirv__WEBPACK_IMPORTED_MODULE_2___default()(clientDistPath, {
                dev: true
            }));
            await this._router.setup();
            process.once('exit', this.dispose);
            process.once('SIGINT', this.dispose);
            process.once('SIGTERM', this.dispose);
            process.once('unhandledRejection', this.dispose);
            process.once('uncaughtException', this.dispose);
        }
        wrapNextHandleFunction(method, cb) {
            return async (req, res, next)=>{
                var _req_method;
                const m = null == (_req_method = req.method) ? void 0 : _req_method.toUpperCase();
                if (m === method) {
                    try {
                        const body = await cb(req, res, next);
                        res.setHeader('Access-Control-Allow-Origin', '*');
                        res.setHeader('Access-Control-Allow-Credentials', 'true');
                        res.statusCode = 200;
                        if (Buffer.isBuffer(body)) {
                            res.setHeader('Content-Length', body.byteLength);
                            const ps = new stream__WEBPACK_IMPORTED_MODULE_7__.PassThrough();
                            ps.write(body);
                            ps.end();
                            ps.pipe(res);
                        } else if (body && 'object' == typeof body) {
                            res.writeHead(200, {
                                'Content-Type': 'application/json;utf-8'
                            });
                            res.write(JSON.stringify(body));
                            res.end();
                        } else res.writeHead(200).end(body);
                    } catch (error) {
                        res.statusCode = 500;
                        res.end(error.message);
                        return next(error);
                    }
                    return;
                }
                await next();
            };
        }
        proxy(api, method, cb) {
            let idx = this.app.stack.findIndex((e)=>e.route === api);
            if (-1 === idx) idx = this.app.stack.length - 1;
            this.app.stack.splice(idx, 0, {
                route: api,
                handle: this.wrapNextHandleFunction(method, cb)
            });
        }
        getClientUrl(route = 'homepage', ...args) {
            const relativeUrl = _rsdoctor_types__WEBPACK_IMPORTED_MODULE_0__.SDK.ServerAPI.API.EntryHtml;
            switch(route){
                case _rsdoctor_types__WEBPACK_IMPORTED_MODULE_0__.Client.RsdoctorClientRoutes.BundleDiff:
                    {
                        const [baseline, current] = args;
                        const qs = _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_3__.Bundle.getBundleDiffPageQueryString([
                            baseline,
                            current
                        ]);
                        return `${relativeUrl}${qs}#${_rsdoctor_types__WEBPACK_IMPORTED_MODULE_0__.Client.RsdoctorClientRoutes.BundleDiff}`;
                    }
                default:
                    return relativeUrl;
            }
        }
        async openClientPage(...args) {
            const relativeUrl = this.getClientUrl(...args);
            const needEncodeURI = arguments[0] === _rsdoctor_types__WEBPACK_IMPORTED_MODULE_0__.Client.RsdoctorClientRoutes.BundleDiff;
            const url = `http://${this.host}:${this.port}${relativeUrl}`;
            const localhostUrl = `http://localhost:${this.port}${relativeUrl}`;
            await (0, _sdk_utils_openBrowser__WEBPACK_IMPORTED_MODULE_12__.openBrowser)(localhostUrl, !needEncodeURI);
            if (this._printServerUrl) _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_11__.logger.info(`${_rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_11__.chalk.green(`${this.sdk.name} compiler's`)} analyzer running on: ${_rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_11__.chalk.cyan(url)}`);
        }
        sendAPIDataToClient(api, msg) {
            var _this__socket;
            null == (_this__socket = this._socket) || _this__socket.sendAPIData(api, msg);
        }
        async broadcast() {
            var _this__socket;
            await (null == (_this__socket = this._socket) ? void 0 : _this__socket.broadcast());
        }
        constructor(sdk, port = _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_1__.Server.defaultPort, config){
            this.sdk = sdk;
            this.disposed = true;
            this.get = (route, cb)=>{
                const { app } = this;
                app.use(route, this.wrapNextHandleFunction('GET', cb));
                return app;
            };
            this.post = (route, cb)=>{
                const { app } = this;
                app.use(route, this.wrapNextHandleFunction('POST', cb));
                return app;
            };
            this.dispose = async ()=>{
                if (this.disposed) return;
                this.disposed = true;
                if (this._server) await this._server.close();
                if (this._socket) this._socket.dispose();
            };
            assert__WEBPACK_IMPORTED_MODULE_4___default()('number' == typeof port);
            this.port = port;
            this._router = new _router__WEBPACK_IMPORTED_MODULE_9__.Router({
                sdk,
                server: this,
                apis: Object.values(_apis__WEBPACK_IMPORTED_MODULE_10__)
            });
            this._innerClientPath = (null == config ? void 0 : config.innerClientPath) || '';
            this._printServerUrl = _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_3__.Lodash.isUndefined(null == config ? void 0 : config.printServerUrl) ? true : null == config ? void 0 : config.printServerUrl;
        }
    }
})();
exports.RsdoctorServer = __webpack_exports__.RsdoctorServer;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "RsdoctorServer"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
