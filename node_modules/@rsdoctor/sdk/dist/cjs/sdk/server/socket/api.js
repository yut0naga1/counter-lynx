"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    SocketAPILoader: ()=>SocketAPILoader
});
const common_namespaceObject = require("@rsdoctor/utils/common");
class SocketAPILoader {
    async loadManifest() {
        return this.options.sdk.getManifestData();
    }
    async loadData(key) {
        const data = this.options.sdk.getStoreData();
        const sep = '.';
        let res = data[key];
        if (key.includes(sep)) res = key.split(sep).reduce((t, k)=>t[k], data);
        return res;
    }
    get loadAPIData() {
        return this.dataLoader.loadAPI;
    }
    constructor(options){
        this.options = options;
        this.dataLoader = new common_namespaceObject.Data.APIDataLoader(this);
    }
}
exports.SocketAPILoader = __webpack_exports__.SocketAPILoader;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "SocketAPILoader"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
