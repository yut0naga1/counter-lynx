"use strict";
var __webpack_modules__ = {
    open: function(module) {
        module.exports = import("open").then(function(module) {
            return module;
        });
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    return module.exports;
}
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
(()=>{
    __webpack_require__.r(__webpack_exports__);
    __webpack_require__.d(__webpack_exports__, {
        openBrowser: ()=>openBrowser
    });
    const external_node_child_process_namespaceObject = require("node:child_process");
    const external_node_util_namespaceObject = require("node:util");
    const logger_namespaceObject = require("@rsdoctor/utils/logger");
    const external_node_path_namespaceObject = require("node:path");
    const execAsync = (0, external_node_util_namespaceObject.promisify)(external_node_child_process_namespaceObject.exec);
    const supportedChromiumBrowsers = [
        'Google Chrome Canary',
        'Google Chrome Dev',
        'Google Chrome Beta',
        'Google Chrome',
        'Microsoft Edge',
        'Brave Browser',
        'Vivaldi',
        'Chromium'
    ];
    const getTargetBrowser = async ()=>{
        let targetBrowser = process.env.BROWSER;
        if (!targetBrowser || !supportedChromiumBrowsers.includes(targetBrowser)) {
            const { stdout: ps } = await execAsync('ps cax');
            targetBrowser = supportedChromiumBrowsers.find((b)=>ps.includes(b));
        }
        return targetBrowser;
    };
    async function openBrowser(url, needEncodeURI = true) {
        const shouldTryOpenChromeWithAppleScript = 'darwin' === process.platform;
        if (shouldTryOpenChromeWithAppleScript) try {
            const targetBrowser = await getTargetBrowser();
            if (targetBrowser) {
                await execAsync(`osascript openChrome.applescript "${needEncodeURI ? encodeURI(url) : url}" "${targetBrowser}"`, {
                    cwd: (0, external_node_path_namespaceObject.join)(__dirname, '../../../../static')
                });
                return true;
            }
            logger_namespaceObject.logger.debug('Failed to find the target browser.');
        } catch (err) {
            logger_namespaceObject.logger.debug("Failed to open Rsdoctor URL with apple script.");
            logger_namespaceObject.logger.debug(err);
            return false;
        }
        else try {
            const { default: open } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "open"));
            await open(url);
            return true;
        } catch (err) {
            logger_namespaceObject.logger.error('Failed to open Rsdoctor URL.');
            logger_namespaceObject.logger.error(err);
            return false;
        }
    }
})();
exports.openBrowser = __webpack_exports__.openBrowser;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "openBrowser"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
