"use strict";
var __webpack_modules__ = {
    "../server/fakeServer": function(module) {
        module.exports = require("../server/fakeServer.js");
    },
    "../server": function(module) {
        module.exports = require("../server/index.js");
    },
    "../utils/base": function(module) {
        module.exports = require("../utils/base.js");
    },
    "../utils": function(module) {
        module.exports = require("../utils/index.js");
    },
    "@/sdk/utils/openBrowser": function(module) {
        module.exports = require("../utils/openBrowser.js");
    },
    "./core": function(module) {
        module.exports = require("./core.js");
    },
    "@rsdoctor/graph": function(module) {
        module.exports = require("@rsdoctor/graph");
    },
    "@rsdoctor/types": function(module) {
        module.exports = require("@rsdoctor/types");
    },
    "@rsdoctor/utils/build": function(module) {
        module.exports = require("@rsdoctor/utils/build");
    },
    "@rsdoctor/utils/common": function(module) {
        module.exports = require("@rsdoctor/utils/common");
    },
    "@rsdoctor/utils/error": function(module) {
        module.exports = require("@rsdoctor/utils/error");
    },
    "@rsdoctor/utils/logger": function(module) {
        module.exports = require("@rsdoctor/utils/logger");
    },
    "fs-extra": function(module) {
        module.exports = require("fs-extra");
    },
    "json-cycle": function(module) {
        module.exports = require("json-cycle");
    },
    path: function(module) {
        module.exports = require("path");
    },
    "source-map": function(module) {
        module.exports = require("source-map");
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    return module.exports;
}
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
(()=>{
    __webpack_require__.r(__webpack_exports__);
    __webpack_require__.d(__webpack_exports__, {
        RsdoctorSDK: ()=>RsdoctorSDK
    });
    var fs_extra__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("fs-extra");
    var fs_extra__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(fs_extra__WEBPACK_IMPORTED_MODULE_0__);
    var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("path");
    var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
    var _rsdoctor_utils_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("@rsdoctor/utils/error");
    var _rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("@rsdoctor/types");
    var _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("@rsdoctor/utils/build");
    var source_map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("source-map");
    var _rsdoctor_graph__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("@rsdoctor/graph");
    var _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("@rsdoctor/utils/logger");
    var _server__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../server");
    var _server_fakeServer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../server/fakeServer");
    var _core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./core");
    var _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("@rsdoctor/utils/common");
    var _utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../utils");
    var _utils_openBrowser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("@/sdk/utils/openBrowser");
    var __WEBPACK_REEXPORT_OBJECT__ = {};
    for(var __WEBPACK_IMPORT_KEY__ in _utils_openBrowser__WEBPACK_IMPORTED_MODULE_13__)if ([
        "default",
        "RsdoctorSDK"
    ].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = (function(key) {
        return _utils_openBrowser__WEBPACK_IMPORTED_MODULE_13__[key];
    }).bind(0, __WEBPACK_IMPORT_KEY__);
    __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
    var _utils_base__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../utils/base");
    var __WEBPACK_REEXPORT_OBJECT__ = {};
    for(var __WEBPACK_IMPORT_KEY__ in _utils_base__WEBPACK_IMPORTED_MODULE_14__)if ([
        "default",
        "RsdoctorSDK"
    ].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = (function(key) {
        return _utils_base__WEBPACK_IMPORTED_MODULE_14__[key];
    }).bind(0, __WEBPACK_IMPORT_KEY__);
    __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
    const jc = __webpack_require__("json-cycle");
    class RsdoctorSDK extends _core__WEBPACK_IMPORTED_MODULE_10__.SDKCore {
        async bootstrap() {
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`${Date.now()}`, '[RsdoctorSDK][bootstrap start]');
            this.server && await this.server.bootstrap();
            await super.bootstrap();
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`${Date.now()} ${this.server.origin}`, '[RsdoctorSDK][bootstrap end]');
        }
        async dispose() {
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`${Date.now()}`, '[RsdoctorSDK][dispose start]');
            this.server && await this.server.dispose();
            await super.dispose();
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`${Date.now()}`, '[RsdoctorSDK][dispose end]');
        }
        async applyErrorFix(id) {
            const { _errors: errors } = this;
            const error = errors.find((err)=>err.id === id);
            if (!error || !error.path || !error.fixData || error.fixData.isFixed) return;
            const { path: filePath, fixData } = error;
            const sameFileErrors = errors.filter((item)=>item.path === filePath && item !== error);
            let content = (await _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_4__.File.fse.readFile(filePath, 'utf-8')).toString();
            const startTxt = content.substring(0, fixData.start);
            const endTxt = content.substring(fixData.end, content.length);
            const offset = (fixData.newText ?? '').length - (fixData.end - fixData.start);
            content = startTxt + fixData.newText + endTxt;
            for (const other of sameFileErrors){
                const { fixData: otherFixData } = other;
                if (otherFixData) {
                    if (otherFixData.start >= fixData.end) {
                        otherFixData.start += offset;
                        otherFixData.end += offset;
                    }
                }
            }
            await _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_4__.File.fse.writeFile(filePath, content);
        }
        clear() {
            this._errors = [];
            this._loader = [];
            this._resolver = [];
            this._plugin = {};
            this._moduleGraph = new _rsdoctor_graph__WEBPACK_IMPORTED_MODULE_6__.ModuleGraph();
            this._chunkGraph = new _rsdoctor_graph__WEBPACK_IMPORTED_MODULE_6__.ChunkGraph();
        }
        clearSourceMapCache() {
            this._rawSourceMapCache = new Map();
            this._sourceMap = new Map();
        }
        async getSourceMap(file) {
            var _rawData_sourcesContent;
            const { _sourceMap: sourceMap, _rawSourceMapCache: rawMap } = this;
            if (sourceMap.has(file)) return sourceMap.get(file);
            const rawData = rawMap.get(file);
            if (!rawData || rawData.version < 0 || !(null == (_rawData_sourcesContent = rawData.sourcesContent) ? void 0 : _rawData_sourcesContent[0]) || !rawData.mappings) return Promise.resolve(void 0);
            try {
                const result = await new source_map__WEBPACK_IMPORTED_MODULE_5__.SourceMapConsumer(rawData);
                sourceMap.set(file, result);
                return result;
            } catch (e) {
                return Promise.resolve(void 0);
            }
        }
        reportSourceMap(data) {
            this._rawSourceMapCache.set(data.file, data);
        }
        reportConfiguration(config) {
            config.root ??= this._root;
            this._configs.push(config);
            this.onDataReport();
        }
        reportError(errors) {
            errors.forEach((item)=>{
                this._errors.push(_rsdoctor_utils_error__WEBPACK_IMPORTED_MODULE_2__.DevToolError.from(item, {
                    code: this.name
                }));
            });
            this.onDataReport();
        }
        reportLoader(data) {
            data.forEach((item)=>{
                var _this_extraConfig;
                if ((null == (_this_extraConfig = this.extraConfig) ? void 0 : _this_extraConfig.mode) === _rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.SDK.IMode[_rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.SDK.IMode.brief]) item.loaders.forEach((_loader)=>{
                    _loader.input = '';
                    _loader.result = '';
                });
                let match = this._loader.find((e)=>e.resource.path === item.resource.path);
                if (match) match.loaders.push(...item.loaders);
                else {
                    match = item;
                    this._loader.push(item);
                }
                match.loaders.sort((a, b)=>{
                    if (a.startAt !== b.startAt) return a.startAt - b.startAt;
                    if (a.isPitch) {
                        if (b.isPitch) return a.loaderIndex - b.loaderIndex;
                        return -1;
                    }
                    if (b.isPitch) return 1;
                    return b.loaderIndex - a.loaderIndex;
                });
            });
            this.onDataReport();
        }
        reportLoaderStartOrEnd(data) {
            const _builtinLoader = data.loaders[0];
            if (_builtinLoader.startAt) this._loaderStart.push(data);
            else if (_builtinLoader.endAt) {
                const matchLoaderStart = this._loaderStart.find((e)=>e.resource.path === data.resource.path && e.loaders[0].loader === _builtinLoader.loader);
                if (matchLoaderStart) {
                    matchLoaderStart.loaders[0].result = _builtinLoader.result;
                    matchLoaderStart.loaders[0].endAt = _builtinLoader.endAt;
                    this.reportLoader([
                        matchLoaderStart
                    ]);
                }
            }
        }
        reportResolver(data) {
            data.forEach((item)=>this._resolver.push(item));
            this.onDataReport();
        }
        reportPlugin(data) {
            Object.keys(data).forEach((hook)=>{
                if (this._plugin[hook]) data[hook].forEach((item)=>{
                    this._plugin[hook].push(item);
                });
                else this._plugin[hook] = data[hook];
            });
            this.onDataReport();
        }
        reportModuleGraph(data) {
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`data size: ${data.size()}`, '[SDK.reportModuleGraph][start]');
            this._moduleGraph.fromInstance(data);
            this.createPackageGraph();
            this.onDataReport();
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`sdk._moduleGraph size: ${this._moduleGraph.size()}`, '[SDK reportModuleGraph][end]');
        }
        reportPackageGraph(data) {
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug('[SDK.reportPackageGraph][start]');
            if (!this._packageGraph) this._packageGraph = data;
            this.onDataReport();
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`sdk._moduleGraph size: ${this._moduleGraph.size()}`, '[SDK reportPackageGraph][end]');
        }
        reportChunkGraph(data) {
            this._chunkGraph.addAsset(...data.getAssets());
            this._chunkGraph.addChunk(...data.getChunks());
            this._chunkGraph.addEntryPoint(...data.getEntryPoints());
            this.onDataReport();
        }
        reportSummaryData(part) {
            const keys = [
                'costs'
            ];
            for (const key of keys){
                const v = part[key];
                if (v) if ('object' == typeof v) if (Array.isArray(v)) this._summary[key] = [
                    ...this._summary[key] || [],
                    ...v
                ];
                else this._summary[key] = {
                    ...this._summary[key] || {},
                    ...v
                };
                else this._summary[key] = v;
            }
            this.onDataReport();
        }
        createPackageGraph() {
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`sdk._moduleGraph size: ${this._moduleGraph.size()}`, '[SDK.createPackageGraph][start]');
            if (!this._packageGraph) {
                const pkgGraph = _rsdoctor_graph__WEBPACK_IMPORTED_MODULE_6__.PackageGraph.fromModuleGraph(this._moduleGraph, this.root, (path)=>{
                    try {
                        const exists = _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_4__.File.fse.existsSync(path);
                        if (exists) return _rsdoctor_utils_build__WEBPACK_IMPORTED_MODULE_4__.File.fse.readJSONSync(path);
                    } catch (error) {
                        const { message, stack } = error;
                        _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(()=>`sdk.createPackageGraph error, path: ${path}, error message: ${stack || message}`, '[SDK.createPackageGraph][error]');
                    }
                });
                this._packageGraph = pkgGraph;
                _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug(`sdk._packageGraph packages: ${this._packageGraph.getPackages().length}`, '[SDK.createPackageGraph][end]');
            }
        }
        async writeStore(options) {
            var _this_extraConfig;
            _rsdoctor_utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.debug("sdk.writeStore has run.", '[SDK.writeStore][end]');
            if ((null == (_this_extraConfig = this.extraConfig) ? void 0 : _this_extraConfig.mode) === _rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.SDK.IMode[_rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.SDK.IMode.brief]) {
                var _this_extraConfig_brief;
                const clientHtmlPath = this.extraConfig.innerClientPath ? this.extraConfig.innerClientPath : require.resolve('@rsdoctor/client');
                if (null == (_this_extraConfig_brief = this.extraConfig.brief) ? void 0 : _this_extraConfig_brief.writeDataJson) await this.saveManifest(this.getStoreData(), options || {});
                return this.inlineScriptsAndStyles(clientHtmlPath);
            }
            return this.saveManifest(this.getStoreData(), options || {});
        }
        getStoreData() {
            const ctx = this;
            return {
                get hash () {
                    return ctx.hash;
                },
                get root () {
                    return ctx.root;
                },
                get envinfo () {
                    return ctx._envinfo;
                },
                get pid () {
                    return ctx.pid;
                },
                get errors () {
                    return ctx._errors.map((err)=>err.toData());
                },
                get configs () {
                    return ctx._configs.slice();
                },
                get summary () {
                    return {
                        ...ctx._summary
                    };
                },
                get resolver () {
                    return ctx._resolver.slice();
                },
                get loader () {
                    return ctx._loader.slice();
                },
                get moduleGraph () {
                    var _ctx__configs__config, _ctx__configs_, _ctx__configs;
                    return ctx._moduleGraph.toData({
                        contextPath: (null == (_ctx__configs = ctx._configs) ? void 0 : null == (_ctx__configs_ = _ctx__configs[0]) ? void 0 : null == (_ctx__configs__config = _ctx__configs_.config) ? void 0 : _ctx__configs__config.context) || ''
                    });
                },
                get chunkGraph () {
                    return ctx._chunkGraph.toData(ctx.type);
                },
                get moduleCodeMap () {
                    return ctx._moduleGraph.toCodeData(ctx.type);
                },
                get plugin () {
                    return {
                        ...ctx._plugin
                    };
                },
                get packageGraph () {
                    return ctx._packageGraph ? ctx._packageGraph.toData() : {
                        packages: [],
                        dependencies: []
                    };
                },
                get otherReports () {
                    return {
                        treemapReportHtml: ''
                    };
                }
            };
        }
        getManifestData() {
            const dataValue = this.getStoreData();
            const data = {
                client: {
                    enableRoutes: this.getClientRoutes()
                },
                data: Object.keys(dataValue).reduce((t, e)=>{
                    const _e = e;
                    if (dataValue[_e] && 'object' == typeof dataValue[_e]) t[e] = [
                        `${this.server.origin}${_rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.SDK.ServerAPI.API.LoadDataByKey}/${e}`
                    ];
                    else t[e] = dataValue[_e];
                    return t;
                }, {}),
                __LOCAL__SERVER__: true,
                __SOCKET__PORT__: this.server.socketUrl.port.toString(),
                __SOCKET__URL__: this.server.socketUrl.socketUrl
            };
            return data;
        }
        getRuleContext(_options) {
            this.createPackageGraph();
            return {
                root: this.root,
                errors: this._errors.slice(),
                configs: this._configs.slice(),
                moduleGraph: this._moduleGraph,
                chunkGraph: this._chunkGraph,
                packageGraph: this._packageGraph,
                loader: this._loader.slice(),
                otherReports: {
                    treemapReportHtml: ''
                }
            };
        }
        onDataReport() {
            this.server.broadcast();
        }
        addRsdoctorDataToHTML(storeData, htmlContent) {
            let compressTextScripts = `<script>window.${_rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.Constants.WINDOW_RSDOCTOR_TAG}={}</script>`;
            for (let key of Object.keys(storeData)){
                const data = storeData[key];
                const jsonStrFn = ()=>{
                    try {
                        if ('configs' === key) return JSON.stringify(jc.decycle(data));
                        return JSON.stringify(data);
                    } catch (error) {
                        console.error(error);
                        return '';
                    }
                };
                const compressText = _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_11__.Algorithm.compressText(jsonStrFn());
                compressTextScripts = `${compressTextScripts} <script>window.${_rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.Constants.WINDOW_RSDOCTOR_TAG}.${key}=${JSON.stringify(compressText)}</script>`;
            }
            compressTextScripts = `${compressTextScripts} <script>window.${_rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.Constants.WINDOW_RSDOCTOR_TAG}.enableRoutes=${JSON.stringify(this.getClientRoutes())}</script>`;
            htmlContent = htmlContent.replace('<body>', `<body>${compressTextScripts}`);
            return htmlContent;
        }
        inlineScriptsAndStyles(htmlFilePath) {
            var _this_extraConfig_brief, _this_extraConfig;
            function inlineScripts(basePath, scripts) {
                return scripts.map((src)=>{
                    const scriptPath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(basePath, src);
                    try {
                        const scriptContent = fs_extra__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(scriptPath, 'utf-8');
                        return `<script>${scriptContent}</script>`;
                    } catch (error) {
                        console.error(`Could not read script at ${scriptPath}:`, error);
                        return '';
                    }
                }).join('');
            }
            function inlineCss(basePath, cssFiles) {
                return cssFiles.map((href)=>{
                    const cssPath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(basePath, href);
                    try {
                        const cssContent = fs_extra__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(cssPath, 'utf-8');
                        return `<style>${cssContent}</style>`;
                    } catch (error) {
                        console.error(`Could not read CSS at ${cssPath}:`, error);
                        return '';
                    }
                }).join('');
            }
            let htmlContent = fs_extra__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(htmlFilePath, 'utf-8');
            const basePath = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(htmlFilePath);
            const scriptSrcs = Array.from(htmlContent.matchAll(/<script\s+(?:defer="defer"|defer)\s+src=["'](.+?)["']><\/script>/g), (m)=>m[1]);
            const cssHrefs = Array.from(htmlContent.matchAll(/<link\s+href=["'](.+?)["']\s+rel="stylesheet">/g), (m)=>m[1]);
            htmlContent = htmlContent.replace(/<script\s+.*?src=["'].*?["']><\/script>/g, '');
            htmlContent = htmlContent.replace(/<link\s+.*?rel=["']stylesheet["'].*?>/g, '');
            const inlinedScripts = inlineScripts(basePath, scriptSrcs);
            const inlinedCss = inlineCss(basePath, cssHrefs);
            const index = htmlContent.indexOf('</body>');
            htmlContent = htmlContent.slice(0, index) + inlinedCss + inlinedScripts + htmlContent.slice(index);
            htmlContent = this.addRsdoctorDataToHTML(this.getStoreData(), htmlContent);
            const outputFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(this.outputDir, (null == (_this_extraConfig = this.extraConfig) ? void 0 : null == (_this_extraConfig_brief = _this_extraConfig.brief) ? void 0 : _this_extraConfig_brief.reportHtmlName) || 'rsdoctor-report.html');
            fs_extra__WEBPACK_IMPORTED_MODULE_0___default().outputFileSync(outputFilePath, htmlContent, {
                encoding: 'utf-8',
                flag: 'w'
            });
            return outputFilePath;
        }
        constructor(options){
            var _options_config, _options_config1, _options_config_printLog, _options_config2;
            super(options), this._summary = {
                costs: []
            }, this._configs = [], this._errors = [], this._loader = [], this._loaderStart = [], this._resolver = [], this._plugin = {}, this._moduleGraph = new _rsdoctor_graph__WEBPACK_IMPORTED_MODULE_6__.ModuleGraph(), this._chunkGraph = new _rsdoctor_graph__WEBPACK_IMPORTED_MODULE_6__.ChunkGraph(), this._rawSourceMapCache = new Map(), this._sourceMap = new Map();
            this.server = (null == (_options_config = options.config) ? void 0 : _options_config.noServer) ? new _server_fakeServer__WEBPACK_IMPORTED_MODULE_9__.RsdoctorFakeServer(this, void 0) : new _server__WEBPACK_IMPORTED_MODULE_8__.RsdoctorServer(this, options.port, {
                innerClientPath: (null == (_options_config1 = options.config) ? void 0 : _options_config1.innerClientPath) || '',
                printServerUrl: null == (_options_config2 = options.config) ? void 0 : null == (_options_config_printLog = _options_config2.printLog) ? void 0 : _options_config_printLog.serverUrls
            });
            this.type = _rsdoctor_utils_common__WEBPACK_IMPORTED_MODULE_11__.Lodash.isNumber(options.type) ? options.type : _rsdoctor_types__WEBPACK_IMPORTED_MODULE_3__.SDK.ToDataType.Normal;
            this.extraConfig = options.config;
            this._root = (0, _utils__WEBPACK_IMPORTED_MODULE_12__.findRoot)() ?? '';
        }
    }
})();
exports.RsdoctorSDK = __webpack_exports__.RsdoctorSDK;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "RsdoctorSDK"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
