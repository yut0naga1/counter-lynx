import { Manifest, SDK } from '@rsdoctor/types';
import { RawSourceMap, SourceMapConsumer } from 'source-map';
import { RsdoctorServer } from '../server';
import { RsdoctorWebpackSDKOptions } from './types';
import { SDKCore } from './core';
export * from '../utils/openBrowser';
export * from '../utils/base';
export declare class RsdoctorSDK<T extends RsdoctorWebpackSDKOptions = RsdoctorWebpackSDKOptions> extends SDKCore<T> implements SDK.RsdoctorBuilderSDKInstance {
    server: RsdoctorServer;
    extraConfig: SDK.SDKOptionsType | undefined;
    type: SDK.ToDataType;
    _root: string;
    private _summary;
    private _configs;
    private _errors;
    private _loader;
    private _loaderStart;
    private _resolver;
    private _plugin;
    private _moduleGraph;
    private _chunkGraph;
    private _rawSourceMapCache;
    private _sourceMap;
    private _packageGraph;
    constructor(options: T);
    bootstrap(): Promise<void>;
    dispose(): Promise<void>;
    applyErrorFix(id: number): Promise<void>;
    clear(): void;
    clearSourceMapCache(): void;
    getSourceMap(file: string): Promise<SourceMapConsumer | undefined>;
    reportSourceMap(data: RawSourceMap): void;
    reportConfiguration(config: SDK.ConfigData[0]): void;
    reportError(errors: Error[]): void;
    reportLoader(data: SDK.LoaderData): void;
    reportLoaderStartOrEnd(data: SDK.ResourceLoaderData): void;
    reportResolver(data: SDK.ResolverData): void;
    reportPlugin(data: SDK.PluginData): void;
    reportModuleGraph(data: SDK.ModuleGraphInstance): void;
    reportPackageGraph(data: SDK.PackageGraphInstance): void;
    reportChunkGraph(data: SDK.ChunkGraphInstance): void;
    reportSummaryData(part: Partial<SDK.SummaryData>): void;
    createPackageGraph(): void;
    writeStore(options?: SDK.WriteStoreOptionsType): Promise<string>;
    getStoreData(): SDK.BuilderStoreData;
    getManifestData(): Manifest.RsdoctorManifestWithShardingFiles;
    getRuleContext(_options: SDK.RuntimeContextOptions): SDK.RuntimeContext;
    onDataReport(): void | Promise<void>;
    addRsdoctorDataToHTML(storeData: SDK.BuilderStoreData, htmlContent: string): string;
    inlineScriptsAndStyles(htmlFilePath: string): string;
}
//# sourceMappingURL=index.d.ts.map