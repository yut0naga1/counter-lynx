import { SDK } from "@rsdoctor/types";
import { File } from "@rsdoctor/utils/build";
import { BaseAPI } from "./base.mjs";
import { Router } from "../router.mjs";
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function _ts_metadata(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}
class RendererAPI extends BaseAPI {
    async entryHtml() {
        const { server, res } = this.ctx;
        const clientHtmlPath = server.innerClientPath ? server.innerClientPath : require.resolve('@rsdoctor/client');
        const clientHtml = await File.fse.readFile(clientHtmlPath, 'utf-8');
        res.setHeader('Content-Type', 'text/html');
        res.setHeader('Cache-Control', 'no-store');
        return clientHtml;
    }
}
_ts_decorate([
    Router.get(SDK.ServerAPI.API.EntryHtml),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], RendererAPI.prototype, "entryHtml", null);
export { RendererAPI };
