import { SDK } from "@rsdoctor/types";
import { BaseAPI } from "./base.mjs";
import { Router } from "../router.mjs";
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function _ts_metadata(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}
class LoaderAPI extends BaseAPI {
    async reportLoader() {
        const { req, sdk } = this.ctx;
        const { body } = req;
        sdk.reportLoader(body);
        return 'ok';
    }
    async reportSourceMap() {
        const { req: { body }, sdk } = this.ctx;
        sdk.reportSourceMap(body);
        return 'ok';
    }
    async getLoaderNames() {
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderNames);
    }
    async getLoaderChartData() {
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderChartData);
    }
    async getLoaderFileTree() {
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileTree);
    }
    async getLoaderFileDetails() {
        const { req } = this.ctx;
        const { path } = req.body;
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileDetails, {
            path
        });
    }
    async getLoaderFolderStatistics() {
        const { req } = this.ctx;
        const { folder } = req.body;
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFolderStatistics, {
            folder
        });
    }
    async getLoaderFileFirstInput() {
        const { req } = this.ctx;
        const { file } = req.body;
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileFirstInput, {
            file
        });
    }
    async getLoaderFileInputAndOutput() {
        const { req } = this.ctx;
        const { file, loader, loaderIndex } = req.body;
        return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileInputAndOutput, {
            file,
            loader,
            loaderIndex
        });
    }
}
_ts_decorate([
    Router.post(SDK.ServerAPI.API.ReportLoader),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "reportLoader", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.ReportSourceMap),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "reportSourceMap", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderNames),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderNames", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderChartData),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderChartData", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderFileTree),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderFileTree", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderFileDetails),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderFileDetails", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderFolderStatistics),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderFolderStatistics", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderFileFirstInput),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderFileFirstInput", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.GetLoaderFileInputAndOutput),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], LoaderAPI.prototype, "getLoaderFileInputAndOutput", null);
export { LoaderAPI };
