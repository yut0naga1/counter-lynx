import { SDK } from "@rsdoctor/types";
import { BaseAPI } from "./base.mjs";
import { Router } from "../router.mjs";
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function _ts_metadata(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}
class DataAPI extends BaseAPI {
    async loadDataByKey() {
        const { req } = this.ctx;
        const { url } = req;
        let { key } = req.body;
        if (!key && url) {
            const uri = new URL(url, 'http://127.0.0.1');
            key = uri.pathname.replace(/^\//, '');
        }
        const data = await this.loadData(key);
        return data;
    }
    async sendMessageToClient() {
        const { req, server } = this.ctx;
        const { api, data } = req.body;
        await server.sendAPIDataToClient(api, data);
    }
}
_ts_decorate([
    Router.post(SDK.ServerAPI.API.LoadDataByKey),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], DataAPI.prototype, "loadDataByKey", null);
_ts_decorate([
    Router.post(SDK.ServerAPI.API.SendAPIDataToClient),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", []),
    _ts_metadata("design:returntype", Promise)
], DataAPI.prototype, "sendMessageToClient", null);
export { DataAPI };
