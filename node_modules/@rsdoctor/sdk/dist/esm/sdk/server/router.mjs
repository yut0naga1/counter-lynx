class Router {
    static get(pathname) {
        return (target, propertyKey, descriptor)=>{
            const routes = Router.routes.get;
            if (!routes.has(target.constructor)) routes.set(target.constructor, []);
            routes.get(target.constructor).push([
                propertyKey,
                pathname
            ]);
            return descriptor;
        };
    }
    static post(pathname) {
        return (target, propertyKey, descriptor)=>{
            const routes = Router.routes.post;
            if (!routes.has(target.constructor)) routes.set(target.constructor, []);
            routes.get(target.constructor).push([
                propertyKey,
                pathname
            ]);
            return descriptor;
        };
    }
    async setup() {
        const { apis, sdk, server } = this.options;
        apis.forEach((API)=>{
            const obj = new API(sdk, server);
            Router.routes.get.forEach((v, cons)=>{
                v.forEach(([key, pathname])=>{
                    if (cons === API) server.get(pathname, this.wrapAPIFunction(obj, key));
                });
            });
            Router.routes.post.forEach((v, cons)=>{
                v.forEach(([key, pathname])=>{
                    if (cons === API) server.post(pathname, this.wrapAPIFunction(obj, key));
                });
            });
        });
    }
    wrapAPIFunction(api, key) {
        const { sdk, server } = this.options;
        return async (req, res)=>{
            const ctx = {
                req,
                res,
                sdk,
                server
            };
            const trap = new Proxy(api, {
                get (target, key, receiver) {
                    switch(key){
                        case 'ctx':
                            return ctx;
                        default:
                            return Reflect.get(target, key, receiver);
                    }
                },
                set (target, key, value, receiver) {
                    return Reflect.set(target, key, value, receiver);
                },
                defineProperty (target, p, attrs) {
                    return Reflect.defineProperty(target, p, attrs);
                }
            });
            const fn = api[key];
            const result = await fn.call(trap, trap);
            if ('string' == typeof result) return Buffer.from(result, 'utf-8');
            if (result && 'object' == typeof result) return Buffer.from(JSON.stringify(result), 'utf-8');
            return result;
        };
    }
    constructor(options){
        this.options = options;
    }
}
Router.routes = {
    get: new Map(),
    post: new Map()
};
export { Router };
