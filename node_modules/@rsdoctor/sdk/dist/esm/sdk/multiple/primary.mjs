import path from "path";
import { RsdoctorSDK } from "../sdk/index.mjs";
import { RsdoctorSlaveServer } from "./server.mjs";
let id = 1;
class RsdoctorPrimarySDK extends RsdoctorSDK {
    clearSwitch() {
        this.uploadPieces = new Promise((resolve)=>{
            this.finishUploadPieceSwitch = resolve;
        });
    }
    get isMaster() {
        return this.parent.master === this;
    }
    async writePieces() {
        const { name, parent, isMaster, outputDir, finishUploadPieceSwitch } = this;
        this.setOutputDir(isMaster ? outputDir : path.join(parent.master.outputDir, '.slaves', name.replace(/\s+/g, '-')));
        await super.writePieces(this.getStoreData());
        null == finishUploadPieceSwitch || finishUploadPieceSwitch();
    }
    async writeManifest() {
        const { parent, cloudData, dependencies } = this;
        if (!(null == dependencies ? void 0 : dependencies.length)) await Promise.all(this.parent.slaves.filter((item)=>{
            var _item_dependencies;
            return !(null == (_item_dependencies = item.dependencies) ? void 0 : _item_dependencies.length);
        }).map((item)=>item.uploadPieces));
        if (cloudData) {
            cloudData.name = this.name;
            cloudData.series = parent.getSeriesData();
        }
        const result = await super.writeManifest();
        this.clearSwitch();
        return result;
    }
    getSeriesData(serverUrl = false) {
        return this.parent.getSeriesData(serverUrl);
    }
    setName(name) {
        this._name = this.parent.hasName(name) ? `${name}-${id}` : name;
    }
    getManifestData() {
        const data = super.getManifestData();
        data.name = this.name;
        data.series = this.getSeriesData(true);
        return data;
    }
    constructor({ name, stage, controller, extraConfig, type }){
        super({
            name,
            root: controller.root
        });
        const lastSdk = controller.getLastSdk();
        const port = lastSdk ? lastSdk.server.port + 1 : this.server.port;
        this.id = id++;
        this.stage = 'number' == typeof stage ? stage : 1;
        this.extraConfig = extraConfig;
        this.parent = controller;
        this.server = new RsdoctorSlaveServer(this, port);
        this.type = type;
        this.setName(name);
        this.clearSwitch();
    }
}
export { RsdoctorPrimarySDK };
